
lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006600  08006600  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006608  08006608  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08006610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201c4  2**0
                  CONTENTS
 10 .bss          000002a0  200001c4  200001c4  000201c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  000201c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121ff  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025eb  00000000  00000000  000323f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  000349e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  000359f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a68  00000000  00000000  00036910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a99  00000000  00000000  0005b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db899  00000000  00000000  0006ee11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a6aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bfc  00000000  00000000  0014a6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001c4 	.word	0x200001c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060a8 	.word	0x080060a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	080060a8 	.word	0x080060a8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_GPIO_Init+0xbc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0xbc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a2:	f001 fb53 	bl	8001d4c <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fca8 	bl	8001000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b4:	f002 fb09 	bl	8002cca <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006be:	f000 fc9f 	bl	8001000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c6:	f002 fb3c 	bl	8002d42 <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 fc96 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200001e0 	.word	0x200001e0
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00061a80 	.word	0x00061a80

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000734:	2304      	movs	r3, #4
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_I2C_MspInit+0x8c>)
 8000740:	f001 f940 	bl	80019c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40005400 	.word	0x40005400
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <uart_write>:
static bool get_input(char c);
static void handle_key(int keyIndex);

extern void initialise_monitor_handles(void);

static void uart_write(char *data) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(data);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fd37 	bl	80001f0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
 8000786:	89fa      	ldrh	r2, [r7, #14]
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <uart_write+0x28>)
 800078e:	f003 ff0c 	bl	80045aa <HAL_UART_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000040c 	.word	0x2000040c

080007a0 <play_sound>:



void play_sound(Note note) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	463b      	mov	r3, r7
 80007a8:	e883 0003 	stmia.w	r3, {r0, r1}
	if (note.frequency == 0) {
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <play_sound+0x1c>
		htim1.Instance->CCR1 = 0; // пауза
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <play_sound+0x44>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80007ba:	e00e      	b.n	80007da <play_sound+0x3a>
	}
	htim1.Instance->ARR = (1000000U / note.frequency) - 1;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <play_sound+0x48>)
 80007c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <play_sound+0x44>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3a01      	subs	r2, #1
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // 50% duty
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <play_sound+0x44>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <play_sound+0x44>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	0852      	lsrs	r2, r2, #1
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20000334 	.word	0x20000334
 80007e8:	000f4240 	.word	0x000f4240

080007ec <stop_sound>:



void stop_sound(void) {
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <stop_sound+0x18>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000334 	.word	0x20000334

08000808 <reset_keypad>:

HAL_StatusTypeDef reset_keypad(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af04      	add	r7, sp, #16
	uint8_t buf = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, POLARITY_INV_REG, 1, &buf, 1, 100);
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	2301      	movs	r3, #1
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	2202      	movs	r2, #2
 8000822:	21e2      	movs	r1, #226	; 0xe2
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <reset_keypad+0x58>)
 8000826:	f001 fbd5 	bl	8001fd4 <HAL_I2C_Mem_Write>
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <reset_keypad+0x30>
		return status;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	e00e      	b.n	8000856 <reset_keypad+0x4e>
	status = HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, OUTPUT_PORT_REG, 1, &buf, 1, 100);
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	2201      	movs	r2, #1
 8000848:	21e2      	movs	r1, #226	; 0xe2
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <reset_keypad+0x58>)
 800084c:	f001 fbc2 	bl	8001fd4 <HAL_I2C_Mem_Write>
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
	return status;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001e0 	.word	0x200001e0

08000864 <keypad_get_id>:

int keypad_get_id(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af04      	add	r7, sp, #16
	uint32_t cur_time = HAL_GetTick();
 800086a:	f000 ff69 	bl	8001740 <HAL_GetTick>
 800086e:	6078      	str	r0, [r7, #4]
	if (cur_time - last_pressed_time < CONTACT_BOUNCE_MS) return -1;
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <keypad_get_id+0x128>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	2b13      	cmp	r3, #19
 800087a:	d802      	bhi.n	8000882 <keypad_get_id+0x1e>
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	e07f      	b.n	8000982 <keypad_get_id+0x11e>

    int key_index = -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	60fb      	str	r3, [r7, #12]
    uint8_t buf;
    uint16_t pressed_column;

    for (int row = 0; row < 4; row++) {
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	e063      	b.n	8000956 <keypad_get_id+0xf2>
        buf = ~((uint8_t) (1 << row));
 800088e:	2201      	movs	r2, #1
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	707b      	strb	r3, [r7, #1]
        reset_keypad();
 800089e:	f7ff ffb3 	bl	8000808 <reset_keypad>

        HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, CONFIG_REG, 1, &buf, 1, 100);
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	2301      	movs	r3, #1
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	1c7b      	adds	r3, r7, #1
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	21e2      	movs	r1, #226	; 0xe2
 80008b4:	4836      	ldr	r0, [pc, #216]	; (8000990 <keypad_get_id+0x12c>)
 80008b6:	f001 fb8d 	bl	8001fd4 <HAL_I2C_Mem_Write>
        HAL_Delay(10);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f000 ff4c 	bl	8001758 <HAL_Delay>
        HAL_I2C_Mem_Read(&hi2c1, KEYPAD_READ_ADDRESS, INPUT_PORT_REG, 1, &buf, 1, 100);
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2301      	movs	r3, #1
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	1c7b      	adds	r3, r7, #1
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	2200      	movs	r2, #0
 80008d0:	21e3      	movs	r1, #227	; 0xe3
 80008d2:	482f      	ldr	r0, [pc, #188]	; (8000990 <keypad_get_id+0x12c>)
 80008d4:	f001 fc78 	bl	80021c8 <HAL_I2C_Mem_Read>

        pressed_column = (~(buf >> 4)) & COLUMN_MASK;
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	b29b      	uxth	r3, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	807b      	strh	r3, [r7, #2]
        switch (pressed_column) {
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d021      	beq.n	8000934 <keypad_get_id+0xd0>
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	dc2d      	bgt.n	8000950 <keypad_get_id+0xec>
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d002      	beq.n	80008fe <keypad_get_id+0x9a>
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d00d      	beq.n	8000918 <keypad_get_id+0xb4>
 80008fc:	e028      	b.n	8000950 <keypad_get_id+0xec>
            case 0x1:
                if (key_index != -1) return -1;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d002      	beq.n	800090c <keypad_get_id+0xa8>
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e03a      	b.n	8000982 <keypad_get_id+0x11e>
                key_index = row * 3;
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
                break;
 8000916:	e01b      	b.n	8000950 <keypad_get_id+0xec>
            case 0x2:
                if (key_index != -1) return -1;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091e:	d002      	beq.n	8000926 <keypad_get_id+0xc2>
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	e02d      	b.n	8000982 <keypad_get_id+0x11e>
                key_index = (row * 3) + 1;
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
                break;
 8000932:	e00d      	b.n	8000950 <keypad_get_id+0xec>
            case 0x4:
                if (key_index != -1) return -1;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093a:	d002      	beq.n	8000942 <keypad_get_id+0xde>
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	e01f      	b.n	8000982 <keypad_get_id+0x11e>
                key_index = (row * 3) + 2;
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	3302      	adds	r3, #2
 800094c:	60fb      	str	r3, [r7, #12]
                break;
 800094e:	bf00      	nop
    for (int row = 0; row < 4; row++) {
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	3301      	adds	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	2b03      	cmp	r3, #3
 800095a:	dd98      	ble.n	800088e <keypad_get_id+0x2a>
        }
    }

    if (key_index != -1) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000962:	d00d      	beq.n	8000980 <keypad_get_id+0x11c>
    	if (key_index == last_pressed_key_index)
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <keypad_get_id+0x130>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	d102      	bne.n	8000974 <keypad_get_id+0x110>
    		return -1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e006      	b.n	8000982 <keypad_get_id+0x11e>
    	last_pressed_time = cur_time;
 8000974:	4a05      	ldr	r2, [pc, #20]	; (800098c <keypad_get_id+0x128>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
    	last_pressed_key_index = key_index;
 800097a:	4a06      	ldr	r2, [pc, #24]	; (8000994 <keypad_get_id+0x130>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6013      	str	r3, [r2, #0]
    }
    return key_index;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000328 	.word	0x20000328
 8000990:	200001e0 	.word	0x200001e0
 8000994:	2000014c 	.word	0x2000014c

08000998 <get_input>:

bool get_input(char c) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	if (inUserMelodyConfig) {
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <get_input+0x118>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d062      	beq.n	8000a70 <get_input+0xd8>


		if (c == '\r' || c == '\n') {
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b0d      	cmp	r3, #13
 80009ae:	d002      	beq.n	80009b6 <get_input+0x1e>
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b0a      	cmp	r3, #10
 80009b4:	d14c      	bne.n	8000a50 <get_input+0xb8>
			if (uartInputIndex == 0) {
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <get_input+0x11c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <get_input+0x2a>
				return true; // пустая строка
 80009be:	2301      	movs	r3, #1
 80009c0:	e071      	b.n	8000aa6 <get_input+0x10e>
			}
			uartInputBuffer[uartInputIndex] = '\0';
 80009c2:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <get_input+0x11c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <get_input+0x120>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	5499      	strb	r1, [r3, r2]
			uartInputIndex = 0;
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <get_input+0x11c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
			if (strchr(uartInputBuffer, ';') != NULL) {
 80009d4:	213b      	movs	r1, #59	; 0x3b
 80009d6:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <get_input+0x120>)
 80009d8:	f004 fa7e 	bl	8004ed8 <strchr>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <get_input+0x58>
				inUserMelodyConfig = false;
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <get_input+0x118>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
				uart_write(user_melody_done_msg);
 80009e8:	4834      	ldr	r0, [pc, #208]	; (8000abc <get_input+0x124>)
 80009ea:	f7ff fec3 	bl	8000774 <uart_write>
 80009ee:	e02d      	b.n	8000a4c <get_input+0xb4>
			} else {
				uint32_t freq, dur;
				if (sscanf(uartInputBuffer, "%lu %lu", &freq, &dur) == 2) {
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	f107 020c 	add.w	r2, r7, #12
 80009f8:	4931      	ldr	r1, [pc, #196]	; (8000ac0 <get_input+0x128>)
 80009fa:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <get_input+0x120>)
 80009fc:	f004 fa3e 	bl	8004e7c <siscanf>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d11f      	bne.n	8000a46 <get_input+0xae>
					if (userMelodyCount < MAX_USER_MELODY_NOTES) {
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <get_input+0x12c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b13      	cmp	r3, #19
 8000a0c:	d817      	bhi.n	8000a3e <get_input+0xa6>
						userMelody[userMelodyCount].frequency = freq;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <get_input+0x12c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4a2c      	ldr	r2, [pc, #176]	; (8000ac8 <get_input+0x130>)
 8000a18:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
						userMelody[userMelodyCount].duration = dur;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <get_input+0x12c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	4929      	ldr	r1, [pc, #164]	; (8000ac8 <get_input+0x130>)
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	440b      	add	r3, r1
 8000a28:	605a      	str	r2, [r3, #4]
						userMelodyCount++;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <get_input+0x12c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <get_input+0x12c>)
 8000a34:	701a      	strb	r2, [r3, #0]
						uart_write("Note added.\n\r");
 8000a36:	4825      	ldr	r0, [pc, #148]	; (8000acc <get_input+0x134>)
 8000a38:	f7ff fe9c 	bl	8000774 <uart_write>
 8000a3c:	e006      	b.n	8000a4c <get_input+0xb4>
					} else {
						uart_write("User melody is full.\n\r");
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <get_input+0x138>)
 8000a40:	f7ff fe98 	bl	8000774 <uart_write>
 8000a44:	e002      	b.n	8000a4c <get_input+0xb4>
					}
				} else {
					uart_write("Invalid input. Format: freq dur\n\rEnd input with ';'\n\r");
 8000a46:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <get_input+0x13c>)
 8000a48:	f7ff fe94 	bl	8000774 <uart_write>
				}
			}
			return true;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e02a      	b.n	8000aa6 <get_input+0x10e>
		} else {
			if (uartInputIndex < UART_INPUT_BUFFER_SIZE - 1) {
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <get_input+0x11c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b3e      	cmp	r3, #62	; 0x3e
 8000a56:	d809      	bhi.n	8000a6c <get_input+0xd4>
				uartInputBuffer[uartInputIndex++] = c;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <get_input+0x11c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	b2d1      	uxtb	r1, r2
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <get_input+0x11c>)
 8000a62:	7011      	strb	r1, [r2, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <get_input+0x120>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	5453      	strb	r3, [r2, r1]
			}
			return true;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e01a      	b.n	8000aa6 <get_input+0x10e>
		}
	} else {
		if (c == ENTER_ASCII) {
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b0d      	cmp	r3, #13
 8000a74:	d116      	bne.n	8000aa4 <get_input+0x10c>

            if (melodyState == MELODY_PLAYING) {
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <get_input+0x140>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <get_input+0xf0>
                uart_write("\n\rCannot enter configuration mode while melody is playing.\n\r");
 8000a7e:	4817      	ldr	r0, [pc, #92]	; (8000adc <get_input+0x144>)
 8000a80:	f7ff fe78 	bl	8000774 <uart_write>
                return true;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e00e      	b.n	8000aa6 <get_input+0x10e>
            }

			inUserMelodyConfig = true;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <get_input+0x118>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
			userMelodyCount = 0;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <get_input+0x12c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
			uart_write(enter_user_mode_msg);
 8000a94:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <get_input+0x148>)
 8000a96:	f7ff fe6d 	bl	8000774 <uart_write>
			uartInputIndex = 0;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <get_input+0x11c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
			return true;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <get_input+0x10e>
		}
	}
	return false;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000234 	.word	0x20000234
 8000ab4:	20000278 	.word	0x20000278
 8000ab8:	20000238 	.word	0x20000238
 8000abc:	20000074 	.word	0x20000074
 8000ac0:	080060c0 	.word	0x080060c0
 8000ac4:	2000031c 	.word	0x2000031c
 8000ac8:	2000027c 	.word	0x2000027c
 8000acc:	080060c8 	.word	0x080060c8
 8000ad0:	080060d8 	.word	0x080060d8
 8000ad4:	080060f0 	.word	0x080060f0
 8000ad8:	2000031d 	.word	0x2000031d
 8000adc:	08006128 	.word	0x08006128
 8000ae0:	200000bc 	.word	0x200000bc

08000ae4 <UART_get_input>:

void UART_get_input(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	char c;
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *)&c, 1, 10);
 8000aea:	1db9      	adds	r1, r7, #6
 8000aec:	230a      	movs	r3, #10
 8000aee:	2201      	movs	r2, #1
 8000af0:	480f      	ldr	r0, [pc, #60]	; (8000b30 <UART_get_input+0x4c>)
 8000af2:	f003 fdec 	bl	80046ce <HAL_UART_Receive>
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d112      	bne.n	8000b26 <UART_get_input+0x42>
		HAL_UART_Transmit(&huart6, (uint8_t *)&c, 1, 100); // эхо
 8000b00:	1db9      	adds	r1, r7, #6
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	480a      	ldr	r0, [pc, #40]	; (8000b30 <UART_get_input+0x4c>)
 8000b08:	f003 fd4f 	bl	80045aa <HAL_UART_Transmit>
		if (!get_input(c)) {
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff42 	bl	8000998 <get_input>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f083 0301 	eor.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <UART_get_input+0x42>
			uart_write(unknown_command_msg);
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <UART_get_input+0x50>)
 8000b22:	f7ff fe27 	bl	8000774 <uart_write>
		}
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000040c 	.word	0x2000040c
 8000b34:	20000134 	.word	0x20000134

08000b38 <play_melody>:

static void play_melody(const Note *melody, uint16_t length) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
	currentMelody = melody;
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <play_melody+0x54>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
	currentMelodyLength = length;
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <play_melody+0x58>)
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	8013      	strh	r3, [r2, #0]
	currentNoteIndex = 0;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <play_melody+0x5c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	801a      	strh	r2, [r3, #0]
	melodyState = MELODY_PLAYING;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <play_melody+0x60>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
	play_sound(currentMelody[currentNoteIndex]);
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <play_melody+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <play_melody+0x5c>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	4413      	add	r3, r2
 8000b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b6c:	f7ff fe18 	bl	80007a0 <play_sound>
	set_timer(currentMelody[currentNoteIndex].duration);
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <play_melody+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <play_melody+0x5c>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f830 	bl	8000be4 <set_timer>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000320 	.word	0x20000320
 8000b90:	20000324 	.word	0x20000324
 8000b94:	20000326 	.word	0x20000326
 8000b98:	2000031d 	.word	0x2000031d

08000b9c <stop_melody>:

static void stop_melody(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	stop_timer();
 8000ba0:	f000 f80e 	bl	8000bc0 <stop_timer>
	stop_sound();
 8000ba4:	f7ff fe22 	bl	80007ec <stop_sound>
	melodyState = MELODY_IDLE;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <stop_melody+0x1c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
	uart_write("\n\rMelody finished.\n\r");
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <stop_melody+0x20>)
 8000bb0:	f7ff fde0 	bl	8000774 <uart_write>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000031d 	.word	0x2000031d
 8000bbc:	08006168 	.word	0x08006168

08000bc0 <stop_timer>:

static void stop_timer(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <stop_timer+0x1c>)
 8000bc6:	f002 fe13 	bl	80037f0 <HAL_TIM_Base_Stop_IT>
	htim6.Instance->ARR = 0;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <stop_timer+0x1c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	timerStarted = false;
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <stop_timer+0x20>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200003c4 	.word	0x200003c4
 8000be0:	2000032c 	.word	0x2000032c

08000be4 <set_timer>:

static void set_timer(uint32_t ms) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = ms - 1;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <set_timer+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <set_timer+0x28>)
 8000bf8:	f002 fd8a 	bl	8003710 <HAL_TIM_Base_Start_IT>
	timerStarted = true;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <set_timer+0x2c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200003c4 	.word	0x200003c4
 8000c10:	2000032c 	.word	0x2000032c

08000c14 <handle_key>:

static void handle_key(int keyIndex) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	int keyCode = keyIndex + 1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]

	switch (keyCode) {
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	2b0b      	cmp	r3, #11
 8000c28:	d869      	bhi.n	8000cfe <handle_key+0xea>
 8000c2a:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <handle_key+0x1c>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000c61 	.word	0x08000c61
 8000c34:	08000c71 	.word	0x08000c71
 8000c38:	08000c81 	.word	0x08000c81
 8000c3c:	08000c91 	.word	0x08000c91
 8000c40:	08000ca1 	.word	0x08000ca1
 8000c44:	08000cff 	.word	0x08000cff
 8000c48:	08000cff 	.word	0x08000cff
 8000c4c:	08000cff 	.word	0x08000cff
 8000c50:	08000cff 	.word	0x08000cff
 8000c54:	08000cff 	.word	0x08000cff
 8000c58:	08000cc7 	.word	0x08000cc7
 8000c5c:	08000cd5 	.word	0x08000cd5
		case 1:
			uart_write(playing_standard_msg);
 8000c60:	482b      	ldr	r0, [pc, #172]	; (8000d10 <handle_key+0xfc>)
 8000c62:	f7ff fd87 	bl	8000774 <uart_write>
			play_melody(melody1, sizeof(melody1)/sizeof(Note));
 8000c66:	2116      	movs	r1, #22
 8000c68:	482a      	ldr	r0, [pc, #168]	; (8000d14 <handle_key+0x100>)
 8000c6a:	f7ff ff65 	bl	8000b38 <play_melody>
			break;
 8000c6e:	e04b      	b.n	8000d08 <handle_key+0xf4>
		case 2:
			uart_write(playing_standard_msg);
 8000c70:	4827      	ldr	r0, [pc, #156]	; (8000d10 <handle_key+0xfc>)
 8000c72:	f7ff fd7f 	bl	8000774 <uart_write>
			play_melody(melody2, sizeof(melody2)/sizeof(Note));
 8000c76:	212c      	movs	r1, #44	; 0x2c
 8000c78:	4827      	ldr	r0, [pc, #156]	; (8000d18 <handle_key+0x104>)
 8000c7a:	f7ff ff5d 	bl	8000b38 <play_melody>
			break;
 8000c7e:	e043      	b.n	8000d08 <handle_key+0xf4>
		case 3:
			uart_write(playing_standard_msg);
 8000c80:	4823      	ldr	r0, [pc, #140]	; (8000d10 <handle_key+0xfc>)
 8000c82:	f7ff fd77 	bl	8000774 <uart_write>
			play_melody(melody3, sizeof(melody3)/sizeof(Note));
 8000c86:	2105      	movs	r1, #5
 8000c88:	4824      	ldr	r0, [pc, #144]	; (8000d1c <handle_key+0x108>)
 8000c8a:	f7ff ff55 	bl	8000b38 <play_melody>
			break;
 8000c8e:	e03b      	b.n	8000d08 <handle_key+0xf4>
		case 4:
			uart_write(playing_standard_msg);
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <handle_key+0xfc>)
 8000c92:	f7ff fd6f 	bl	8000774 <uart_write>
			play_melody(melody4, sizeof(melody4)/sizeof(Note));
 8000c96:	2105      	movs	r1, #5
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <handle_key+0x10c>)
 8000c9a:	f7ff ff4d 	bl	8000b38 <play_melody>
			break;
 8000c9e:	e033      	b.n	8000d08 <handle_key+0xf4>
		case 5:
			if (userMelodyCount > 0) {
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <handle_key+0x110>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00a      	beq.n	8000cbe <handle_key+0xaa>
				uart_write(playing_user_msg);
 8000ca8:	481f      	ldr	r0, [pc, #124]	; (8000d28 <handle_key+0x114>)
 8000caa:	f7ff fd63 	bl	8000774 <uart_write>
				play_melody(userMelody, userMelodyCount);
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <handle_key+0x110>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481d      	ldr	r0, [pc, #116]	; (8000d2c <handle_key+0x118>)
 8000cb8:	f7ff ff3e 	bl	8000b38 <play_melody>
			} else {
				uart_write("User melody is empty.\n\r");
			}
			break;
 8000cbc:	e024      	b.n	8000d08 <handle_key+0xf4>
				uart_write("User melody is empty.\n\r");
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <handle_key+0x11c>)
 8000cc0:	f7ff fd58 	bl	8000774 <uart_write>
			break;
 8000cc4:	e020      	b.n	8000d08 <handle_key+0xf4>
		case 11:
	        if (melodyState == MELODY_PLAYING) {
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <handle_key+0x120>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d11b      	bne.n	8000d06 <handle_key+0xf2>
	            stop_melody();
 8000cce:	f7ff ff65 	bl	8000b9c <stop_melody>
	        }
			break;
 8000cd2:	e018      	b.n	8000d06 <handle_key+0xf2>
		case 12:
            if (melodyState == MELODY_PLAYING) {
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <handle_key+0x120>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d103      	bne.n	8000ce4 <handle_key+0xd0>
                uart_write("\n\rCannot enter configuration mode while melody is playing.\n\r");
 8000cdc:	4816      	ldr	r0, [pc, #88]	; (8000d38 <handle_key+0x124>)
 8000cde:	f7ff fd49 	bl	8000774 <uart_write>
                break;
 8000ce2:	e011      	b.n	8000d08 <handle_key+0xf4>
            }
			inUserMelodyConfig = true;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <handle_key+0x128>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
			userMelodyCount = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <handle_key+0x110>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			uart_write(enter_user_mode_msg);
 8000cf0:	4813      	ldr	r0, [pc, #76]	; (8000d40 <handle_key+0x12c>)
 8000cf2:	f7ff fd3f 	bl	8000774 <uart_write>
			uartInputIndex = 0;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <handle_key+0x130>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
			break;
 8000cfc:	e004      	b.n	8000d08 <handle_key+0xf4>
		default:
			uart_write("Key pressed but no action in main mode.\n\r");
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <handle_key+0x134>)
 8000d00:	f7ff fd38 	bl	8000774 <uart_write>
			break;
 8000d04:	e000      	b.n	8000d08 <handle_key+0xf4>
			break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000038 	.word	0x20000038
 8000d14:	080061d8 	.word	0x080061d8
 8000d18:	08006288 	.word	0x08006288
 8000d1c:	080063e8 	.word	0x080063e8
 8000d20:	08006410 	.word	0x08006410
 8000d24:	2000031c 	.word	0x2000031c
 8000d28:	20000058 	.word	0x20000058
 8000d2c:	2000027c 	.word	0x2000027c
 8000d30:	08006180 	.word	0x08006180
 8000d34:	2000031d 	.word	0x2000031d
 8000d38:	08006128 	.word	0x08006128
 8000d3c:	20000234 	.word	0x20000234
 8000d40:	200000bc 	.word	0x200000bc
 8000d44:	20000278 	.word	0x20000278
 8000d48:	08006198 	.word	0x08006198

08000d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12e      	bne.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x70>
		if (melodyState == MELODY_PLAYING && currentMelody != NULL) {
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d127      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d023      	beq.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			currentNoteIndex++;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d78:	801a      	strh	r2, [r3, #0]
			if (currentNoteIndex < currentMelodyLength) {
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d7c:	881a      	ldrh	r2, [r3, #0]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d214      	bcs.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x64>
				play_sound(currentMelody[currentNoteIndex]);
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d96:	f7ff fd03 	bl	80007a0 <play_sound>
				set_timer(currentMelody[currentNoteIndex].duration);
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff1b 	bl	8000be4 <set_timer>
			if (currentNoteIndex < currentMelodyLength) {
 8000dae:	e005      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				stop_melody();
 8000db0:	f7ff fef4 	bl	8000b9c <stop_melody>
			if (currentNoteIndex < currentMelodyLength) {
 8000db4:	e002      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x70>
			}
		} else {
			stop_timer();
 8000db6:	f7ff ff03 	bl	8000bc0 <stop_timer>
		}
	}
}
 8000dba:	e7ff      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x70>
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40001000 	.word	0x40001000
 8000dc8:	2000031d 	.word	0x2000031d
 8000dcc:	20000320 	.word	0x20000320
 8000dd0:	20000326 	.word	0x20000326
 8000dd4:	20000324 	.word	0x20000324

08000dd8 <is_button_pressed>:

bool is_button_pressed(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0);
 8000ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <is_button_pressed+0x20>)
 8000de2:	f000 ff9b 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf0c      	ite	eq
 8000dec:	2301      	moveq	r3, #1
 8000dee:	2300      	movne	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020800 	.word	0x40020800

08000dfc <main>:

int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000e02:	f000 f95f 	bl	80010c4 <initialise_monitor_handles>
	HAL_Init();
 8000e06:	f000 fc35 	bl	8001674 <HAL_Init>
	SystemClock_Config();
 8000e0a:	f000 f88d 	bl	8000f28 <SystemClock_Config>

	MX_GPIO_Init();
 8000e0e:	f7ff fbc9 	bl	80005a4 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000e12:	f000 fa2b 	bl	800126c <MX_TIM4_Init>
	MX_TIM6_Init();
 8000e16:	f000 fa97 	bl	8001348 <MX_TIM6_Init>
	MX_USART6_UART_Init();
 8000e1a:	f000 fb8f 	bl	800153c <MX_USART6_UART_Init>
	MX_TIM1_Init();
 8000e1e:	f000 f9a1 	bl	8001164 <MX_TIM1_Init>
	MX_I2C1_Init();
 8000e22:	f7ff fc1f 	bl	8000664 <MX_I2C1_Init>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e26:	2104      	movs	r1, #4
 8000e28:	4838      	ldr	r0, [pc, #224]	; (8000f0c <main+0x110>)
 8000e2a:	f002 fd5f 	bl	80038ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e2e:	2108      	movs	r1, #8
 8000e30:	4836      	ldr	r0, [pc, #216]	; (8000f0c <main+0x110>)
 8000e32:	f002 fd5b 	bl	80038ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000e36:	210c      	movs	r1, #12
 8000e38:	4834      	ldr	r0, [pc, #208]	; (8000f0c <main+0x110>)
 8000e3a:	f002 fd57 	bl	80038ec <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim1);
 8000e3e:	4834      	ldr	r0, [pc, #208]	; (8000f10 <main+0x114>)
 8000e40:	f002 fc66 	bl	8003710 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e44:	2100      	movs	r1, #0
 8000e46:	4832      	ldr	r0, [pc, #200]	; (8000f10 <main+0x114>)
 8000e48:	f002 fd50 	bl	80038ec <HAL_TIM_PWM_Start>

	stop_timer();
 8000e4c:	f7ff feb8 	bl	8000bc0 <stop_timer>

	last_pressed_time = 0;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <main+0x118>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
	bool button_pressed = false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]

	uart_write(is_test_mode ? test_mode_msg : main_mode_msg);
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <main+0x11c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <main+0x6a>
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <main+0x120>)
 8000e64:	e000      	b.n	8000e68 <main+0x6c>
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <main+0x124>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fc83 	bl	8000774 <uart_write>

	int key_index;
	while (1)
	{
		// Проверка боковой кнопки для смены режима
		if (is_button_pressed() && !button_pressed) {
 8000e6e:	f7ff ffb3 	bl	8000dd8 <is_button_pressed>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d021      	beq.n	8000ebc <main+0xc0>
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	f083 0301 	eor.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d01b      	beq.n	8000ebc <main+0xc0>
			button_pressed = true;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
			is_test_mode = !is_test_mode;
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <main+0x11c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf14      	ite	ne
 8000e90:	2301      	movne	r3, #1
 8000e92:	2300      	moveq	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <main+0x11c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			uart_write(is_test_mode ? test_mode_msg : main_mode_msg);
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <main+0x11c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <main+0xb6>
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <main+0x120>)
 8000eb0:	e000      	b.n	8000eb4 <main+0xb8>
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <main+0x124>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc5d 	bl	8000774 <uart_write>
 8000eba:	e009      	b.n	8000ed0 <main+0xd4>
		} else if (!is_button_pressed()) {
 8000ebc:	f7ff ff8c 	bl	8000dd8 <is_button_pressed>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f083 0301 	eor.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <main+0xd4>
			button_pressed = false;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
		}

		key_index = keypad_get_id();
 8000ed0:	f7ff fcc8 	bl	8000864 <keypad_get_id>
 8000ed4:	60b8      	str	r0, [r7, #8]
		if (key_index != -1) {
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d012      	beq.n	8000f04 <main+0x108>
			if (is_test_mode) {
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <main+0x11c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00b      	beq.n	8000efe <main+0x102>
				// Режим теста: просто выводим код нажатой клавиши
				char buf[8];
				sprintf(buf, "%d\n\r", key_index+1);
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	463b      	mov	r3, r7
 8000eec:	490d      	ldr	r1, [pc, #52]	; (8000f24 <main+0x128>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 ffa4 	bl	8004e3c <siprintf>
				uart_write(buf);
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fc3c 	bl	8000774 <uart_write>
 8000efc:	e002      	b.n	8000f04 <main+0x108>
			} else {
				// Основной режим – обрабатываем клавишу
				handle_key(key_index);
 8000efe:	68b8      	ldr	r0, [r7, #8]
 8000f00:	f7ff fe88 	bl	8000c14 <handle_key>
			}
		}

		UART_get_input();
 8000f04:	f7ff fdee 	bl	8000ae4 <UART_get_input>
		if (is_button_pressed() && !button_pressed) {
 8000f08:	e7b1      	b.n	8000e6e <main+0x72>
 8000f0a:	bf00      	nop
 8000f0c:	2000037c 	.word	0x2000037c
 8000f10:	20000334 	.word	0x20000334
 8000f14:	20000328 	.word	0x20000328
 8000f18:	20000150 	.word	0x20000150
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000020 	.word	0x20000020
 8000f24:	080061c4 	.word	0x080061c4

08000f28 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 ff78 	bl	8004e2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType       = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState             = RCC_HSE_ON;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource        = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM             = 15;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN             = 72;
 8000fa0:	2348      	movs	r3, #72	; 0x48
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP             = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ             = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 ff05 	bl	8002dc0 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x98>
		Error_Handler();
 8000fbc:	f000 f820 	bl	8001000 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	60fb      	str	r3, [r7, #12]
	                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider= RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider= RCC_HCLK_DIV2;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 f966 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xc6>
		Error_Handler();
 8000fea:	f000 f809 	bl	8001000 <Error_Handler>
	}
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	; 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <Error_Handler>:

void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
	__disable_irq();
	while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_MspInit+0x4c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x4c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 fb36 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <TIM6_DAC_IRQHandler+0x10>)
 80010b6:	f002 fce1 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200003c4 	.word	0x200003c4

080010c4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f003 fe68 	bl	8004dd8 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20030000 	.word	0x20030000
 8001134:	00000400 	.word	0x00000400
 8001138:	20000330 	.word	0x20000330
 800113c:	20000468 	.word	0x20000468

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b092      	sub	sp, #72	; 0x48
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2220      	movs	r2, #32
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fe4c 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <MX_TIM1_Init+0x100>)
 8001196:	4a34      	ldr	r2, [pc, #208]	; (8001268 <MX_TIM1_Init+0x104>)
 8001198:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <MX_TIM1_Init+0x100>)
 800119c:	223b      	movs	r2, #59	; 0x3b
 800119e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <MX_TIM1_Init+0x100>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <MX_TIM1_Init+0x100>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <MX_TIM1_Init+0x100>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <MX_TIM1_Init+0x100>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_TIM1_Init+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011be:	4829      	ldr	r0, [pc, #164]	; (8001264 <MX_TIM1_Init+0x100>)
 80011c0:	f002 fb45 	bl	800384e <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f7ff ff19 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011da:	4619      	mov	r1, r3
 80011dc:	4821      	ldr	r0, [pc, #132]	; (8001264 <MX_TIM1_Init+0x100>)
 80011de:	f003 f8b5 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80011e8:	f7ff ff0a 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32769;
 80011f0:	f248 0301 	movw	r3, #32769	; 0x8001
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <MX_TIM1_Init+0x100>)
 8001214:	f002 fd3a 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800121e:	f7ff feef 	bl	8001000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM1_Init+0x100>)
 8001246:	f003 f8fd 	bl	8004444 <HAL_TIMEx_ConfigBreakDeadTime>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001250:	f7ff fed6 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM1_Init+0x100>)
 8001256:	f000 f90d 	bl	8001474 <HAL_TIM_MspPostInit>

}
 800125a:	bf00      	nop
 800125c:	3748      	adds	r7, #72	; 0x48
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000334 	.word	0x20000334
 8001268:	40010000 	.word	0x40010000

0800126c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_TIM4_Init+0xd4>)
 8001290:	4a2c      	ldr	r2, [pc, #176]	; (8001344 <MX_TIM4_Init+0xd8>)
 8001292:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59;
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_TIM4_Init+0xd4>)
 8001296:	223b      	movs	r2, #59	; 0x3b
 8001298:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_TIM4_Init+0xd4>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_TIM4_Init+0xd4>)
 80012a2:	2263      	movs	r2, #99	; 0x63
 80012a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_TIM4_Init+0xd4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_TIM4_Init+0xd4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b2:	4823      	ldr	r0, [pc, #140]	; (8001340 <MX_TIM4_Init+0xd4>)
 80012b4:	f002 facb 	bl	800384e <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80012be:	f7ff fe9f 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4619      	mov	r1, r3
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <MX_TIM4_Init+0xd4>)
 80012d2:	f003 f83b 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80012dc:	f7ff fe90 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2204      	movs	r2, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_TIM4_Init+0xd4>)
 80012f8:	f002 fcc8 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001302:	f7ff fe7d 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2208      	movs	r2, #8
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_TIM4_Init+0xd4>)
 800130e:	f002 fcbd 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001318:	f7ff fe72 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	220c      	movs	r2, #12
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_TIM4_Init+0xd4>)
 8001324:	f002 fcb2 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800132e:	f7ff fe67 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <MX_TIM4_Init+0xd4>)
 8001334:	f000 f89e 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000037c 	.word	0x2000037c
 8001344:	40000800 	.word	0x40000800

08001348 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_TIM6_Init+0x64>)
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <MX_TIM6_Init+0x68>)
 800135a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_TIM6_Init+0x64>)
 800135e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001362:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_TIM6_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_TIM6_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_TIM6_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_TIM6_Init+0x64>)
 8001378:	f002 f97a 	bl	8003670 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001382:	f7ff fe3d 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_TIM6_Init+0x64>)
 8001394:	f002 ffda 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800139e:	f7ff fe2f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200003c4 	.word	0x200003c4
 80013b0:	40001000 	.word	0x40001000

080013b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_TIM_PWM_MspInit+0x64>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10e      	bne.n	80013e4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_TIM_PWM_MspInit+0x68>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_TIM_PWM_MspInit+0x68>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_TIM_PWM_MspInit+0x68>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013e2:	e012      	b.n	800140a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <HAL_TIM_PWM_MspInit+0x6c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10d      	bne.n	800140a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_TIM_PWM_MspInit+0x68>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_TIM_PWM_MspInit+0x68>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_TIM_PWM_MspInit+0x68>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40010000 	.word	0x40010000
 800141c:	40023800 	.word	0x40023800
 8001420:	40000800 	.word	0x40000800

08001424 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_TIM_Base_MspInit+0x48>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d115      	bne.n	8001462 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2036      	movs	r0, #54	; 0x36
 8001458:	f000 fa7d 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800145c:	2036      	movs	r0, #54	; 0x36
 800145e:	f000 fa96 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40001000 	.word	0x40001000
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a25      	ldr	r2, [pc, #148]	; (8001528 <HAL_TIM_MspPostInit+0xb4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11f      	bne.n	80014d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <HAL_TIM_MspPostInit+0xbc>)
 80014d0:	f000 fa78 	bl	80019c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014d4:	e023      	b.n	800151e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d11e      	bne.n	800151e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800150e:	2302      	movs	r3, #2
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <HAL_TIM_MspPostInit+0xc4>)
 800151a:	f000 fa53 	bl	80019c4 <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010000 	.word	0x40010000
 800152c:	40023800 	.word	0x40023800
 8001530:	40021000 	.word	0x40021000
 8001534:	40000800 	.word	0x40000800
 8001538:	40020c00 	.word	0x40020c00

0800153c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART6_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART6_UART_Init+0x4c>)
 8001574:	f002 ffcc 	bl	8004510 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800157e:	f7ff fd3f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000040c 	.word	0x2000040c
 800158c:	40011400 	.word	0x40011400

08001590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d12b      	bne.n	800160a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_UART_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ea:	23c0      	movs	r3, #192	; 0xc0
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015fa:	2308      	movs	r3, #8
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0x8c>)
 8001606:	f000 f9dd 	bl	80019c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40011400 	.word	0x40011400
 8001618:	40023800 	.word	0x40023800
 800161c:	40020800 	.word	0x40020800

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800163c:	4c0b      	ldr	r4, [pc, #44]	; (800166c <LoopFillZerobss+0x26>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800164a:	f7ff fd79 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164e:	f003 fbc9 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fbd3 	bl	8000dfc <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8001664:	08006610 	.word	0x08006610
  ldr r2, =_sbss
 8001668:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 800166c:	20000464 	.word	0x20000464

08001670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f94f 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fcb0 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f967 	bl	80019aa <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f92f 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000154 	.word	0x20000154
 8001710:	2000015c 	.word	0x2000015c
 8001714:	20000158 	.word	0x20000158

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000015c 	.word	0x2000015c
 800173c:	20000450 	.word	0x20000450

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000450 	.word	0x20000450

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000015c 	.word	0x2000015c

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff3e 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff31 	bl	8001804 <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e177      	b.n	8001cd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8166 	bne.w	8001cca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d005      	beq.n	8001a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d130      	bne.n	8001a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d017      	beq.n	8001ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d123      	bne.n	8001b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	08da      	lsrs	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3208      	adds	r2, #8
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80c0 	beq.w	8001cca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_GPIO_Init+0x324>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a65      	ldr	r2, [pc, #404]	; (8001ce8 <HAL_GPIO_Init+0x324>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_GPIO_Init+0x324>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b66:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_GPIO_Init+0x328>)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_GPIO_Init+0x32c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d037      	beq.n	8001c02 <HAL_GPIO_Init+0x23e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <HAL_GPIO_Init+0x330>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d031      	beq.n	8001bfe <HAL_GPIO_Init+0x23a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_GPIO_Init+0x334>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02b      	beq.n	8001bfa <HAL_GPIO_Init+0x236>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_GPIO_Init+0x338>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x232>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a54      	ldr	r2, [pc, #336]	; (8001d00 <HAL_GPIO_Init+0x33c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x22e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <HAL_GPIO_Init+0x340>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x22a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_GPIO_Init+0x344>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x226>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_GPIO_Init+0x348>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x222>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a50      	ldr	r2, [pc, #320]	; (8001d10 <HAL_GPIO_Init+0x34c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x21e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4f      	ldr	r2, [pc, #316]	; (8001d14 <HAL_GPIO_Init+0x350>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x21a>
 8001bda:	2309      	movs	r3, #9
 8001bdc:	e012      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bde:	230a      	movs	r3, #10
 8001be0:	e010      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001be2:	2308      	movs	r3, #8
 8001be4:	e00e      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001be6:	2307      	movs	r3, #7
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bea:	2306      	movs	r3, #6
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4935      	ldr	r1, [pc, #212]	; (8001cec <HAL_GPIO_Init+0x328>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c70:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f ae84 	bls.w	80019e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40021400 	.word	0x40021400
 8001d08:	40021800 	.word	0x40021800
 8001d0c:	40021c00 	.word	0x40021c00
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40022400 	.word	0x40022400
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e001      	b.n	8001d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fcb6 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 fc36 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	; (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	; (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7ff fba7 	bl	8001740 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 80d9 	bne.w	80021b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	496d      	ldr	r1, [pc, #436]	; (80021c0 <HAL_I2C_Mem_Write+0x1ec>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fc7f 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e0cc      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Write+0x56>
 8002026:	2302      	movs	r3, #2
 8002028:	e0c5      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2221      	movs	r2, #33	; 0x21
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fab6 	bl	8002614 <I2C_RequestMemoryWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d052      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e081      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fd00 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d107      	bne.n	80020da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_I2C_Mem_Write+0x180>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1aa      	bne.n	80020b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fcec 	bl	8002b3e <I2C_WaitOnBTFFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e016      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e2:	f7ff faad 	bl	8001740 <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	f040 8208 	bne.w	8002606 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2319      	movs	r3, #25
 80021fc:	2201      	movs	r2, #1
 80021fe:	497b      	ldr	r1, [pc, #492]	; (80023ec <HAL_I2C_Mem_Read+0x224>)
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fb85 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	e1fb      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2C_Mem_Read+0x56>
 800221a:	2302      	movs	r3, #2
 800221c:	e1f4      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d007      	beq.n	8002244 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2222      	movs	r2, #34	; 0x22
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a5b      	ldr	r2, [pc, #364]	; (80023f0 <HAL_I2C_Mem_Read+0x228>)
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002286:	88f8      	ldrh	r0, [r7, #6]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa52 	bl	8002740 <I2C_RequestMemoryRead>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1b0      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e184      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11b      	bne.n	8002316 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e164      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b02      	cmp	r3, #2
 800231c:	d11b      	bne.n	8002356 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	e144      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800236c:	e138      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	2b03      	cmp	r3, #3
 8002374:	f200 80f1 	bhi.w	800255a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b01      	cmp	r3, #1
 800237e:	d123      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fc1b 	bl	8002bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e139      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c6:	e10b      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d14e      	bne.n	800246e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2200      	movs	r2, #0
 80023d8:	4906      	ldr	r1, [pc, #24]	; (80023f4 <HAL_I2C_Mem_Read+0x22c>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fa98 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e10e      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
 80023ea:	bf00      	nop
 80023ec:	00100002 	.word	0x00100002
 80023f0:	ffff0000 	.word	0xffff0000
 80023f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800246c:	e0b8      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	2200      	movs	r2, #0
 8002476:	4966      	ldr	r1, [pc, #408]	; (8002610 <HAL_I2C_Mem_Read+0x448>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa49 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0bf      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2200      	movs	r2, #0
 80024d2:	494f      	ldr	r1, [pc, #316]	; (8002610 <HAL_I2C_Mem_Read+0x448>)
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fa1b 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e091      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002558:	e042      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fb2e 	bl	8002bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e04c      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d118      	bne.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f aec2 	bne.w	800236e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010004 	.word	0x00010004

08002614 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	460b      	mov	r3, r1
 8002628:	813b      	strh	r3, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2200      	movs	r2, #0
 8002646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f960 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002664:	d103      	bne.n	800266e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e05f      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002672:	897b      	ldrh	r3, [r7, #10]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	6a3a      	ldr	r2, [r7, #32]
 8002686:	492d      	ldr	r1, [pc, #180]	; (800273c <I2C_RequestMemoryWrite+0x128>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f998 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e04c      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	6a39      	ldr	r1, [r7, #32]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa02 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e02b      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026e0:	893b      	ldrh	r3, [r7, #8]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e021      	b.n	8002730 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f9dc 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e005      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002726:	893b      	ldrh	r3, [r7, #8]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	00010002 	.word	0x00010002

08002740 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2200      	movs	r2, #0
 8002782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f8c2 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a0:	d103      	bne.n	80027aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0aa      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	4952      	ldr	r1, [pc, #328]	; (800290c <I2C_RequestMemoryRead+0x1cc>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f8fa 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e097      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f964 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d107      	bne.n	8002812 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e076      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	e021      	b.n	800286c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2da      	uxtb	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	6a39      	ldr	r1, [r7, #32]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f93e 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b04      	cmp	r3, #4
 800284c:	d107      	bne.n	800285e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e050      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002862:	893b      	ldrh	r3, [r7, #8]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6a39      	ldr	r1, [r7, #32]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f923 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b04      	cmp	r3, #4
 8002882:	d107      	bne.n	8002894 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002892:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e035      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f82b 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ce:	d103      	bne.n	80028d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e013      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028dc:	897b      	ldrh	r3, [r7, #10]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	6a3a      	ldr	r2, [r7, #32]
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <I2C_RequestMemoryRead+0x1cc>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f863 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002920:	e025      	b.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe ff09 	bl	8001740 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e023      	b.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10d      	bne.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	e00c      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0b6      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029cc:	e051      	b.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d123      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e046      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d021      	beq.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7fe fe87 	bl	8001740 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e020      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e00b      	b.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d18d      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac8:	e02d      	b.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f8ce 	bl	8002c6c <I2C_IsAcknowledgeFailed>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e02d      	b.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d021      	beq.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe fe2d 	bl	8001740 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d116      	bne.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e007      	b.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d1ca      	bne.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4a:	e02d      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f88d 	bl	8002c6c <I2C_IsAcknowledgeFailed>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e02d      	b.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d021      	beq.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b64:	f7fe fdec 	bl	8001740 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d1ca      	bne.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bcc:	e042      	b.n	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d119      	bne.n	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0210 	mvn.w	r2, #16
 8002be4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e029      	b.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c10:	f7fe fd96 	bl	8001740 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d302      	bcc.n	8002c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d1b5      	bne.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c82:	d11b      	bne.n	8002cbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0204 	orr.w	r2, r3, #4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d129      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d12a      	bne.n	8002db2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002d7c:	89fb      	ldrh	r3, [r7, #14]
 8002d7e:	f023 030f 	bic.w	r3, r3, #15
 8002d82:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	89fb      	ldrh	r3, [r7, #14]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	89fa      	ldrh	r2, [r7, #14]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e267      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d075      	beq.n	8002eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dde:	4b88      	ldr	r3, [pc, #544]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d00c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dea:	4b85      	ldr	r3, [pc, #532]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d112      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05b      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x108>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d157      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e242      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x74>
 8002e26:	4b76      	ldr	r3, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a75      	ldr	r2, [pc, #468]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e01d      	b.n	8002e70 <HAL_RCC_OscConfig+0xb0>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x98>
 8002e3e:	4b70      	ldr	r3, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6f      	ldr	r2, [pc, #444]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b6d      	ldr	r3, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6c      	ldr	r2, [pc, #432]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0xb0>
 8002e58:	4b69      	ldr	r3, [pc, #420]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a68      	ldr	r2, [pc, #416]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fc62 	bl	8001740 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe fc5e 	bl	8001740 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e207      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	4b5b      	ldr	r3, [pc, #364]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0xc0>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fc4e 	bl	8001740 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fc4a 	bl	8001740 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1f3      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	4b51      	ldr	r3, [pc, #324]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xe8>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d063      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d11c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eee:	4b44      	ldr	r3, [pc, #272]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_RCC_OscConfig+0x152>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e1c7      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4937      	ldr	r1, [pc, #220]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	e03a      	b.n	8002f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_OscConfig+0x244>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe fc03 	bl	8001740 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fbff 	bl	8001740 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e1a8      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b28      	ldr	r3, [pc, #160]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4925      	ldr	r1, [pc, #148]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCC_OscConfig+0x244>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fbe2 	bl	8001740 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f80:	f7fe fbde 	bl	8001740 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e187      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d036      	beq.n	8003018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0x248>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fbc2 	bl	8001740 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fbbe 	bl	8001740 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e167      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x200>
 8002fde:	e01b      	b.n	8003018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_OscConfig+0x248>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fbab 	bl	8001740 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	e00e      	b.n	800300c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fee:	f7fe fba7 	bl	8001740 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d907      	bls.n	800300c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e150      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
 8003000:	40023800 	.word	0x40023800
 8003004:	42470000 	.word	0x42470000
 8003008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ea      	bne.n	8002fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8097 	beq.w	8003154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302a:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a7c      	ldr	r2, [pc, #496]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b7a      	ldr	r3, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b77      	ldr	r3, [pc, #476]	; (8003234 <HAL_RCC_OscConfig+0x474>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b74      	ldr	r3, [pc, #464]	; (8003234 <HAL_RCC_OscConfig+0x474>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a73      	ldr	r2, [pc, #460]	; (8003234 <HAL_RCC_OscConfig+0x474>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fe fb67 	bl	8001740 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fe fb63 	bl	8001740 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e10c      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_OscConfig+0x474>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x2ea>
 800309c:	4b64      	ldr	r3, [pc, #400]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a63      	ldr	r2, [pc, #396]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
 80030a8:	e01c      	b.n	80030e4 <HAL_RCC_OscConfig+0x324>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x30c>
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	4a5e      	ldr	r2, [pc, #376]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6713      	str	r3, [r2, #112]	; 0x70
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	4a5b      	ldr	r2, [pc, #364]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0x324>
 80030cc:	4b58      	ldr	r3, [pc, #352]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	4a57      	ldr	r2, [pc, #348]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	6713      	str	r3, [r2, #112]	; 0x70
 80030d8:	4b55      	ldr	r3, [pc, #340]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a54      	ldr	r2, [pc, #336]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80030de:	f023 0304 	bic.w	r3, r3, #4
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d015      	beq.n	8003118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fb28 	bl	8001740 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fb24 	bl	8001740 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0cb      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0ee      	beq.n	80030f4 <HAL_RCC_OscConfig+0x334>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fe fb12 	bl	8001740 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe fb0e 	bl	8001740 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0b5      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ee      	bne.n	8003120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	4a38      	ldr	r2, [pc, #224]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 800314e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a1 	beq.w	80032a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b08      	cmp	r3, #8
 8003168:	d05c      	beq.n	8003224 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d141      	bne.n	80031f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_OscConfig+0x478>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fae2 	bl	8001740 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe fade 	bl	8001740 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e087      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	3b01      	subs	r3, #1
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	491b      	ldr	r1, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x478>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fab7 	bl	8001740 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d6:	f7fe fab3 	bl	8001740 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e05c      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x416>
 80031f4:	e054      	b.n	80032a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_RCC_OscConfig+0x478>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe faa0 	bl	8001740 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe fa9c 	bl	8001740 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e045      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_RCC_OscConfig+0x470>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x444>
 8003222:	e03d      	b.n	80032a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d107      	bne.n	800323c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e038      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
 8003230:	40023800 	.word	0x40023800
 8003234:	40007000 	.word	0x40007000
 8003238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x4ec>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d028      	beq.n	800329c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d121      	bne.n	800329c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d11a      	bne.n	800329c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800326c:	4013      	ands	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003274:	4293      	cmp	r3, r2
 8003276:	d111      	bne.n	800329c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0cc      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b68      	ldr	r3, [pc, #416]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d90c      	bls.n	80032ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b8      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800330e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800331c:	4b53      	ldr	r3, [pc, #332]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a52      	ldr	r2, [pc, #328]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	494d      	ldr	r1, [pc, #308]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d044      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d119      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d003      	beq.n	800336e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336a:	2b03      	cmp	r3, #3
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336e:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e06f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337e:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e067      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4934      	ldr	r1, [pc, #208]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a0:	f7fe f9ce 	bl	8001740 <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fe f9ca 	bl	8001740 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e04f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 020c 	and.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1eb      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d20c      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	490e      	ldr	r1, [pc, #56]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003436:	f000 f821 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490a      	ldr	r1, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe f92e 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00
 800346c:	40023800 	.word	0x40023800
 8003470:	08006438 	.word	0x08006438
 8003474:	20000154 	.word	0x20000154
 8003478:	20000158 	.word	0x20000158

0800347c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003480:	b090      	sub	sp, #64	; 0x40
 8003482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	2300      	movs	r3, #0
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d00d      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x40>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	f200 80a1 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x34>
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ae:	e09b      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034b4:	e09b      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b6:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ba:	e098      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	099b      	lsrs	r3, r3, #6
 80034d8:	2200      	movs	r2, #0
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	627a      	str	r2, [r7, #36]	; 0x24
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034e4:	2100      	movs	r1, #0
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_GetSysClockFreq+0x188>)
 80034e8:	fb03 f201 	mul.w	r2, r3, r1
 80034ec:	2300      	movs	r3, #0
 80034ee:	fb00 f303 	mul.w	r3, r0, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	4a43      	ldr	r2, [pc, #268]	; (8003604 <HAL_RCC_GetSysClockFreq+0x188>)
 80034f6:	fba0 1202 	umull	r1, r2, r0, r2
 80034fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034fc:	460a      	mov	r2, r1
 80034fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003502:	4413      	add	r3, r2
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003508:	2200      	movs	r2, #0
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003516:	f7fc fec3 	bl	80002a0 <__aeabi_uldivmod>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4613      	mov	r3, r2
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003522:	e053      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003524:	4b35      	ldr	r3, [pc, #212]	; (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	099b      	lsrs	r3, r3, #6
 800352a:	2200      	movs	r2, #0
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	617a      	str	r2, [r7, #20]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003536:	f04f 0b00 	mov.w	fp, #0
 800353a:	4652      	mov	r2, sl
 800353c:	465b      	mov	r3, fp
 800353e:	f04f 0000 	mov.w	r0, #0
 8003542:	f04f 0100 	mov.w	r1, #0
 8003546:	0159      	lsls	r1, r3, #5
 8003548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354c:	0150      	lsls	r0, r2, #5
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	ebb2 080a 	subs.w	r8, r2, sl
 8003556:	eb63 090b 	sbc.w	r9, r3, fp
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800356a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800356e:	ebb2 0408 	subs.w	r4, r2, r8
 8003572:	eb63 0509 	sbc.w	r5, r3, r9
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	00eb      	lsls	r3, r5, #3
 8003580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003584:	00e2      	lsls	r2, r4, #3
 8003586:	4614      	mov	r4, r2
 8003588:	461d      	mov	r5, r3
 800358a:	eb14 030a 	adds.w	r3, r4, sl
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	eb45 030b 	adc.w	r3, r5, fp
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a2:	4629      	mov	r1, r5
 80035a4:	028b      	lsls	r3, r1, #10
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035ac:	4621      	mov	r1, r4
 80035ae:	028a      	lsls	r2, r1, #10
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	2200      	movs	r2, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	60fa      	str	r2, [r7, #12]
 80035bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c0:	f7fc fe6e 	bl	80002a0 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	3301      	adds	r3, #1
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3740      	adds	r7, #64	; 0x40
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400
 8003604:	017d7840 	.word	0x017d7840

08003608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_RCC_GetHCLKFreq+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000154 	.word	0x20000154

08003620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003624:	f7ff fff0 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	08006448 	.word	0x08006448

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff ffdc 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0b5b      	lsrs	r3, r3, #13
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	08006448 	.word	0x08006448

08003670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e041      	b.n	8003706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fec4 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 fbd6 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e04e      	b.n	80037c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_TIM_Base_Start_IT+0xdc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40000c00 	.word	0x40000c00
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40001800 	.word	0x40001800

080037f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <HAL_TIM_Base_Stop_IT+0x48>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	f240 4344 	movw	r3, #1092	; 0x444
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <HAL_TIM_Base_Stop_IT+0x48>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e041      	b.n	80038e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd fd9d 	bl	80013b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f000 fae7 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_TIM_PWM_Start+0x24>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e022      	b.n	8003956 <HAL_TIM_PWM_Start+0x6a>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d109      	bne.n	800392a <HAL_TIM_PWM_Start+0x3e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e015      	b.n	8003956 <HAL_TIM_PWM_Start+0x6a>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d109      	bne.n	8003944 <HAL_TIM_PWM_Start+0x58>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e008      	b.n	8003956 <HAL_TIM_PWM_Start+0x6a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e07c      	b.n	8003a58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <HAL_TIM_PWM_Start+0x82>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800396c:	e013      	b.n	8003996 <HAL_TIM_PWM_Start+0xaa>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d104      	bne.n	800397e <HAL_TIM_PWM_Start+0x92>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800397c:	e00b      	b.n	8003996 <HAL_TIM_PWM_Start+0xaa>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start+0xa2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800398c:	e003      	b.n	8003996 <HAL_TIM_PWM_Start+0xaa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fcae 	bl	8004300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <HAL_TIM_PWM_Start+0x174>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_TIM_PWM_Start+0xcc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2c      	ldr	r2, [pc, #176]	; (8003a64 <HAL_TIM_PWM_Start+0x178>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_TIM_PWM_Start+0xd0>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_TIM_PWM_Start+0xd2>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_TIM_PWM_Start+0x174>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_TIM_PWM_Start+0x17c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_TIM_PWM_Start+0x180>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_TIM_PWM_Start+0x184>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_TIM_PWM_Start+0x178>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_TIM_PWM_Start+0x188>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_TIM_PWM_Start+0x18c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d111      	bne.n	8003a46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d010      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	e007      	b.n	8003a56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40001800 	.word	0x40001800

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9b0 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9a2 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9b3 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f986 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f978 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f989 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f95c 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f94e 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f95f 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f932 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f924 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f935 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd f8a6 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fc68 	bl	80044fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8fa 	bl	8003e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fc32 	bl	80044e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ae      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f200 809f 	bhi.w	8003df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003df9 	.word	0x08003df9
 8003cc8:	08003df9 	.word	0x08003df9
 8003ccc:	08003df9 	.word	0x08003df9
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003df9 	.word	0x08003df9
 8003cd8:	08003df9 	.word	0x08003df9
 8003cdc:	08003df9 	.word	0x08003df9
 8003ce0:	08003d77 	.word	0x08003d77
 8003ce4:	08003df9 	.word	0x08003df9
 8003ce8:	08003df9 	.word	0x08003df9
 8003cec:	08003df9 	.word	0x08003df9
 8003cf0:	08003db7 	.word	0x08003db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f950 	bl	8003fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e064      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f9a0 	bl	8004080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e043      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f9f5 	bl	800416c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e023      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa49 	bl	8004254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a3d      	ldr	r2, [pc, #244]	; (8003f78 <TIM_Base_SetConfig+0x118>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3c      	ldr	r2, [pc, #240]	; (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3b      	ldr	r2, [pc, #236]	; (8003f80 <TIM_Base_SetConfig+0x120>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3a      	ldr	r2, [pc, #232]	; (8003f84 <TIM_Base_SetConfig+0x124>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2f      	ldr	r2, [pc, #188]	; (8003f74 <TIM_Base_SetConfig+0x114>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d02b      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d027      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <TIM_Base_SetConfig+0x118>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d023      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01f      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <TIM_Base_SetConfig+0x120>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01b      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <TIM_Base_SetConfig+0x124>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d017      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <TIM_Base_SetConfig+0x128>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00f      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <TIM_Base_SetConfig+0x130>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <TIM_Base_SetConfig+0x134>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <TIM_Base_SetConfig+0x138>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <TIM_Base_SetConfig+0x13c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d108      	bne.n	8003f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <TIM_Base_SetConfig+0x114>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0c      	ldr	r2, [pc, #48]	; (8003f84 <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800
 8003f94:	40001800 	.word	0x40001800
 8003f98:	40001c00 	.word	0x40001c00
 8003f9c:	40002000 	.word	0x40002000

08003fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0302 	bic.w	r3, r3, #2
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a20      	ldr	r2, [pc, #128]	; (8004078 <TIM_OC1_SetConfig+0xd8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC1_SetConfig+0x64>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <TIM_OC1_SetConfig+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10c      	bne.n	800401e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0308 	bic.w	r3, r3, #8
 800400a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <TIM_OC1_SetConfig+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC1_SetConfig+0x8e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <TIM_OC1_SetConfig+0xdc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400

08004080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0320 	bic.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <TIM_OC2_SetConfig+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0x68>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <TIM_OC2_SetConfig+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10d      	bne.n	8004104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC2_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0x94>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC2_SetConfig+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d113      	bne.n	800413c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40010400 	.word	0x40010400

0800416c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <TIM_OC3_SetConfig+0xe0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x66>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a20      	ldr	r2, [pc, #128]	; (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a16      	ldr	r2, [pc, #88]	; (800424c <TIM_OC3_SetConfig+0xe0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x92>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40010000 	.word	0x40010000
 8004250:	40010400 	.word	0x40010400

08004254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <TIM_OC4_SetConfig+0xa4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC4_SetConfig+0x68>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a11      	ldr	r2, [pc, #68]	; (80042fc <TIM_OC4_SetConfig+0xa8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d109      	bne.n	80042d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e05a      	b.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d01d      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a15      	ldr	r2, [pc, #84]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400
 800443c:	40014000 	.word	0x40014000
 8004440:	40001800 	.word	0x40001800

08004444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800445c:	2302      	movs	r3, #2
 800445e:	e03d      	b.n	80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e03f      	b.n	80045a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd f82a 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f9cb 	bl	80048f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b08a      	sub	sp, #40	; 0x28
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d17c      	bne.n	80046c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_UART_Transmit+0x2c>
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e075      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Transmit+0x3e>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e06e      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2221      	movs	r2, #33	; 0x21
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fe:	f7fd f89f 	bl	8001740 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d108      	bne.n	800462c <HAL_UART_Transmit+0x82>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e003      	b.n	8004634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800463c:	e02a      	b.n	8004694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f8e2 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e036      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	3302      	adds	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	e007      	b.n	8004686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1cf      	bne.n	800463e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f8b2 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e006      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	f040 808c 	bne.w	8004808 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_Receive+0x2e>
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e084      	b.n	800480a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_UART_Receive+0x40>
 800470a:	2302      	movs	r3, #2
 800470c:	e07d      	b.n	800480a <HAL_UART_Receive+0x13c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2222      	movs	r2, #34	; 0x22
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800472a:	f7fd f809 	bl	8001740 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004744:	d108      	bne.n	8004758 <HAL_UART_Receive+0x8a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e003      	b.n	8004760 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004768:	e043      	b.n	80047f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2120      	movs	r1, #32
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f84c 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e042      	b.n	800480a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	b29a      	uxth	r2, r3
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	3302      	adds	r3, #2
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e01f      	b.n	80047e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d007      	beq.n	80047be <HAL_UART_Receive+0xf0>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <HAL_UART_Receive+0xfe>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e008      	b.n	80047de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	3301      	adds	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1b6      	bne.n	800476a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b090      	sub	sp, #64	; 0x40
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004822:	e050      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d04c      	beq.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800482c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <UART_WaitOnFlagUntilTimeout+0x30>
 8004832:	f7fc ff85 	bl	8001740 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483e:	429a      	cmp	r2, r3
 8004840:	d241      	bcs.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004862:	637a      	str	r2, [r7, #52]	; 0x34
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	613b      	str	r3, [r7, #16]
   return(result);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004896:	623a      	str	r2, [r7, #32]
 8004898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	69f9      	ldr	r1, [r7, #28]
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e00f      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d09f      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3740      	adds	r7, #64	; 0x40
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b0c0      	sub	sp, #256	; 0x100
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	68d9      	ldr	r1, [r3, #12]
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	ea40 0301 	orr.w	r3, r0, r1
 8004918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	431a      	orrs	r2, r3
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	431a      	orrs	r2, r3
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004948:	f021 010c 	bic.w	r1, r1, #12
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004956:	430b      	orrs	r3, r1
 8004958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	6999      	ldr	r1, [r3, #24]
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	ea40 0301 	orr.w	r3, r0, r1
 8004976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b8f      	ldr	r3, [pc, #572]	; (8004bbc <UART_SetConfig+0x2cc>)
 8004980:	429a      	cmp	r2, r3
 8004982:	d005      	beq.n	8004990 <UART_SetConfig+0xa0>
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b8d      	ldr	r3, [pc, #564]	; (8004bc0 <UART_SetConfig+0x2d0>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d104      	bne.n	800499a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7fe fe5a 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004998:	e003      	b.n	80049a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800499a:	f7fe fe41 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 800499e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	f040 810c 	bne.w	8004bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ca:	415b      	adcs	r3, r3
 80049cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049d2:	4621      	mov	r1, r4
 80049d4:	eb12 0801 	adds.w	r8, r2, r1
 80049d8:	4629      	mov	r1, r5
 80049da:	eb43 0901 	adc.w	r9, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb18 0303 	adds.w	r3, r8, r3
 80049fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a00:	462b      	mov	r3, r5
 8004a02:	eb49 0303 	adc.w	r3, r9, r3
 8004a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a1e:	460b      	mov	r3, r1
 8004a20:	18db      	adds	r3, r3, r3
 8004a22:	653b      	str	r3, [r7, #80]	; 0x50
 8004a24:	4613      	mov	r3, r2
 8004a26:	eb42 0303 	adc.w	r3, r2, r3
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a34:	f7fb fc34 	bl	80002a0 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	011c      	lsls	r4, r3, #4
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a60:	415b      	adcs	r3, r3
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a68:	4641      	mov	r1, r8
 8004a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a6e:	4649      	mov	r1, r9
 8004a70:	eb43 0b01 	adc.w	fp, r3, r1
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a88:	4692      	mov	sl, r2
 8004a8a:	469b      	mov	fp, r3
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a96:	464b      	mov	r3, r9
 8004a98:	eb4b 0303 	adc.w	r3, fp, r3
 8004a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	18db      	adds	r3, r3, r3
 8004ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aba:	4613      	mov	r3, r2
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aca:	f7fb fbe9 	bl	80002a0 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2264      	movs	r2, #100	; 0x64
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	1acb      	subs	r3, r1, r3
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004aec:	fba3 2302 	umull	r2, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af8:	441c      	add	r4, r3
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b14:	415b      	adcs	r3, r3
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	1851      	adds	r1, r2, r1
 8004b20:	6339      	str	r1, [r7, #48]	; 0x30
 8004b22:	4649      	mov	r1, r9
 8004b24:	414b      	adcs	r3, r1
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b34:	4659      	mov	r1, fp
 8004b36:	00cb      	lsls	r3, r1, #3
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3e:	4651      	mov	r1, sl
 8004b40:	00ca      	lsls	r2, r1, #3
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b50:	464b      	mov	r3, r9
 8004b52:	460a      	mov	r2, r1
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b70:	460b      	mov	r3, r1
 8004b72:	18db      	adds	r3, r3, r3
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	4613      	mov	r3, r2
 8004b78:	eb42 0303 	adc.w	r3, r2, r3
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b86:	f7fb fb8b 	bl	80002a0 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004b90:	fba3 1302 	umull	r1, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2164      	movs	r1, #100	; 0x64
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <UART_SetConfig+0x2d4>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 0207 	and.w	r2, r3, #7
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4422      	add	r2, r4
 8004bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bb8:	e105      	b.n	8004dc6 <UART_SetConfig+0x4d6>
 8004bba:	bf00      	nop
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	40011400 	.word	0x40011400
 8004bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bda:	4642      	mov	r2, r8
 8004bdc:	464b      	mov	r3, r9
 8004bde:	1891      	adds	r1, r2, r2
 8004be0:	6239      	str	r1, [r7, #32]
 8004be2:	415b      	adcs	r3, r3
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bea:	4641      	mov	r1, r8
 8004bec:	1854      	adds	r4, r2, r1
 8004bee:	4649      	mov	r1, r9
 8004bf0:	eb43 0501 	adc.w	r5, r3, r1
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	00eb      	lsls	r3, r5, #3
 8004bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c02:	00e2      	lsls	r2, r4, #3
 8004c04:	4614      	mov	r4, r2
 8004c06:	461d      	mov	r5, r3
 8004c08:	4643      	mov	r3, r8
 8004c0a:	18e3      	adds	r3, r4, r3
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c10:	464b      	mov	r3, r9
 8004c12:	eb45 0303 	adc.w	r3, r5, r3
 8004c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c36:	4629      	mov	r1, r5
 8004c38:	008b      	lsls	r3, r1, #2
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c40:	4621      	mov	r1, r4
 8004c42:	008a      	lsls	r2, r1, #2
 8004c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c48:	f7fb fb2a 	bl	80002a0 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4b60      	ldr	r3, [pc, #384]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004c52:	fba3 2302 	umull	r2, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	011c      	lsls	r4, r3, #4
 8004c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	1891      	adds	r1, r2, r2
 8004c72:	61b9      	str	r1, [r7, #24]
 8004c74:	415b      	adcs	r3, r3
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	1851      	adds	r1, r2, r1
 8004c80:	6139      	str	r1, [r7, #16]
 8004c82:	4649      	mov	r1, r9
 8004c84:	414b      	adcs	r3, r1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c94:	4659      	mov	r1, fp
 8004c96:	00cb      	lsls	r3, r1, #3
 8004c98:	4651      	mov	r1, sl
 8004c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	00ca      	lsls	r2, r1, #3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4642      	mov	r2, r8
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	eb42 0303 	adc.w	r3, r2, r3
 8004cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	008b      	lsls	r3, r1, #2
 8004cd8:	4641      	mov	r1, r8
 8004cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cde:	4641      	mov	r1, r8
 8004ce0:	008a      	lsls	r2, r1, #2
 8004ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ce6:	f7fb fadb 	bl	80002a0 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0e:	441c      	add	r4, r3
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	2200      	movs	r2, #0
 8004d16:	673b      	str	r3, [r7, #112]	; 0x70
 8004d18:	677a      	str	r2, [r7, #116]	; 0x74
 8004d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d1e:	4642      	mov	r2, r8
 8004d20:	464b      	mov	r3, r9
 8004d22:	1891      	adds	r1, r2, r2
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	415b      	adcs	r3, r3
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2e:	4641      	mov	r1, r8
 8004d30:	1851      	adds	r1, r2, r1
 8004d32:	6039      	str	r1, [r7, #0]
 8004d34:	4649      	mov	r1, r9
 8004d36:	414b      	adcs	r3, r1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d46:	4659      	mov	r1, fp
 8004d48:	00cb      	lsls	r3, r1, #3
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d50:	4651      	mov	r1, sl
 8004d52:	00ca      	lsls	r2, r1, #3
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d60:	464b      	mov	r3, r9
 8004d62:	460a      	mov	r2, r1
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	663b      	str	r3, [r7, #96]	; 0x60
 8004d74:	667a      	str	r2, [r7, #100]	; 0x64
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d82:	4649      	mov	r1, r9
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	4641      	mov	r1, r8
 8004d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	008a      	lsls	r2, r1, #2
 8004d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d94:	f7fb fa84 	bl	80002a0 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2164      	movs	r1, #100	; 0x64
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	3332      	adds	r3, #50	; 0x32
 8004db0:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <UART_SetConfig+0x4e4>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4422      	add	r2, r4
 8004dc4:	609a      	str	r2, [r3, #8]
}
 8004dc6:	bf00      	nop
 8004dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	51eb851f 	.word	0x51eb851f

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000160 	.word	0x20000160

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f001 f956 	bl	80060a8 <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08006608 	.word	0x08006608
 8004e20:	08006608 	.word	0x08006608
 8004e24:	08006608 	.word	0x08006608
 8004e28:	0800660c 	.word	0x0800660c

08004e2c <memset>:
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	ab1d      	add	r3, sp, #116	; 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	; (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	; (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f000 f8a2 	bl	8004fa8 <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	; 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000160 	.word	0x20000160
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <siscanf>:
 8004e7c:	b40e      	push	{r1, r2, r3}
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	b09f      	sub	sp, #124	; 0x7c
 8004e82:	ac21      	add	r4, sp, #132	; 0x84
 8004e84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004e88:	f854 2b04 	ldr.w	r2, [r4], #4
 8004e8c:	9201      	str	r2, [sp, #4]
 8004e8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004e92:	9004      	str	r0, [sp, #16]
 8004e94:	9008      	str	r0, [sp, #32]
 8004e96:	f7fb f9ab 	bl	80001f0 <strlen>
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <siscanf+0x50>)
 8004e9c:	9005      	str	r0, [sp, #20]
 8004e9e:	9009      	str	r0, [sp, #36]	; 0x24
 8004ea0:	930d      	str	r3, [sp, #52]	; 0x34
 8004ea2:	480b      	ldr	r0, [pc, #44]	; (8004ed0 <siscanf+0x54>)
 8004ea4:	9a01      	ldr	r2, [sp, #4]
 8004ea6:	6800      	ldr	r0, [r0, #0]
 8004ea8:	9403      	str	r4, [sp, #12]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9311      	str	r3, [sp, #68]	; 0x44
 8004eae:	9316      	str	r3, [sp, #88]	; 0x58
 8004eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004eb8:	a904      	add	r1, sp, #16
 8004eba:	4623      	mov	r3, r4
 8004ebc:	f000 f9ce 	bl	800525c <__ssvfiscanf_r>
 8004ec0:	b01f      	add	sp, #124	; 0x7c
 8004ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec6:	b003      	add	sp, #12
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	08004ed5 	.word	0x08004ed5
 8004ed0:	20000160 	.word	0x20000160

08004ed4 <__seofread>:
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	4770      	bx	lr

08004ed8 <strchr>:
 8004ed8:	b2c9      	uxtb	r1, r1
 8004eda:	4603      	mov	r3, r0
 8004edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee0:	b11a      	cbz	r2, 8004eea <strchr+0x12>
 8004ee2:	428a      	cmp	r2, r1
 8004ee4:	d1f9      	bne.n	8004eda <strchr+0x2>
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	4770      	bx	lr
 8004eea:	2900      	cmp	r1, #0
 8004eec:	bf18      	it	ne
 8004eee:	2300      	movne	r3, #0
 8004ef0:	e7f9      	b.n	8004ee6 <strchr+0xe>

08004ef2 <__ssputs_r>:
 8004ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef6:	688e      	ldr	r6, [r1, #8]
 8004ef8:	429e      	cmp	r6, r3
 8004efa:	4682      	mov	sl, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	4690      	mov	r8, r2
 8004f00:	461f      	mov	r7, r3
 8004f02:	d838      	bhi.n	8004f76 <__ssputs_r+0x84>
 8004f04:	898a      	ldrh	r2, [r1, #12]
 8004f06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f0a:	d032      	beq.n	8004f72 <__ssputs_r+0x80>
 8004f0c:	6825      	ldr	r5, [r4, #0]
 8004f0e:	6909      	ldr	r1, [r1, #16]
 8004f10:	eba5 0901 	sub.w	r9, r5, r1
 8004f14:	6965      	ldr	r5, [r4, #20]
 8004f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f1e:	3301      	adds	r3, #1
 8004f20:	444b      	add	r3, r9
 8004f22:	106d      	asrs	r5, r5, #1
 8004f24:	429d      	cmp	r5, r3
 8004f26:	bf38      	it	cc
 8004f28:	461d      	movcc	r5, r3
 8004f2a:	0553      	lsls	r3, r2, #21
 8004f2c:	d531      	bpl.n	8004f92 <__ssputs_r+0xa0>
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f000 fff2 	bl	8005f18 <_malloc_r>
 8004f34:	4606      	mov	r6, r0
 8004f36:	b950      	cbnz	r0, 8004f4e <__ssputs_r+0x5c>
 8004f38:	230c      	movs	r3, #12
 8004f3a:	f8ca 3000 	str.w	r3, [sl]
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4e:	6921      	ldr	r1, [r4, #16]
 8004f50:	464a      	mov	r2, r9
 8004f52:	f000 ff4d 	bl	8005df0 <memcpy>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	81a3      	strh	r3, [r4, #12]
 8004f62:	6126      	str	r6, [r4, #16]
 8004f64:	6165      	str	r5, [r4, #20]
 8004f66:	444e      	add	r6, r9
 8004f68:	eba5 0509 	sub.w	r5, r5, r9
 8004f6c:	6026      	str	r6, [r4, #0]
 8004f6e:	60a5      	str	r5, [r4, #8]
 8004f70:	463e      	mov	r6, r7
 8004f72:	42be      	cmp	r6, r7
 8004f74:	d900      	bls.n	8004f78 <__ssputs_r+0x86>
 8004f76:	463e      	mov	r6, r7
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	f000 ff45 	bl	8005e0c <memmove>
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	1b9b      	subs	r3, r3, r6
 8004f86:	60a3      	str	r3, [r4, #8]
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	4433      	add	r3, r6
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e7db      	b.n	8004f4a <__ssputs_r+0x58>
 8004f92:	462a      	mov	r2, r5
 8004f94:	f001 f834 	bl	8006000 <_realloc_r>
 8004f98:	4606      	mov	r6, r0
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d1e1      	bne.n	8004f62 <__ssputs_r+0x70>
 8004f9e:	6921      	ldr	r1, [r4, #16]
 8004fa0:	4650      	mov	r0, sl
 8004fa2:	f000 ff4d 	bl	8005e40 <_free_r>
 8004fa6:	e7c7      	b.n	8004f38 <__ssputs_r+0x46>

08004fa8 <_svfiprintf_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	4698      	mov	r8, r3
 8004fae:	898b      	ldrh	r3, [r1, #12]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	b09d      	sub	sp, #116	; 0x74
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	460d      	mov	r5, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	d50e      	bpl.n	8004fda <_svfiprintf_r+0x32>
 8004fbc:	690b      	ldr	r3, [r1, #16]
 8004fbe:	b963      	cbnz	r3, 8004fda <_svfiprintf_r+0x32>
 8004fc0:	2140      	movs	r1, #64	; 0x40
 8004fc2:	f000 ffa9 	bl	8005f18 <_malloc_r>
 8004fc6:	6028      	str	r0, [r5, #0]
 8004fc8:	6128      	str	r0, [r5, #16]
 8004fca:	b920      	cbnz	r0, 8004fd6 <_svfiprintf_r+0x2e>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e0d1      	b.n	800517a <_svfiprintf_r+0x1d2>
 8004fd6:	2340      	movs	r3, #64	; 0x40
 8004fd8:	616b      	str	r3, [r5, #20]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8004fde:	2320      	movs	r3, #32
 8004fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe8:	2330      	movs	r3, #48	; 0x30
 8004fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005194 <_svfiprintf_r+0x1ec>
 8004fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ff2:	f04f 0901 	mov.w	r9, #1
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	469a      	mov	sl, r3
 8004ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ffe:	b10a      	cbz	r2, 8005004 <_svfiprintf_r+0x5c>
 8005000:	2a25      	cmp	r2, #37	; 0x25
 8005002:	d1f9      	bne.n	8004ff8 <_svfiprintf_r+0x50>
 8005004:	ebba 0b04 	subs.w	fp, sl, r4
 8005008:	d00b      	beq.n	8005022 <_svfiprintf_r+0x7a>
 800500a:	465b      	mov	r3, fp
 800500c:	4622      	mov	r2, r4
 800500e:	4629      	mov	r1, r5
 8005010:	4638      	mov	r0, r7
 8005012:	f7ff ff6e 	bl	8004ef2 <__ssputs_r>
 8005016:	3001      	adds	r0, #1
 8005018:	f000 80aa 	beq.w	8005170 <_svfiprintf_r+0x1c8>
 800501c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800501e:	445a      	add	r2, fp
 8005020:	9209      	str	r2, [sp, #36]	; 0x24
 8005022:	f89a 3000 	ldrb.w	r3, [sl]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80a2 	beq.w	8005170 <_svfiprintf_r+0x1c8>
 800502c:	2300      	movs	r3, #0
 800502e:	f04f 32ff 	mov.w	r2, #4294967295
 8005032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005036:	f10a 0a01 	add.w	sl, sl, #1
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	9307      	str	r3, [sp, #28]
 800503e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005042:	931a      	str	r3, [sp, #104]	; 0x68
 8005044:	4654      	mov	r4, sl
 8005046:	2205      	movs	r2, #5
 8005048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504c:	4851      	ldr	r0, [pc, #324]	; (8005194 <_svfiprintf_r+0x1ec>)
 800504e:	f7fb f8d7 	bl	8000200 <memchr>
 8005052:	9a04      	ldr	r2, [sp, #16]
 8005054:	b9d8      	cbnz	r0, 800508e <_svfiprintf_r+0xe6>
 8005056:	06d0      	lsls	r0, r2, #27
 8005058:	bf44      	itt	mi
 800505a:	2320      	movmi	r3, #32
 800505c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005060:	0711      	lsls	r1, r2, #28
 8005062:	bf44      	itt	mi
 8005064:	232b      	movmi	r3, #43	; 0x2b
 8005066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800506a:	f89a 3000 	ldrb.w	r3, [sl]
 800506e:	2b2a      	cmp	r3, #42	; 0x2a
 8005070:	d015      	beq.n	800509e <_svfiprintf_r+0xf6>
 8005072:	9a07      	ldr	r2, [sp, #28]
 8005074:	4654      	mov	r4, sl
 8005076:	2000      	movs	r0, #0
 8005078:	f04f 0c0a 	mov.w	ip, #10
 800507c:	4621      	mov	r1, r4
 800507e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005082:	3b30      	subs	r3, #48	; 0x30
 8005084:	2b09      	cmp	r3, #9
 8005086:	d94e      	bls.n	8005126 <_svfiprintf_r+0x17e>
 8005088:	b1b0      	cbz	r0, 80050b8 <_svfiprintf_r+0x110>
 800508a:	9207      	str	r2, [sp, #28]
 800508c:	e014      	b.n	80050b8 <_svfiprintf_r+0x110>
 800508e:	eba0 0308 	sub.w	r3, r0, r8
 8005092:	fa09 f303 	lsl.w	r3, r9, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	46a2      	mov	sl, r4
 800509c:	e7d2      	b.n	8005044 <_svfiprintf_r+0x9c>
 800509e:	9b03      	ldr	r3, [sp, #12]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	9103      	str	r1, [sp, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bfbb      	ittet	lt
 80050aa:	425b      	neglt	r3, r3
 80050ac:	f042 0202 	orrlt.w	r2, r2, #2
 80050b0:	9307      	strge	r3, [sp, #28]
 80050b2:	9307      	strlt	r3, [sp, #28]
 80050b4:	bfb8      	it	lt
 80050b6:	9204      	strlt	r2, [sp, #16]
 80050b8:	7823      	ldrb	r3, [r4, #0]
 80050ba:	2b2e      	cmp	r3, #46	; 0x2e
 80050bc:	d10c      	bne.n	80050d8 <_svfiprintf_r+0x130>
 80050be:	7863      	ldrb	r3, [r4, #1]
 80050c0:	2b2a      	cmp	r3, #42	; 0x2a
 80050c2:	d135      	bne.n	8005130 <_svfiprintf_r+0x188>
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	1d1a      	adds	r2, r3, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	9203      	str	r2, [sp, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bfb8      	it	lt
 80050d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050d4:	3402      	adds	r4, #2
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051a4 <_svfiprintf_r+0x1fc>
 80050dc:	7821      	ldrb	r1, [r4, #0]
 80050de:	2203      	movs	r2, #3
 80050e0:	4650      	mov	r0, sl
 80050e2:	f7fb f88d 	bl	8000200 <memchr>
 80050e6:	b140      	cbz	r0, 80050fa <_svfiprintf_r+0x152>
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	eba0 000a 	sub.w	r0, r0, sl
 80050ee:	fa03 f000 	lsl.w	r0, r3, r0
 80050f2:	9b04      	ldr	r3, [sp, #16]
 80050f4:	4303      	orrs	r3, r0
 80050f6:	3401      	adds	r4, #1
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fe:	4826      	ldr	r0, [pc, #152]	; (8005198 <_svfiprintf_r+0x1f0>)
 8005100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005104:	2206      	movs	r2, #6
 8005106:	f7fb f87b 	bl	8000200 <memchr>
 800510a:	2800      	cmp	r0, #0
 800510c:	d038      	beq.n	8005180 <_svfiprintf_r+0x1d8>
 800510e:	4b23      	ldr	r3, [pc, #140]	; (800519c <_svfiprintf_r+0x1f4>)
 8005110:	bb1b      	cbnz	r3, 800515a <_svfiprintf_r+0x1b2>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	3307      	adds	r3, #7
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	3308      	adds	r3, #8
 800511c:	9303      	str	r3, [sp, #12]
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	4433      	add	r3, r6
 8005122:	9309      	str	r3, [sp, #36]	; 0x24
 8005124:	e767      	b.n	8004ff6 <_svfiprintf_r+0x4e>
 8005126:	fb0c 3202 	mla	r2, ip, r2, r3
 800512a:	460c      	mov	r4, r1
 800512c:	2001      	movs	r0, #1
 800512e:	e7a5      	b.n	800507c <_svfiprintf_r+0xd4>
 8005130:	2300      	movs	r3, #0
 8005132:	3401      	adds	r4, #1
 8005134:	9305      	str	r3, [sp, #20]
 8005136:	4619      	mov	r1, r3
 8005138:	f04f 0c0a 	mov.w	ip, #10
 800513c:	4620      	mov	r0, r4
 800513e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005142:	3a30      	subs	r2, #48	; 0x30
 8005144:	2a09      	cmp	r2, #9
 8005146:	d903      	bls.n	8005150 <_svfiprintf_r+0x1a8>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0c5      	beq.n	80050d8 <_svfiprintf_r+0x130>
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	e7c3      	b.n	80050d8 <_svfiprintf_r+0x130>
 8005150:	fb0c 2101 	mla	r1, ip, r1, r2
 8005154:	4604      	mov	r4, r0
 8005156:	2301      	movs	r3, #1
 8005158:	e7f0      	b.n	800513c <_svfiprintf_r+0x194>
 800515a:	ab03      	add	r3, sp, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	462a      	mov	r2, r5
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <_svfiprintf_r+0x1f8>)
 8005162:	a904      	add	r1, sp, #16
 8005164:	4638      	mov	r0, r7
 8005166:	f3af 8000 	nop.w
 800516a:	1c42      	adds	r2, r0, #1
 800516c:	4606      	mov	r6, r0
 800516e:	d1d6      	bne.n	800511e <_svfiprintf_r+0x176>
 8005170:	89ab      	ldrh	r3, [r5, #12]
 8005172:	065b      	lsls	r3, r3, #25
 8005174:	f53f af2c 	bmi.w	8004fd0 <_svfiprintf_r+0x28>
 8005178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800517a:	b01d      	add	sp, #116	; 0x74
 800517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005180:	ab03      	add	r3, sp, #12
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	462a      	mov	r2, r5
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <_svfiprintf_r+0x1f8>)
 8005188:	a904      	add	r1, sp, #16
 800518a:	4638      	mov	r0, r7
 800518c:	f000 fa4c 	bl	8005628 <_printf_i>
 8005190:	e7eb      	b.n	800516a <_svfiprintf_r+0x1c2>
 8005192:	bf00      	nop
 8005194:	08006450 	.word	0x08006450
 8005198:	0800645a 	.word	0x0800645a
 800519c:	00000000 	.word	0x00000000
 80051a0:	08004ef3 	.word	0x08004ef3
 80051a4:	08006456 	.word	0x08006456

080051a8 <_sungetc_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	1c4b      	adds	r3, r1, #1
 80051ac:	4614      	mov	r4, r2
 80051ae:	d103      	bne.n	80051b8 <_sungetc_r+0x10>
 80051b0:	f04f 35ff 	mov.w	r5, #4294967295
 80051b4:	4628      	mov	r0, r5
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	8993      	ldrh	r3, [r2, #12]
 80051ba:	f023 0320 	bic.w	r3, r3, #32
 80051be:	8193      	strh	r3, [r2, #12]
 80051c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	b2cd      	uxtb	r5, r1
 80051c6:	b18b      	cbz	r3, 80051ec <_sungetc_r+0x44>
 80051c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051ca:	4293      	cmp	r3, r2
 80051cc:	dd08      	ble.n	80051e0 <_sungetc_r+0x38>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	1e5a      	subs	r2, r3, #1
 80051d2:	6022      	str	r2, [r4, #0]
 80051d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	3301      	adds	r3, #1
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	e7e9      	b.n	80051b4 <_sungetc_r+0xc>
 80051e0:	4621      	mov	r1, r4
 80051e2:	f000 fdc9 	bl	8005d78 <__submore>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d0f1      	beq.n	80051ce <_sungetc_r+0x26>
 80051ea:	e7e1      	b.n	80051b0 <_sungetc_r+0x8>
 80051ec:	6921      	ldr	r1, [r4, #16]
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	b151      	cbz	r1, 8005208 <_sungetc_r+0x60>
 80051f2:	4299      	cmp	r1, r3
 80051f4:	d208      	bcs.n	8005208 <_sungetc_r+0x60>
 80051f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80051fa:	42a9      	cmp	r1, r5
 80051fc:	d104      	bne.n	8005208 <_sungetc_r+0x60>
 80051fe:	3b01      	subs	r3, #1
 8005200:	3201      	adds	r2, #1
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	6062      	str	r2, [r4, #4]
 8005206:	e7d5      	b.n	80051b4 <_sungetc_r+0xc>
 8005208:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005210:	6363      	str	r3, [r4, #52]	; 0x34
 8005212:	2303      	movs	r3, #3
 8005214:	63a3      	str	r3, [r4, #56]	; 0x38
 8005216:	4623      	mov	r3, r4
 8005218:	f803 5f46 	strb.w	r5, [r3, #70]!
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	2301      	movs	r3, #1
 8005220:	e7dc      	b.n	80051dc <_sungetc_r+0x34>

08005222 <__ssrefill_r>:
 8005222:	b510      	push	{r4, lr}
 8005224:	460c      	mov	r4, r1
 8005226:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005228:	b169      	cbz	r1, 8005246 <__ssrefill_r+0x24>
 800522a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800522e:	4299      	cmp	r1, r3
 8005230:	d001      	beq.n	8005236 <__ssrefill_r+0x14>
 8005232:	f000 fe05 	bl	8005e40 <_free_r>
 8005236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	2000      	movs	r0, #0
 800523c:	6360      	str	r0, [r4, #52]	; 0x34
 800523e:	b113      	cbz	r3, 8005246 <__ssrefill_r+0x24>
 8005240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	bd10      	pop	{r4, pc}
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	2300      	movs	r3, #0
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f043 0320 	orr.w	r3, r3, #32
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	e7f3      	b.n	8005244 <__ssrefill_r+0x22>

0800525c <__ssvfiscanf_r>:
 800525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	460c      	mov	r4, r1
 8005262:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005266:	2100      	movs	r1, #0
 8005268:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800526c:	49a6      	ldr	r1, [pc, #664]	; (8005508 <__ssvfiscanf_r+0x2ac>)
 800526e:	91a0      	str	r1, [sp, #640]	; 0x280
 8005270:	f10d 0804 	add.w	r8, sp, #4
 8005274:	49a5      	ldr	r1, [pc, #660]	; (800550c <__ssvfiscanf_r+0x2b0>)
 8005276:	4fa6      	ldr	r7, [pc, #664]	; (8005510 <__ssvfiscanf_r+0x2b4>)
 8005278:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005514 <__ssvfiscanf_r+0x2b8>
 800527c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005280:	4606      	mov	r6, r0
 8005282:	91a1      	str	r1, [sp, #644]	; 0x284
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	7813      	ldrb	r3, [r2, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 815a 	beq.w	8005542 <__ssvfiscanf_r+0x2e6>
 800528e:	5dd9      	ldrb	r1, [r3, r7]
 8005290:	f011 0108 	ands.w	r1, r1, #8
 8005294:	f102 0501 	add.w	r5, r2, #1
 8005298:	d019      	beq.n	80052ce <__ssvfiscanf_r+0x72>
 800529a:	6863      	ldr	r3, [r4, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	dd0f      	ble.n	80052c0 <__ssvfiscanf_r+0x64>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	5cba      	ldrb	r2, [r7, r2]
 80052a6:	0712      	lsls	r2, r2, #28
 80052a8:	d401      	bmi.n	80052ae <__ssvfiscanf_r+0x52>
 80052aa:	462a      	mov	r2, r5
 80052ac:	e7eb      	b.n	8005286 <__ssvfiscanf_r+0x2a>
 80052ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052b0:	3201      	adds	r2, #1
 80052b2:	9245      	str	r2, [sp, #276]	; 0x114
 80052b4:	6862      	ldr	r2, [r4, #4]
 80052b6:	3301      	adds	r3, #1
 80052b8:	3a01      	subs	r2, #1
 80052ba:	6062      	str	r2, [r4, #4]
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	e7ec      	b.n	800529a <__ssvfiscanf_r+0x3e>
 80052c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052c2:	4621      	mov	r1, r4
 80052c4:	4630      	mov	r0, r6
 80052c6:	4798      	blx	r3
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d0e9      	beq.n	80052a0 <__ssvfiscanf_r+0x44>
 80052cc:	e7ed      	b.n	80052aa <__ssvfiscanf_r+0x4e>
 80052ce:	2b25      	cmp	r3, #37	; 0x25
 80052d0:	d012      	beq.n	80052f8 <__ssvfiscanf_r+0x9c>
 80052d2:	469a      	mov	sl, r3
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f340 8091 	ble.w	80053fe <__ssvfiscanf_r+0x1a2>
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	7813      	ldrb	r3, [r2, #0]
 80052e0:	4553      	cmp	r3, sl
 80052e2:	f040 812e 	bne.w	8005542 <__ssvfiscanf_r+0x2e6>
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80052ee:	3201      	adds	r2, #1
 80052f0:	3301      	adds	r3, #1
 80052f2:	6022      	str	r2, [r4, #0]
 80052f4:	9345      	str	r3, [sp, #276]	; 0x114
 80052f6:	e7d8      	b.n	80052aa <__ssvfiscanf_r+0x4e>
 80052f8:	9141      	str	r1, [sp, #260]	; 0x104
 80052fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80052fc:	7853      	ldrb	r3, [r2, #1]
 80052fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005300:	bf02      	ittt	eq
 8005302:	2310      	moveq	r3, #16
 8005304:	1c95      	addeq	r5, r2, #2
 8005306:	9341      	streq	r3, [sp, #260]	; 0x104
 8005308:	220a      	movs	r2, #10
 800530a:	46aa      	mov	sl, r5
 800530c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005310:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005314:	2b09      	cmp	r3, #9
 8005316:	d91d      	bls.n	8005354 <__ssvfiscanf_r+0xf8>
 8005318:	487e      	ldr	r0, [pc, #504]	; (8005514 <__ssvfiscanf_r+0x2b8>)
 800531a:	2203      	movs	r2, #3
 800531c:	f7fa ff70 	bl	8000200 <memchr>
 8005320:	b140      	cbz	r0, 8005334 <__ssvfiscanf_r+0xd8>
 8005322:	2301      	movs	r3, #1
 8005324:	eba0 0009 	sub.w	r0, r0, r9
 8005328:	fa03 f000 	lsl.w	r0, r3, r0
 800532c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800532e:	4318      	orrs	r0, r3
 8005330:	9041      	str	r0, [sp, #260]	; 0x104
 8005332:	4655      	mov	r5, sl
 8005334:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005338:	2b78      	cmp	r3, #120	; 0x78
 800533a:	d806      	bhi.n	800534a <__ssvfiscanf_r+0xee>
 800533c:	2b57      	cmp	r3, #87	; 0x57
 800533e:	d810      	bhi.n	8005362 <__ssvfiscanf_r+0x106>
 8005340:	2b25      	cmp	r3, #37	; 0x25
 8005342:	d0c6      	beq.n	80052d2 <__ssvfiscanf_r+0x76>
 8005344:	d856      	bhi.n	80053f4 <__ssvfiscanf_r+0x198>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d064      	beq.n	8005414 <__ssvfiscanf_r+0x1b8>
 800534a:	2303      	movs	r3, #3
 800534c:	9347      	str	r3, [sp, #284]	; 0x11c
 800534e:	230a      	movs	r3, #10
 8005350:	9342      	str	r3, [sp, #264]	; 0x108
 8005352:	e071      	b.n	8005438 <__ssvfiscanf_r+0x1dc>
 8005354:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005356:	fb02 1103 	mla	r1, r2, r3, r1
 800535a:	3930      	subs	r1, #48	; 0x30
 800535c:	9143      	str	r1, [sp, #268]	; 0x10c
 800535e:	4655      	mov	r5, sl
 8005360:	e7d3      	b.n	800530a <__ssvfiscanf_r+0xae>
 8005362:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005366:	2a20      	cmp	r2, #32
 8005368:	d8ef      	bhi.n	800534a <__ssvfiscanf_r+0xee>
 800536a:	a101      	add	r1, pc, #4	; (adr r1, 8005370 <__ssvfiscanf_r+0x114>)
 800536c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005370:	08005423 	.word	0x08005423
 8005374:	0800534b 	.word	0x0800534b
 8005378:	0800534b 	.word	0x0800534b
 800537c:	08005481 	.word	0x08005481
 8005380:	0800534b 	.word	0x0800534b
 8005384:	0800534b 	.word	0x0800534b
 8005388:	0800534b 	.word	0x0800534b
 800538c:	0800534b 	.word	0x0800534b
 8005390:	0800534b 	.word	0x0800534b
 8005394:	0800534b 	.word	0x0800534b
 8005398:	0800534b 	.word	0x0800534b
 800539c:	08005497 	.word	0x08005497
 80053a0:	0800546d 	.word	0x0800546d
 80053a4:	080053fb 	.word	0x080053fb
 80053a8:	080053fb 	.word	0x080053fb
 80053ac:	080053fb 	.word	0x080053fb
 80053b0:	0800534b 	.word	0x0800534b
 80053b4:	08005471 	.word	0x08005471
 80053b8:	0800534b 	.word	0x0800534b
 80053bc:	0800534b 	.word	0x0800534b
 80053c0:	0800534b 	.word	0x0800534b
 80053c4:	0800534b 	.word	0x0800534b
 80053c8:	080054a7 	.word	0x080054a7
 80053cc:	08005479 	.word	0x08005479
 80053d0:	0800541b 	.word	0x0800541b
 80053d4:	0800534b 	.word	0x0800534b
 80053d8:	0800534b 	.word	0x0800534b
 80053dc:	080054a3 	.word	0x080054a3
 80053e0:	0800534b 	.word	0x0800534b
 80053e4:	0800546d 	.word	0x0800546d
 80053e8:	0800534b 	.word	0x0800534b
 80053ec:	0800534b 	.word	0x0800534b
 80053f0:	08005423 	.word	0x08005423
 80053f4:	3b45      	subs	r3, #69	; 0x45
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d8a7      	bhi.n	800534a <__ssvfiscanf_r+0xee>
 80053fa:	2305      	movs	r3, #5
 80053fc:	e01b      	b.n	8005436 <__ssvfiscanf_r+0x1da>
 80053fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005400:	4621      	mov	r1, r4
 8005402:	4630      	mov	r0, r6
 8005404:	4798      	blx	r3
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f af68 	beq.w	80052dc <__ssvfiscanf_r+0x80>
 800540c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 808d 	bne.w	800552e <__ssvfiscanf_r+0x2d2>
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e08f      	b.n	800553a <__ssvfiscanf_r+0x2de>
 800541a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800541c:	f042 0220 	orr.w	r2, r2, #32
 8005420:	9241      	str	r2, [sp, #260]	; 0x104
 8005422:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	9241      	str	r2, [sp, #260]	; 0x104
 800542a:	2210      	movs	r2, #16
 800542c:	2b6f      	cmp	r3, #111	; 0x6f
 800542e:	9242      	str	r2, [sp, #264]	; 0x108
 8005430:	bf34      	ite	cc
 8005432:	2303      	movcc	r3, #3
 8005434:	2304      	movcs	r3, #4
 8005436:	9347      	str	r3, [sp, #284]	; 0x11c
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	dd42      	ble.n	80054c4 <__ssvfiscanf_r+0x268>
 800543e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005440:	0659      	lsls	r1, r3, #25
 8005442:	d404      	bmi.n	800544e <__ssvfiscanf_r+0x1f2>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	781a      	ldrb	r2, [r3, #0]
 8005448:	5cba      	ldrb	r2, [r7, r2]
 800544a:	0712      	lsls	r2, r2, #28
 800544c:	d441      	bmi.n	80054d2 <__ssvfiscanf_r+0x276>
 800544e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005450:	2b02      	cmp	r3, #2
 8005452:	dc50      	bgt.n	80054f6 <__ssvfiscanf_r+0x29a>
 8005454:	466b      	mov	r3, sp
 8005456:	4622      	mov	r2, r4
 8005458:	a941      	add	r1, sp, #260	; 0x104
 800545a:	4630      	mov	r0, r6
 800545c:	f000 fa0a 	bl	8005874 <_scanf_chars>
 8005460:	2801      	cmp	r0, #1
 8005462:	d06e      	beq.n	8005542 <__ssvfiscanf_r+0x2e6>
 8005464:	2802      	cmp	r0, #2
 8005466:	f47f af20 	bne.w	80052aa <__ssvfiscanf_r+0x4e>
 800546a:	e7cf      	b.n	800540c <__ssvfiscanf_r+0x1b0>
 800546c:	220a      	movs	r2, #10
 800546e:	e7dd      	b.n	800542c <__ssvfiscanf_r+0x1d0>
 8005470:	2300      	movs	r3, #0
 8005472:	9342      	str	r3, [sp, #264]	; 0x108
 8005474:	2303      	movs	r3, #3
 8005476:	e7de      	b.n	8005436 <__ssvfiscanf_r+0x1da>
 8005478:	2308      	movs	r3, #8
 800547a:	9342      	str	r3, [sp, #264]	; 0x108
 800547c:	2304      	movs	r3, #4
 800547e:	e7da      	b.n	8005436 <__ssvfiscanf_r+0x1da>
 8005480:	4629      	mov	r1, r5
 8005482:	4640      	mov	r0, r8
 8005484:	f000 fb48 	bl	8005b18 <__sccl>
 8005488:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800548a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548e:	9341      	str	r3, [sp, #260]	; 0x104
 8005490:	4605      	mov	r5, r0
 8005492:	2301      	movs	r3, #1
 8005494:	e7cf      	b.n	8005436 <__ssvfiscanf_r+0x1da>
 8005496:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800549c:	9341      	str	r3, [sp, #260]	; 0x104
 800549e:	2300      	movs	r3, #0
 80054a0:	e7c9      	b.n	8005436 <__ssvfiscanf_r+0x1da>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e7c7      	b.n	8005436 <__ssvfiscanf_r+0x1da>
 80054a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80054a8:	06c3      	lsls	r3, r0, #27
 80054aa:	f53f aefe 	bmi.w	80052aa <__ssvfiscanf_r+0x4e>
 80054ae:	9b00      	ldr	r3, [sp, #0]
 80054b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80054b2:	1d19      	adds	r1, r3, #4
 80054b4:	9100      	str	r1, [sp, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f010 0f01 	tst.w	r0, #1
 80054bc:	bf14      	ite	ne
 80054be:	801a      	strhne	r2, [r3, #0]
 80054c0:	601a      	streq	r2, [r3, #0]
 80054c2:	e6f2      	b.n	80052aa <__ssvfiscanf_r+0x4e>
 80054c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80054c6:	4621      	mov	r1, r4
 80054c8:	4630      	mov	r0, r6
 80054ca:	4798      	blx	r3
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d0b6      	beq.n	800543e <__ssvfiscanf_r+0x1e2>
 80054d0:	e79c      	b.n	800540c <__ssvfiscanf_r+0x1b0>
 80054d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80054d4:	3201      	adds	r2, #1
 80054d6:	9245      	str	r2, [sp, #276]	; 0x114
 80054d8:	6862      	ldr	r2, [r4, #4]
 80054da:	3a01      	subs	r2, #1
 80054dc:	2a00      	cmp	r2, #0
 80054de:	6062      	str	r2, [r4, #4]
 80054e0:	dd02      	ble.n	80054e8 <__ssvfiscanf_r+0x28c>
 80054e2:	3301      	adds	r3, #1
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	e7ad      	b.n	8005444 <__ssvfiscanf_r+0x1e8>
 80054e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80054ea:	4621      	mov	r1, r4
 80054ec:	4630      	mov	r0, r6
 80054ee:	4798      	blx	r3
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0a7      	beq.n	8005444 <__ssvfiscanf_r+0x1e8>
 80054f4:	e78a      	b.n	800540c <__ssvfiscanf_r+0x1b0>
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	dc0e      	bgt.n	8005518 <__ssvfiscanf_r+0x2bc>
 80054fa:	466b      	mov	r3, sp
 80054fc:	4622      	mov	r2, r4
 80054fe:	a941      	add	r1, sp, #260	; 0x104
 8005500:	4630      	mov	r0, r6
 8005502:	f000 fa11 	bl	8005928 <_scanf_i>
 8005506:	e7ab      	b.n	8005460 <__ssvfiscanf_r+0x204>
 8005508:	080051a9 	.word	0x080051a9
 800550c:	08005223 	.word	0x08005223
 8005510:	0800649f 	.word	0x0800649f
 8005514:	08006456 	.word	0x08006456
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <__ssvfiscanf_r+0x2ec>)
 800551a:	2b00      	cmp	r3, #0
 800551c:	f43f aec5 	beq.w	80052aa <__ssvfiscanf_r+0x4e>
 8005520:	466b      	mov	r3, sp
 8005522:	4622      	mov	r2, r4
 8005524:	a941      	add	r1, sp, #260	; 0x104
 8005526:	4630      	mov	r0, r6
 8005528:	f3af 8000 	nop.w
 800552c:	e798      	b.n	8005460 <__ssvfiscanf_r+0x204>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005534:	bf18      	it	ne
 8005536:	f04f 30ff 	movne.w	r0, #4294967295
 800553a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005542:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005544:	e7f9      	b.n	800553a <__ssvfiscanf_r+0x2de>
 8005546:	bf00      	nop
 8005548:	00000000 	.word	0x00000000

0800554c <_printf_common>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4616      	mov	r6, r2
 8005552:	4699      	mov	r9, r3
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800555c:	4293      	cmp	r3, r2
 800555e:	bfb8      	it	lt
 8005560:	4613      	movlt	r3, r2
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005568:	4607      	mov	r7, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b10a      	cbz	r2, 8005572 <_printf_common+0x26>
 800556e:	3301      	adds	r3, #1
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	6833      	ldrmi	r3, [r6, #0]
 800557a:	3302      	addmi	r3, #2
 800557c:	6033      	strmi	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	f015 0506 	ands.w	r5, r5, #6
 8005584:	d106      	bne.n	8005594 <_printf_common+0x48>
 8005586:	f104 0a19 	add.w	sl, r4, #25
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc26      	bgt.n	80055e2 <_printf_common+0x96>
 8005594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005598:	1e13      	subs	r3, r2, #0
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d42b      	bmi.n	80055fc <_printf_common+0xb0>
 80055a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a8:	4649      	mov	r1, r9
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c0      	blx	r8
 80055ae:	3001      	adds	r0, #1
 80055b0:	d01e      	beq.n	80055f0 <_printf_common+0xa4>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	68e5      	ldr	r5, [r4, #12]
 80055b6:	6832      	ldr	r2, [r6, #0]
 80055b8:	f003 0306 	and.w	r3, r3, #6
 80055bc:	2b04      	cmp	r3, #4
 80055be:	bf08      	it	eq
 80055c0:	1aad      	subeq	r5, r5, r2
 80055c2:	68a3      	ldr	r3, [r4, #8]
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	bf0c      	ite	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	2500      	movne	r5, #0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfc4      	itt	gt
 80055d2:	1a9b      	subgt	r3, r3, r2
 80055d4:	18ed      	addgt	r5, r5, r3
 80055d6:	2600      	movs	r6, #0
 80055d8:	341a      	adds	r4, #26
 80055da:	42b5      	cmp	r5, r6
 80055dc:	d11a      	bne.n	8005614 <_printf_common+0xc8>
 80055de:	2000      	movs	r0, #0
 80055e0:	e008      	b.n	80055f4 <_printf_common+0xa8>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4652      	mov	r2, sl
 80055e6:	4649      	mov	r1, r9
 80055e8:	4638      	mov	r0, r7
 80055ea:	47c0      	blx	r8
 80055ec:	3001      	adds	r0, #1
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0xac>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	3501      	adds	r5, #1
 80055fa:	e7c6      	b.n	800558a <_printf_common+0x3e>
 80055fc:	18e1      	adds	r1, r4, r3
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	2030      	movs	r0, #48	; 0x30
 8005602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005606:	4422      	add	r2, r4
 8005608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800560c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005610:	3302      	adds	r3, #2
 8005612:	e7c7      	b.n	80055a4 <_printf_common+0x58>
 8005614:	2301      	movs	r3, #1
 8005616:	4622      	mov	r2, r4
 8005618:	4649      	mov	r1, r9
 800561a:	4638      	mov	r0, r7
 800561c:	47c0      	blx	r8
 800561e:	3001      	adds	r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa4>
 8005622:	3601      	adds	r6, #1
 8005624:	e7d9      	b.n	80055da <_printf_common+0x8e>
	...

08005628 <_printf_i>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	7e0f      	ldrb	r7, [r1, #24]
 800562e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005630:	2f78      	cmp	r7, #120	; 0x78
 8005632:	4691      	mov	r9, r2
 8005634:	4680      	mov	r8, r0
 8005636:	460c      	mov	r4, r1
 8005638:	469a      	mov	sl, r3
 800563a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800563e:	d807      	bhi.n	8005650 <_printf_i+0x28>
 8005640:	2f62      	cmp	r7, #98	; 0x62
 8005642:	d80a      	bhi.n	800565a <_printf_i+0x32>
 8005644:	2f00      	cmp	r7, #0
 8005646:	f000 80d8 	beq.w	80057fa <_printf_i+0x1d2>
 800564a:	2f58      	cmp	r7, #88	; 0x58
 800564c:	f000 80a3 	beq.w	8005796 <_printf_i+0x16e>
 8005650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005658:	e03a      	b.n	80056d0 <_printf_i+0xa8>
 800565a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800565e:	2b15      	cmp	r3, #21
 8005660:	d8f6      	bhi.n	8005650 <_printf_i+0x28>
 8005662:	a101      	add	r1, pc, #4	; (adr r1, 8005668 <_printf_i+0x40>)
 8005664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005651 	.word	0x08005651
 8005674:	08005651 	.word	0x08005651
 8005678:	08005651 	.word	0x08005651
 800567c:	08005651 	.word	0x08005651
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005651 	.word	0x08005651
 8005688:	08005651 	.word	0x08005651
 800568c:	08005651 	.word	0x08005651
 8005690:	08005651 	.word	0x08005651
 8005694:	080057e1 	.word	0x080057e1
 8005698:	08005705 	.word	0x08005705
 800569c:	080057c3 	.word	0x080057c3
 80056a0:	08005651 	.word	0x08005651
 80056a4:	08005651 	.word	0x08005651
 80056a8:	08005803 	.word	0x08005803
 80056ac:	08005651 	.word	0x08005651
 80056b0:	08005705 	.word	0x08005705
 80056b4:	08005651 	.word	0x08005651
 80056b8:	08005651 	.word	0x08005651
 80056bc:	080057cb 	.word	0x080057cb
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0a3      	b.n	800581c <_printf_i+0x1f4>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	6829      	ldr	r1, [r5, #0]
 80056d8:	0606      	lsls	r6, r0, #24
 80056da:	f101 0304 	add.w	r3, r1, #4
 80056de:	d50a      	bpl.n	80056f6 <_printf_i+0xce>
 80056e0:	680e      	ldr	r6, [r1, #0]
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	da03      	bge.n	80056f0 <_printf_i+0xc8>
 80056e8:	232d      	movs	r3, #45	; 0x2d
 80056ea:	4276      	negs	r6, r6
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f0:	485e      	ldr	r0, [pc, #376]	; (800586c <_printf_i+0x244>)
 80056f2:	230a      	movs	r3, #10
 80056f4:	e019      	b.n	800572a <_printf_i+0x102>
 80056f6:	680e      	ldr	r6, [r1, #0]
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056fe:	bf18      	it	ne
 8005700:	b236      	sxthne	r6, r6
 8005702:	e7ef      	b.n	80056e4 <_printf_i+0xbc>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	6029      	str	r1, [r5, #0]
 800570c:	0601      	lsls	r1, r0, #24
 800570e:	d501      	bpl.n	8005714 <_printf_i+0xec>
 8005710:	681e      	ldr	r6, [r3, #0]
 8005712:	e002      	b.n	800571a <_printf_i+0xf2>
 8005714:	0646      	lsls	r6, r0, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0xe8>
 8005718:	881e      	ldrh	r6, [r3, #0]
 800571a:	4854      	ldr	r0, [pc, #336]	; (800586c <_printf_i+0x244>)
 800571c:	2f6f      	cmp	r7, #111	; 0x6f
 800571e:	bf0c      	ite	eq
 8005720:	2308      	moveq	r3, #8
 8005722:	230a      	movne	r3, #10
 8005724:	2100      	movs	r1, #0
 8005726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800572a:	6865      	ldr	r5, [r4, #4]
 800572c:	60a5      	str	r5, [r4, #8]
 800572e:	2d00      	cmp	r5, #0
 8005730:	bfa2      	ittt	ge
 8005732:	6821      	ldrge	r1, [r4, #0]
 8005734:	f021 0104 	bicge.w	r1, r1, #4
 8005738:	6021      	strge	r1, [r4, #0]
 800573a:	b90e      	cbnz	r6, 8005740 <_printf_i+0x118>
 800573c:	2d00      	cmp	r5, #0
 800573e:	d04d      	beq.n	80057dc <_printf_i+0x1b4>
 8005740:	4615      	mov	r5, r2
 8005742:	fbb6 f1f3 	udiv	r1, r6, r3
 8005746:	fb03 6711 	mls	r7, r3, r1, r6
 800574a:	5dc7      	ldrb	r7, [r0, r7]
 800574c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005750:	4637      	mov	r7, r6
 8005752:	42bb      	cmp	r3, r7
 8005754:	460e      	mov	r6, r1
 8005756:	d9f4      	bls.n	8005742 <_printf_i+0x11a>
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10b      	bne.n	8005774 <_printf_i+0x14c>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07de      	lsls	r6, r3, #31
 8005760:	d508      	bpl.n	8005774 <_printf_i+0x14c>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	4299      	cmp	r1, r3
 8005768:	bfde      	ittt	le
 800576a:	2330      	movle	r3, #48	; 0x30
 800576c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005774:	1b52      	subs	r2, r2, r5
 8005776:	6122      	str	r2, [r4, #16]
 8005778:	f8cd a000 	str.w	sl, [sp]
 800577c:	464b      	mov	r3, r9
 800577e:	aa03      	add	r2, sp, #12
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fee2 	bl	800554c <_printf_common>
 8005788:	3001      	adds	r0, #1
 800578a:	d14c      	bne.n	8005826 <_printf_i+0x1fe>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	b004      	add	sp, #16
 8005792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005796:	4835      	ldr	r0, [pc, #212]	; (800586c <_printf_i+0x244>)
 8005798:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800579c:	6829      	ldr	r1, [r5, #0]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80057a4:	6029      	str	r1, [r5, #0]
 80057a6:	061d      	lsls	r5, r3, #24
 80057a8:	d514      	bpl.n	80057d4 <_printf_i+0x1ac>
 80057aa:	07df      	lsls	r7, r3, #31
 80057ac:	bf44      	itt	mi
 80057ae:	f043 0320 	orrmi.w	r3, r3, #32
 80057b2:	6023      	strmi	r3, [r4, #0]
 80057b4:	b91e      	cbnz	r6, 80057be <_printf_i+0x196>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f023 0320 	bic.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2310      	movs	r3, #16
 80057c0:	e7b0      	b.n	8005724 <_printf_i+0xfc>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	f043 0320 	orr.w	r3, r3, #32
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	2378      	movs	r3, #120	; 0x78
 80057cc:	4828      	ldr	r0, [pc, #160]	; (8005870 <_printf_i+0x248>)
 80057ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057d2:	e7e3      	b.n	800579c <_printf_i+0x174>
 80057d4:	0659      	lsls	r1, r3, #25
 80057d6:	bf48      	it	mi
 80057d8:	b2b6      	uxthmi	r6, r6
 80057da:	e7e6      	b.n	80057aa <_printf_i+0x182>
 80057dc:	4615      	mov	r5, r2
 80057de:	e7bb      	b.n	8005758 <_printf_i+0x130>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	6826      	ldr	r6, [r4, #0]
 80057e4:	6961      	ldr	r1, [r4, #20]
 80057e6:	1d18      	adds	r0, r3, #4
 80057e8:	6028      	str	r0, [r5, #0]
 80057ea:	0635      	lsls	r5, r6, #24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	d501      	bpl.n	80057f4 <_printf_i+0x1cc>
 80057f0:	6019      	str	r1, [r3, #0]
 80057f2:	e002      	b.n	80057fa <_printf_i+0x1d2>
 80057f4:	0670      	lsls	r0, r6, #25
 80057f6:	d5fb      	bpl.n	80057f0 <_printf_i+0x1c8>
 80057f8:	8019      	strh	r1, [r3, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	4615      	mov	r5, r2
 8005800:	e7ba      	b.n	8005778 <_printf_i+0x150>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	2100      	movs	r1, #0
 800580e:	4628      	mov	r0, r5
 8005810:	f7fa fcf6 	bl	8000200 <memchr>
 8005814:	b108      	cbz	r0, 800581a <_printf_i+0x1f2>
 8005816:	1b40      	subs	r0, r0, r5
 8005818:	6060      	str	r0, [r4, #4]
 800581a:	6863      	ldr	r3, [r4, #4]
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	2300      	movs	r3, #0
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005824:	e7a8      	b.n	8005778 <_printf_i+0x150>
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	462a      	mov	r2, r5
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d0ab      	beq.n	800578c <_printf_i+0x164>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	079b      	lsls	r3, r3, #30
 8005838:	d413      	bmi.n	8005862 <_printf_i+0x23a>
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	9b03      	ldr	r3, [sp, #12]
 800583e:	4298      	cmp	r0, r3
 8005840:	bfb8      	it	lt
 8005842:	4618      	movlt	r0, r3
 8005844:	e7a4      	b.n	8005790 <_printf_i+0x168>
 8005846:	2301      	movs	r3, #1
 8005848:	4632      	mov	r2, r6
 800584a:	4649      	mov	r1, r9
 800584c:	4640      	mov	r0, r8
 800584e:	47d0      	blx	sl
 8005850:	3001      	adds	r0, #1
 8005852:	d09b      	beq.n	800578c <_printf_i+0x164>
 8005854:	3501      	adds	r5, #1
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	9903      	ldr	r1, [sp, #12]
 800585a:	1a5b      	subs	r3, r3, r1
 800585c:	42ab      	cmp	r3, r5
 800585e:	dcf2      	bgt.n	8005846 <_printf_i+0x21e>
 8005860:	e7eb      	b.n	800583a <_printf_i+0x212>
 8005862:	2500      	movs	r5, #0
 8005864:	f104 0619 	add.w	r6, r4, #25
 8005868:	e7f5      	b.n	8005856 <_printf_i+0x22e>
 800586a:	bf00      	nop
 800586c:	08006461 	.word	0x08006461
 8005870:	08006472 	.word	0x08006472

08005874 <_scanf_chars>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	4615      	mov	r5, r2
 800587a:	688a      	ldr	r2, [r1, #8]
 800587c:	4680      	mov	r8, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b932      	cbnz	r2, 8005890 <_scanf_chars+0x1c>
 8005882:	698a      	ldr	r2, [r1, #24]
 8005884:	2a00      	cmp	r2, #0
 8005886:	bf0c      	ite	eq
 8005888:	2201      	moveq	r2, #1
 800588a:	f04f 32ff 	movne.w	r2, #4294967295
 800588e:	608a      	str	r2, [r1, #8]
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005924 <_scanf_chars+0xb0>
 8005896:	06d1      	lsls	r1, r2, #27
 8005898:	bf5f      	itttt	pl
 800589a:	681a      	ldrpl	r2, [r3, #0]
 800589c:	1d11      	addpl	r1, r2, #4
 800589e:	6019      	strpl	r1, [r3, #0]
 80058a0:	6816      	ldrpl	r6, [r2, #0]
 80058a2:	2700      	movs	r7, #0
 80058a4:	69a0      	ldr	r0, [r4, #24]
 80058a6:	b188      	cbz	r0, 80058cc <_scanf_chars+0x58>
 80058a8:	2801      	cmp	r0, #1
 80058aa:	d107      	bne.n	80058bc <_scanf_chars+0x48>
 80058ac:	682a      	ldr	r2, [r5, #0]
 80058ae:	7811      	ldrb	r1, [r2, #0]
 80058b0:	6962      	ldr	r2, [r4, #20]
 80058b2:	5c52      	ldrb	r2, [r2, r1]
 80058b4:	b952      	cbnz	r2, 80058cc <_scanf_chars+0x58>
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d031      	beq.n	800591e <_scanf_chars+0xaa>
 80058ba:	e022      	b.n	8005902 <_scanf_chars+0x8e>
 80058bc:	2802      	cmp	r0, #2
 80058be:	d120      	bne.n	8005902 <_scanf_chars+0x8e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80058c8:	071b      	lsls	r3, r3, #28
 80058ca:	d41a      	bmi.n	8005902 <_scanf_chars+0x8e>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	06da      	lsls	r2, r3, #27
 80058d0:	bf5e      	ittt	pl
 80058d2:	682b      	ldrpl	r3, [r5, #0]
 80058d4:	781b      	ldrbpl	r3, [r3, #0]
 80058d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80058da:	682a      	ldr	r2, [r5, #0]
 80058dc:	686b      	ldr	r3, [r5, #4]
 80058de:	3201      	adds	r2, #1
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	68a2      	ldr	r2, [r4, #8]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	3a01      	subs	r2, #1
 80058e8:	606b      	str	r3, [r5, #4]
 80058ea:	3701      	adds	r7, #1
 80058ec:	60a2      	str	r2, [r4, #8]
 80058ee:	b142      	cbz	r2, 8005902 <_scanf_chars+0x8e>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dcd7      	bgt.n	80058a4 <_scanf_chars+0x30>
 80058f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058f8:	4629      	mov	r1, r5
 80058fa:	4640      	mov	r0, r8
 80058fc:	4798      	blx	r3
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0d0      	beq.n	80058a4 <_scanf_chars+0x30>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f013 0310 	ands.w	r3, r3, #16
 8005908:	d105      	bne.n	8005916 <_scanf_chars+0xa2>
 800590a:	68e2      	ldr	r2, [r4, #12]
 800590c:	3201      	adds	r2, #1
 800590e:	60e2      	str	r2, [r4, #12]
 8005910:	69a2      	ldr	r2, [r4, #24]
 8005912:	b102      	cbz	r2, 8005916 <_scanf_chars+0xa2>
 8005914:	7033      	strb	r3, [r6, #0]
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	443b      	add	r3, r7
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	2000      	movs	r0, #0
 800591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005922:	bf00      	nop
 8005924:	0800649f 	.word	0x0800649f

08005928 <_scanf_i>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	4698      	mov	r8, r3
 800592e:	4b76      	ldr	r3, [pc, #472]	; (8005b08 <_scanf_i+0x1e0>)
 8005930:	460c      	mov	r4, r1
 8005932:	4682      	mov	sl, r0
 8005934:	4616      	mov	r6, r2
 8005936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800593a:	b087      	sub	sp, #28
 800593c:	ab03      	add	r3, sp, #12
 800593e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005942:	4b72      	ldr	r3, [pc, #456]	; (8005b0c <_scanf_i+0x1e4>)
 8005944:	69a1      	ldr	r1, [r4, #24]
 8005946:	4a72      	ldr	r2, [pc, #456]	; (8005b10 <_scanf_i+0x1e8>)
 8005948:	2903      	cmp	r1, #3
 800594a:	bf18      	it	ne
 800594c:	461a      	movne	r2, r3
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	9201      	str	r2, [sp, #4]
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005958:	bf88      	it	hi
 800595a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800595e:	4627      	mov	r7, r4
 8005960:	bf82      	ittt	hi
 8005962:	eb03 0905 	addhi.w	r9, r3, r5
 8005966:	f240 135d 	movwhi	r3, #349	; 0x15d
 800596a:	60a3      	strhi	r3, [r4, #8]
 800596c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005970:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005974:	bf98      	it	ls
 8005976:	f04f 0900 	movls.w	r9, #0
 800597a:	6023      	str	r3, [r4, #0]
 800597c:	463d      	mov	r5, r7
 800597e:	f04f 0b00 	mov.w	fp, #0
 8005982:	6831      	ldr	r1, [r6, #0]
 8005984:	ab03      	add	r3, sp, #12
 8005986:	7809      	ldrb	r1, [r1, #0]
 8005988:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800598c:	2202      	movs	r2, #2
 800598e:	f7fa fc37 	bl	8000200 <memchr>
 8005992:	b328      	cbz	r0, 80059e0 <_scanf_i+0xb8>
 8005994:	f1bb 0f01 	cmp.w	fp, #1
 8005998:	d159      	bne.n	8005a4e <_scanf_i+0x126>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	b92a      	cbnz	r2, 80059aa <_scanf_i+0x82>
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	2308      	movs	r3, #8
 80059a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	68a2      	ldr	r2, [r4, #8]
 80059b4:	1e51      	subs	r1, r2, #1
 80059b6:	60a1      	str	r1, [r4, #8]
 80059b8:	b192      	cbz	r2, 80059e0 <_scanf_i+0xb8>
 80059ba:	6832      	ldr	r2, [r6, #0]
 80059bc:	1c51      	adds	r1, r2, #1
 80059be:	6031      	str	r1, [r6, #0]
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	f805 2b01 	strb.w	r2, [r5], #1
 80059c6:	6872      	ldr	r2, [r6, #4]
 80059c8:	3a01      	subs	r2, #1
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	6072      	str	r2, [r6, #4]
 80059ce:	dc07      	bgt.n	80059e0 <_scanf_i+0xb8>
 80059d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80059d4:	4631      	mov	r1, r6
 80059d6:	4650      	mov	r0, sl
 80059d8:	4790      	blx	r2
 80059da:	2800      	cmp	r0, #0
 80059dc:	f040 8085 	bne.w	8005aea <_scanf_i+0x1c2>
 80059e0:	f10b 0b01 	add.w	fp, fp, #1
 80059e4:	f1bb 0f03 	cmp.w	fp, #3
 80059e8:	d1cb      	bne.n	8005982 <_scanf_i+0x5a>
 80059ea:	6863      	ldr	r3, [r4, #4]
 80059ec:	b90b      	cbnz	r3, 80059f2 <_scanf_i+0xca>
 80059ee:	230a      	movs	r3, #10
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	4947      	ldr	r1, [pc, #284]	; (8005b14 <_scanf_i+0x1ec>)
 80059f6:	6960      	ldr	r0, [r4, #20]
 80059f8:	1ac9      	subs	r1, r1, r3
 80059fa:	f000 f88d 	bl	8005b18 <__sccl>
 80059fe:	f04f 0b00 	mov.w	fp, #0
 8005a02:	68a3      	ldr	r3, [r4, #8]
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03d      	beq.n	8005a86 <_scanf_i+0x15e>
 8005a0a:	6831      	ldr	r1, [r6, #0]
 8005a0c:	6960      	ldr	r0, [r4, #20]
 8005a0e:	f891 c000 	ldrb.w	ip, [r1]
 8005a12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d035      	beq.n	8005a86 <_scanf_i+0x15e>
 8005a1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005a1e:	d124      	bne.n	8005a6a <_scanf_i+0x142>
 8005a20:	0510      	lsls	r0, r2, #20
 8005a22:	d522      	bpl.n	8005a6a <_scanf_i+0x142>
 8005a24:	f10b 0b01 	add.w	fp, fp, #1
 8005a28:	f1b9 0f00 	cmp.w	r9, #0
 8005a2c:	d003      	beq.n	8005a36 <_scanf_i+0x10e>
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a34:	60a3      	str	r3, [r4, #8]
 8005a36:	6873      	ldr	r3, [r6, #4]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	6073      	str	r3, [r6, #4]
 8005a3e:	dd1b      	ble.n	8005a78 <_scanf_i+0x150>
 8005a40:	6833      	ldr	r3, [r6, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	68a3      	ldr	r3, [r4, #8]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	60a3      	str	r3, [r4, #8]
 8005a4c:	e7d9      	b.n	8005a02 <_scanf_i+0xda>
 8005a4e:	f1bb 0f02 	cmp.w	fp, #2
 8005a52:	d1ae      	bne.n	80059b2 <_scanf_i+0x8a>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005a5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005a5e:	d1bf      	bne.n	80059e0 <_scanf_i+0xb8>
 8005a60:	2310      	movs	r3, #16
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a68:	e7a2      	b.n	80059b0 <_scanf_i+0x88>
 8005a6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	780b      	ldrb	r3, [r1, #0]
 8005a72:	f805 3b01 	strb.w	r3, [r5], #1
 8005a76:	e7de      	b.n	8005a36 <_scanf_i+0x10e>
 8005a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4798      	blx	r3
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d0df      	beq.n	8005a46 <_scanf_i+0x11e>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	05db      	lsls	r3, r3, #23
 8005a8a:	d50d      	bpl.n	8005aa8 <_scanf_i+0x180>
 8005a8c:	42bd      	cmp	r5, r7
 8005a8e:	d909      	bls.n	8005aa4 <_scanf_i+0x17c>
 8005a90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a98:	4632      	mov	r2, r6
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	4798      	blx	r3
 8005a9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005aa2:	464d      	mov	r5, r9
 8005aa4:	42bd      	cmp	r5, r7
 8005aa6:	d02d      	beq.n	8005b04 <_scanf_i+0x1dc>
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	f012 0210 	ands.w	r2, r2, #16
 8005aae:	d113      	bne.n	8005ad8 <_scanf_i+0x1b0>
 8005ab0:	702a      	strb	r2, [r5, #0]
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	9e01      	ldr	r6, [sp, #4]
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4650      	mov	r0, sl
 8005aba:	47b0      	blx	r6
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac2:	f011 0f20 	tst.w	r1, #32
 8005ac6:	d013      	beq.n	8005af0 <_scanf_i+0x1c8>
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	f8c8 2000 	str.w	r2, [r8]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6018      	str	r0, [r3, #0]
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60e3      	str	r3, [r4, #12]
 8005ad8:	1bed      	subs	r5, r5, r7
 8005ada:	44ab      	add	fp, r5
 8005adc:	6925      	ldr	r5, [r4, #16]
 8005ade:	445d      	add	r5, fp
 8005ae0:	6125      	str	r5, [r4, #16]
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	b007      	add	sp, #28
 8005ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aea:	f04f 0b00 	mov.w	fp, #0
 8005aee:	e7ca      	b.n	8005a86 <_scanf_i+0x15e>
 8005af0:	1d1a      	adds	r2, r3, #4
 8005af2:	f8c8 2000 	str.w	r2, [r8]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f011 0f01 	tst.w	r1, #1
 8005afc:	bf14      	ite	ne
 8005afe:	8018      	strhne	r0, [r3, #0]
 8005b00:	6018      	streq	r0, [r3, #0]
 8005b02:	e7e6      	b.n	8005ad2 <_scanf_i+0x1aa>
 8005b04:	2001      	movs	r0, #1
 8005b06:	e7ed      	b.n	8005ae4 <_scanf_i+0x1bc>
 8005b08:	080061cc 	.word	0x080061cc
 8005b0c:	08005d75 	.word	0x08005d75
 8005b10:	08005c8d 	.word	0x08005c8d
 8005b14:	0800649c 	.word	0x0800649c

08005b18 <__sccl>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	780b      	ldrb	r3, [r1, #0]
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	2b5e      	cmp	r3, #94	; 0x5e
 8005b20:	bf0b      	itete	eq
 8005b22:	784b      	ldrbeq	r3, [r1, #1]
 8005b24:	1c48      	addne	r0, r1, #1
 8005b26:	1c88      	addeq	r0, r1, #2
 8005b28:	2200      	movne	r2, #0
 8005b2a:	bf08      	it	eq
 8005b2c:	2201      	moveq	r2, #1
 8005b2e:	1e61      	subs	r1, r4, #1
 8005b30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005b34:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005b38:	42a9      	cmp	r1, r5
 8005b3a:	d1fb      	bne.n	8005b34 <__sccl+0x1c>
 8005b3c:	b90b      	cbnz	r3, 8005b42 <__sccl+0x2a>
 8005b3e:	3801      	subs	r0, #1
 8005b40:	bd70      	pop	{r4, r5, r6, pc}
 8005b42:	f082 0201 	eor.w	r2, r2, #1
 8005b46:	54e2      	strb	r2, [r4, r3]
 8005b48:	4605      	mov	r5, r0
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005b50:	292d      	cmp	r1, #45	; 0x2d
 8005b52:	d006      	beq.n	8005b62 <__sccl+0x4a>
 8005b54:	295d      	cmp	r1, #93	; 0x5d
 8005b56:	d0f3      	beq.n	8005b40 <__sccl+0x28>
 8005b58:	b909      	cbnz	r1, 8005b5e <__sccl+0x46>
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	e7f0      	b.n	8005b40 <__sccl+0x28>
 8005b5e:	460b      	mov	r3, r1
 8005b60:	e7f1      	b.n	8005b46 <__sccl+0x2e>
 8005b62:	786e      	ldrb	r6, [r5, #1]
 8005b64:	2e5d      	cmp	r6, #93	; 0x5d
 8005b66:	d0fa      	beq.n	8005b5e <__sccl+0x46>
 8005b68:	42b3      	cmp	r3, r6
 8005b6a:	dcf8      	bgt.n	8005b5e <__sccl+0x46>
 8005b6c:	3502      	adds	r5, #2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	3101      	adds	r1, #1
 8005b72:	428e      	cmp	r6, r1
 8005b74:	5462      	strb	r2, [r4, r1]
 8005b76:	dcfb      	bgt.n	8005b70 <__sccl+0x58>
 8005b78:	1af1      	subs	r1, r6, r3
 8005b7a:	3901      	subs	r1, #1
 8005b7c:	1c58      	adds	r0, r3, #1
 8005b7e:	42b3      	cmp	r3, r6
 8005b80:	bfa8      	it	ge
 8005b82:	2100      	movge	r1, #0
 8005b84:	1843      	adds	r3, r0, r1
 8005b86:	e7e0      	b.n	8005b4a <__sccl+0x32>

08005b88 <_strtol_l.constprop.0>:
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8e:	d001      	beq.n	8005b94 <_strtol_l.constprop.0+0xc>
 8005b90:	2b24      	cmp	r3, #36	; 0x24
 8005b92:	d906      	bls.n	8005ba2 <_strtol_l.constprop.0+0x1a>
 8005b94:	f7ff f920 	bl	8004dd8 <__errno>
 8005b98:	2316      	movs	r3, #22
 8005b9a:	6003      	str	r3, [r0, #0]
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005c88 <_strtol_l.constprop.0+0x100>
 8005ba6:	460d      	mov	r5, r1
 8005ba8:	462e      	mov	r6, r5
 8005baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005bb2:	f017 0708 	ands.w	r7, r7, #8
 8005bb6:	d1f7      	bne.n	8005ba8 <_strtol_l.constprop.0+0x20>
 8005bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8005bba:	d132      	bne.n	8005c22 <_strtol_l.constprop.0+0x9a>
 8005bbc:	782c      	ldrb	r4, [r5, #0]
 8005bbe:	2701      	movs	r7, #1
 8005bc0:	1cb5      	adds	r5, r6, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d05b      	beq.n	8005c7e <_strtol_l.constprop.0+0xf6>
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d109      	bne.n	8005bde <_strtol_l.constprop.0+0x56>
 8005bca:	2c30      	cmp	r4, #48	; 0x30
 8005bcc:	d107      	bne.n	8005bde <_strtol_l.constprop.0+0x56>
 8005bce:	782c      	ldrb	r4, [r5, #0]
 8005bd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005bd4:	2c58      	cmp	r4, #88	; 0x58
 8005bd6:	d14d      	bne.n	8005c74 <_strtol_l.constprop.0+0xec>
 8005bd8:	786c      	ldrb	r4, [r5, #1]
 8005bda:	2310      	movs	r3, #16
 8005bdc:	3502      	adds	r5, #2
 8005bde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005be2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005be6:	f04f 0c00 	mov.w	ip, #0
 8005bea:	fbb8 f9f3 	udiv	r9, r8, r3
 8005bee:	4666      	mov	r6, ip
 8005bf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005bf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005bf8:	f1be 0f09 	cmp.w	lr, #9
 8005bfc:	d816      	bhi.n	8005c2c <_strtol_l.constprop.0+0xa4>
 8005bfe:	4674      	mov	r4, lr
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	dd24      	ble.n	8005c4e <_strtol_l.constprop.0+0xc6>
 8005c04:	f1bc 0f00 	cmp.w	ip, #0
 8005c08:	db1e      	blt.n	8005c48 <_strtol_l.constprop.0+0xc0>
 8005c0a:	45b1      	cmp	r9, r6
 8005c0c:	d31c      	bcc.n	8005c48 <_strtol_l.constprop.0+0xc0>
 8005c0e:	d101      	bne.n	8005c14 <_strtol_l.constprop.0+0x8c>
 8005c10:	45a2      	cmp	sl, r4
 8005c12:	db19      	blt.n	8005c48 <_strtol_l.constprop.0+0xc0>
 8005c14:	fb06 4603 	mla	r6, r6, r3, r4
 8005c18:	f04f 0c01 	mov.w	ip, #1
 8005c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c20:	e7e8      	b.n	8005bf4 <_strtol_l.constprop.0+0x6c>
 8005c22:	2c2b      	cmp	r4, #43	; 0x2b
 8005c24:	bf04      	itt	eq
 8005c26:	782c      	ldrbeq	r4, [r5, #0]
 8005c28:	1cb5      	addeq	r5, r6, #2
 8005c2a:	e7ca      	b.n	8005bc2 <_strtol_l.constprop.0+0x3a>
 8005c2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005c30:	f1be 0f19 	cmp.w	lr, #25
 8005c34:	d801      	bhi.n	8005c3a <_strtol_l.constprop.0+0xb2>
 8005c36:	3c37      	subs	r4, #55	; 0x37
 8005c38:	e7e2      	b.n	8005c00 <_strtol_l.constprop.0+0x78>
 8005c3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005c3e:	f1be 0f19 	cmp.w	lr, #25
 8005c42:	d804      	bhi.n	8005c4e <_strtol_l.constprop.0+0xc6>
 8005c44:	3c57      	subs	r4, #87	; 0x57
 8005c46:	e7db      	b.n	8005c00 <_strtol_l.constprop.0+0x78>
 8005c48:	f04f 3cff 	mov.w	ip, #4294967295
 8005c4c:	e7e6      	b.n	8005c1c <_strtol_l.constprop.0+0x94>
 8005c4e:	f1bc 0f00 	cmp.w	ip, #0
 8005c52:	da05      	bge.n	8005c60 <_strtol_l.constprop.0+0xd8>
 8005c54:	2322      	movs	r3, #34	; 0x22
 8005c56:	6003      	str	r3, [r0, #0]
 8005c58:	4646      	mov	r6, r8
 8005c5a:	b942      	cbnz	r2, 8005c6e <_strtol_l.constprop.0+0xe6>
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	e79e      	b.n	8005b9e <_strtol_l.constprop.0+0x16>
 8005c60:	b107      	cbz	r7, 8005c64 <_strtol_l.constprop.0+0xdc>
 8005c62:	4276      	negs	r6, r6
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d0f9      	beq.n	8005c5c <_strtol_l.constprop.0+0xd4>
 8005c68:	f1bc 0f00 	cmp.w	ip, #0
 8005c6c:	d000      	beq.n	8005c70 <_strtol_l.constprop.0+0xe8>
 8005c6e:	1e69      	subs	r1, r5, #1
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	e7f3      	b.n	8005c5c <_strtol_l.constprop.0+0xd4>
 8005c74:	2430      	movs	r4, #48	; 0x30
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1b1      	bne.n	8005bde <_strtol_l.constprop.0+0x56>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	e7af      	b.n	8005bde <_strtol_l.constprop.0+0x56>
 8005c7e:	2c30      	cmp	r4, #48	; 0x30
 8005c80:	d0a5      	beq.n	8005bce <_strtol_l.constprop.0+0x46>
 8005c82:	230a      	movs	r3, #10
 8005c84:	e7ab      	b.n	8005bde <_strtol_l.constprop.0+0x56>
 8005c86:	bf00      	nop
 8005c88:	0800649f 	.word	0x0800649f

08005c8c <_strtol_r>:
 8005c8c:	f7ff bf7c 	b.w	8005b88 <_strtol_l.constprop.0>

08005c90 <_strtoul_l.constprop.0>:
 8005c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c94:	4f36      	ldr	r7, [pc, #216]	; (8005d70 <_strtoul_l.constprop.0+0xe0>)
 8005c96:	4686      	mov	lr, r0
 8005c98:	460d      	mov	r5, r1
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ca0:	5de6      	ldrb	r6, [r4, r7]
 8005ca2:	f016 0608 	ands.w	r6, r6, #8
 8005ca6:	d1f8      	bne.n	8005c9a <_strtoul_l.constprop.0+0xa>
 8005ca8:	2c2d      	cmp	r4, #45	; 0x2d
 8005caa:	d12f      	bne.n	8005d0c <_strtoul_l.constprop.0+0x7c>
 8005cac:	782c      	ldrb	r4, [r5, #0]
 8005cae:	2601      	movs	r6, #1
 8005cb0:	1c85      	adds	r5, r0, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d057      	beq.n	8005d66 <_strtoul_l.constprop.0+0xd6>
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d109      	bne.n	8005cce <_strtoul_l.constprop.0+0x3e>
 8005cba:	2c30      	cmp	r4, #48	; 0x30
 8005cbc:	d107      	bne.n	8005cce <_strtoul_l.constprop.0+0x3e>
 8005cbe:	7828      	ldrb	r0, [r5, #0]
 8005cc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005cc4:	2858      	cmp	r0, #88	; 0x58
 8005cc6:	d149      	bne.n	8005d5c <_strtoul_l.constprop.0+0xcc>
 8005cc8:	786c      	ldrb	r4, [r5, #1]
 8005cca:	2310      	movs	r3, #16
 8005ccc:	3502      	adds	r5, #2
 8005cce:	f04f 38ff 	mov.w	r8, #4294967295
 8005cd2:	2700      	movs	r7, #0
 8005cd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8005cd8:	fb03 f908 	mul.w	r9, r3, r8
 8005cdc:	ea6f 0909 	mvn.w	r9, r9
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ce6:	f1bc 0f09 	cmp.w	ip, #9
 8005cea:	d814      	bhi.n	8005d16 <_strtoul_l.constprop.0+0x86>
 8005cec:	4664      	mov	r4, ip
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	dd22      	ble.n	8005d38 <_strtoul_l.constprop.0+0xa8>
 8005cf2:	2f00      	cmp	r7, #0
 8005cf4:	db1d      	blt.n	8005d32 <_strtoul_l.constprop.0+0xa2>
 8005cf6:	4580      	cmp	r8, r0
 8005cf8:	d31b      	bcc.n	8005d32 <_strtoul_l.constprop.0+0xa2>
 8005cfa:	d101      	bne.n	8005d00 <_strtoul_l.constprop.0+0x70>
 8005cfc:	45a1      	cmp	r9, r4
 8005cfe:	db18      	blt.n	8005d32 <_strtoul_l.constprop.0+0xa2>
 8005d00:	fb00 4003 	mla	r0, r0, r3, r4
 8005d04:	2701      	movs	r7, #1
 8005d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d0a:	e7ea      	b.n	8005ce2 <_strtoul_l.constprop.0+0x52>
 8005d0c:	2c2b      	cmp	r4, #43	; 0x2b
 8005d0e:	bf04      	itt	eq
 8005d10:	782c      	ldrbeq	r4, [r5, #0]
 8005d12:	1c85      	addeq	r5, r0, #2
 8005d14:	e7cd      	b.n	8005cb2 <_strtoul_l.constprop.0+0x22>
 8005d16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005d1a:	f1bc 0f19 	cmp.w	ip, #25
 8005d1e:	d801      	bhi.n	8005d24 <_strtoul_l.constprop.0+0x94>
 8005d20:	3c37      	subs	r4, #55	; 0x37
 8005d22:	e7e4      	b.n	8005cee <_strtoul_l.constprop.0+0x5e>
 8005d24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005d28:	f1bc 0f19 	cmp.w	ip, #25
 8005d2c:	d804      	bhi.n	8005d38 <_strtoul_l.constprop.0+0xa8>
 8005d2e:	3c57      	subs	r4, #87	; 0x57
 8005d30:	e7dd      	b.n	8005cee <_strtoul_l.constprop.0+0x5e>
 8005d32:	f04f 37ff 	mov.w	r7, #4294967295
 8005d36:	e7e6      	b.n	8005d06 <_strtoul_l.constprop.0+0x76>
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	da07      	bge.n	8005d4c <_strtoul_l.constprop.0+0xbc>
 8005d3c:	2322      	movs	r3, #34	; 0x22
 8005d3e:	f8ce 3000 	str.w	r3, [lr]
 8005d42:	f04f 30ff 	mov.w	r0, #4294967295
 8005d46:	b932      	cbnz	r2, 8005d56 <_strtoul_l.constprop.0+0xc6>
 8005d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d4c:	b106      	cbz	r6, 8005d50 <_strtoul_l.constprop.0+0xc0>
 8005d4e:	4240      	negs	r0, r0
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d0f9      	beq.n	8005d48 <_strtoul_l.constprop.0+0xb8>
 8005d54:	b107      	cbz	r7, 8005d58 <_strtoul_l.constprop.0+0xc8>
 8005d56:	1e69      	subs	r1, r5, #1
 8005d58:	6011      	str	r1, [r2, #0]
 8005d5a:	e7f5      	b.n	8005d48 <_strtoul_l.constprop.0+0xb8>
 8005d5c:	2430      	movs	r4, #48	; 0x30
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1b5      	bne.n	8005cce <_strtoul_l.constprop.0+0x3e>
 8005d62:	2308      	movs	r3, #8
 8005d64:	e7b3      	b.n	8005cce <_strtoul_l.constprop.0+0x3e>
 8005d66:	2c30      	cmp	r4, #48	; 0x30
 8005d68:	d0a9      	beq.n	8005cbe <_strtoul_l.constprop.0+0x2e>
 8005d6a:	230a      	movs	r3, #10
 8005d6c:	e7af      	b.n	8005cce <_strtoul_l.constprop.0+0x3e>
 8005d6e:	bf00      	nop
 8005d70:	0800649f 	.word	0x0800649f

08005d74 <_strtoul_r>:
 8005d74:	f7ff bf8c 	b.w	8005c90 <_strtoul_l.constprop.0>

08005d78 <__submore>:
 8005d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d11d      	bne.n	8005dc4 <__submore+0x4c>
 8005d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d8c:	f000 f8c4 	bl	8005f18 <_malloc_r>
 8005d90:	b918      	cbnz	r0, 8005d9a <__submore+0x22>
 8005d92:	f04f 30ff 	mov.w	r0, #4294967295
 8005d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005da0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005da4:	6360      	str	r0, [r4, #52]	; 0x34
 8005da6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005daa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005dae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005db2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005db6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005dba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e7e8      	b.n	8005d96 <__submore+0x1e>
 8005dc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005dc6:	0077      	lsls	r7, r6, #1
 8005dc8:	463a      	mov	r2, r7
 8005dca:	f000 f919 	bl	8006000 <_realloc_r>
 8005dce:	4605      	mov	r5, r0
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0de      	beq.n	8005d92 <__submore+0x1a>
 8005dd4:	eb00 0806 	add.w	r8, r0, r6
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4632      	mov	r2, r6
 8005ddc:	4640      	mov	r0, r8
 8005dde:	f000 f807 	bl	8005df0 <memcpy>
 8005de2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005de6:	f8c4 8000 	str.w	r8, [r4]
 8005dea:	e7e9      	b.n	8005dc0 <__submore+0x48>

08005dec <__retarget_lock_acquire_recursive>:
 8005dec:	4770      	bx	lr

08005dee <__retarget_lock_release_recursive>:
 8005dee:	4770      	bx	lr

08005df0 <memcpy>:
 8005df0:	440a      	add	r2, r1
 8005df2:	4291      	cmp	r1, r2
 8005df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df8:	d100      	bne.n	8005dfc <memcpy+0xc>
 8005dfa:	4770      	bx	lr
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e06:	4291      	cmp	r1, r2
 8005e08:	d1f9      	bne.n	8005dfe <memcpy+0xe>
 8005e0a:	bd10      	pop	{r4, pc}

08005e0c <memmove>:
 8005e0c:	4288      	cmp	r0, r1
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	eb01 0402 	add.w	r4, r1, r2
 8005e14:	d902      	bls.n	8005e1c <memmove+0x10>
 8005e16:	4284      	cmp	r4, r0
 8005e18:	4623      	mov	r3, r4
 8005e1a:	d807      	bhi.n	8005e2c <memmove+0x20>
 8005e1c:	1e43      	subs	r3, r0, #1
 8005e1e:	42a1      	cmp	r1, r4
 8005e20:	d008      	beq.n	8005e34 <memmove+0x28>
 8005e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2a:	e7f8      	b.n	8005e1e <memmove+0x12>
 8005e2c:	4402      	add	r2, r0
 8005e2e:	4601      	mov	r1, r0
 8005e30:	428a      	cmp	r2, r1
 8005e32:	d100      	bne.n	8005e36 <memmove+0x2a>
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e3e:	e7f7      	b.n	8005e30 <memmove+0x24>

08005e40 <_free_r>:
 8005e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e42:	2900      	cmp	r1, #0
 8005e44:	d044      	beq.n	8005ed0 <_free_r+0x90>
 8005e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4a:	9001      	str	r0, [sp, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e52:	bfb8      	it	lt
 8005e54:	18e4      	addlt	r4, r4, r3
 8005e56:	f000 f913 	bl	8006080 <__malloc_lock>
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <_free_r+0x94>)
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	b933      	cbnz	r3, 8005e70 <_free_r+0x30>
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	6014      	str	r4, [r2, #0]
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6c:	f000 b90e 	b.w	800608c <__malloc_unlock>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d908      	bls.n	8005e86 <_free_r+0x46>
 8005e74:	6825      	ldr	r5, [r4, #0]
 8005e76:	1961      	adds	r1, r4, r5
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf01      	itttt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	1949      	addeq	r1, r1, r5
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	e7ed      	b.n	8005e62 <_free_r+0x22>
 8005e86:	461a      	mov	r2, r3
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b10b      	cbz	r3, 8005e90 <_free_r+0x50>
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	d9fa      	bls.n	8005e86 <_free_r+0x46>
 8005e90:	6811      	ldr	r1, [r2, #0]
 8005e92:	1855      	adds	r5, r2, r1
 8005e94:	42a5      	cmp	r5, r4
 8005e96:	d10b      	bne.n	8005eb0 <_free_r+0x70>
 8005e98:	6824      	ldr	r4, [r4, #0]
 8005e9a:	4421      	add	r1, r4
 8005e9c:	1854      	adds	r4, r2, r1
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	d1e0      	bne.n	8005e66 <_free_r+0x26>
 8005ea4:	681c      	ldr	r4, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	6053      	str	r3, [r2, #4]
 8005eaa:	4421      	add	r1, r4
 8005eac:	6011      	str	r1, [r2, #0]
 8005eae:	e7da      	b.n	8005e66 <_free_r+0x26>
 8005eb0:	d902      	bls.n	8005eb8 <_free_r+0x78>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	6003      	str	r3, [r0, #0]
 8005eb6:	e7d6      	b.n	8005e66 <_free_r+0x26>
 8005eb8:	6825      	ldr	r5, [r4, #0]
 8005eba:	1961      	adds	r1, r4, r5
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	bf04      	itt	eq
 8005ec0:	6819      	ldreq	r1, [r3, #0]
 8005ec2:	685b      	ldreq	r3, [r3, #4]
 8005ec4:	6063      	str	r3, [r4, #4]
 8005ec6:	bf04      	itt	eq
 8005ec8:	1949      	addeq	r1, r1, r5
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	6054      	str	r4, [r2, #4]
 8005ece:	e7ca      	b.n	8005e66 <_free_r+0x26>
 8005ed0:	b003      	add	sp, #12
 8005ed2:	bd30      	pop	{r4, r5, pc}
 8005ed4:	2000045c 	.word	0x2000045c

08005ed8 <sbrk_aligned>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4e0e      	ldr	r6, [pc, #56]	; (8005f14 <sbrk_aligned+0x3c>)
 8005edc:	460c      	mov	r4, r1
 8005ede:	6831      	ldr	r1, [r6, #0]
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	b911      	cbnz	r1, 8005eea <sbrk_aligned+0x12>
 8005ee4:	f000 f8bc 	bl	8006060 <_sbrk_r>
 8005ee8:	6030      	str	r0, [r6, #0]
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 f8b7 	bl	8006060 <_sbrk_r>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d00a      	beq.n	8005f0c <sbrk_aligned+0x34>
 8005ef6:	1cc4      	adds	r4, r0, #3
 8005ef8:	f024 0403 	bic.w	r4, r4, #3
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d007      	beq.n	8005f10 <sbrk_aligned+0x38>
 8005f00:	1a21      	subs	r1, r4, r0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f8ac 	bl	8006060 <_sbrk_r>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d101      	bne.n	8005f10 <sbrk_aligned+0x38>
 8005f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	20000460 	.word	0x20000460

08005f18 <_malloc_r>:
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	1ccd      	adds	r5, r1, #3
 8005f1e:	f025 0503 	bic.w	r5, r5, #3
 8005f22:	3508      	adds	r5, #8
 8005f24:	2d0c      	cmp	r5, #12
 8005f26:	bf38      	it	cc
 8005f28:	250c      	movcc	r5, #12
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	db01      	blt.n	8005f34 <_malloc_r+0x1c>
 8005f30:	42a9      	cmp	r1, r5
 8005f32:	d905      	bls.n	8005f40 <_malloc_r+0x28>
 8005f34:	230c      	movs	r3, #12
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	2600      	movs	r6, #0
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	4e2e      	ldr	r6, [pc, #184]	; (8005ffc <_malloc_r+0xe4>)
 8005f42:	f000 f89d 	bl	8006080 <__malloc_lock>
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	461c      	mov	r4, r3
 8005f4a:	bb34      	cbnz	r4, 8005f9a <_malloc_r+0x82>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4638      	mov	r0, r7
 8005f50:	f7ff ffc2 	bl	8005ed8 <sbrk_aligned>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	4604      	mov	r4, r0
 8005f58:	d14d      	bne.n	8005ff6 <_malloc_r+0xde>
 8005f5a:	6834      	ldr	r4, [r6, #0]
 8005f5c:	4626      	mov	r6, r4
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	d140      	bne.n	8005fe4 <_malloc_r+0xcc>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	4631      	mov	r1, r6
 8005f66:	4638      	mov	r0, r7
 8005f68:	eb04 0803 	add.w	r8, r4, r3
 8005f6c:	f000 f878 	bl	8006060 <_sbrk_r>
 8005f70:	4580      	cmp	r8, r0
 8005f72:	d13a      	bne.n	8005fea <_malloc_r+0xd2>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	3503      	adds	r5, #3
 8005f78:	1a6d      	subs	r5, r5, r1
 8005f7a:	f025 0503 	bic.w	r5, r5, #3
 8005f7e:	3508      	adds	r5, #8
 8005f80:	2d0c      	cmp	r5, #12
 8005f82:	bf38      	it	cc
 8005f84:	250c      	movcc	r5, #12
 8005f86:	4629      	mov	r1, r5
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f7ff ffa5 	bl	8005ed8 <sbrk_aligned>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d02b      	beq.n	8005fea <_malloc_r+0xd2>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	442b      	add	r3, r5
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	e00e      	b.n	8005fb8 <_malloc_r+0xa0>
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	1b52      	subs	r2, r2, r5
 8005f9e:	d41e      	bmi.n	8005fde <_malloc_r+0xc6>
 8005fa0:	2a0b      	cmp	r2, #11
 8005fa2:	d916      	bls.n	8005fd2 <_malloc_r+0xba>
 8005fa4:	1961      	adds	r1, r4, r5
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	6025      	str	r5, [r4, #0]
 8005faa:	bf18      	it	ne
 8005fac:	6059      	strne	r1, [r3, #4]
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	bf08      	it	eq
 8005fb2:	6031      	streq	r1, [r6, #0]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f104 060b 	add.w	r6, r4, #11
 8005fbe:	f000 f865 	bl	800608c <__malloc_unlock>
 8005fc2:	f026 0607 	bic.w	r6, r6, #7
 8005fc6:	1d23      	adds	r3, r4, #4
 8005fc8:	1af2      	subs	r2, r6, r3
 8005fca:	d0b6      	beq.n	8005f3a <_malloc_r+0x22>
 8005fcc:	1b9b      	subs	r3, r3, r6
 8005fce:	50a3      	str	r3, [r4, r2]
 8005fd0:	e7b3      	b.n	8005f3a <_malloc_r+0x22>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	bf0c      	ite	eq
 8005fd8:	6032      	streq	r2, [r6, #0]
 8005fda:	605a      	strne	r2, [r3, #4]
 8005fdc:	e7ec      	b.n	8005fb8 <_malloc_r+0xa0>
 8005fde:	4623      	mov	r3, r4
 8005fe0:	6864      	ldr	r4, [r4, #4]
 8005fe2:	e7b2      	b.n	8005f4a <_malloc_r+0x32>
 8005fe4:	4634      	mov	r4, r6
 8005fe6:	6876      	ldr	r6, [r6, #4]
 8005fe8:	e7b9      	b.n	8005f5e <_malloc_r+0x46>
 8005fea:	230c      	movs	r3, #12
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f000 f84c 	bl	800608c <__malloc_unlock>
 8005ff4:	e7a1      	b.n	8005f3a <_malloc_r+0x22>
 8005ff6:	6025      	str	r5, [r4, #0]
 8005ff8:	e7de      	b.n	8005fb8 <_malloc_r+0xa0>
 8005ffa:	bf00      	nop
 8005ffc:	2000045c 	.word	0x2000045c

08006000 <_realloc_r>:
 8006000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	4680      	mov	r8, r0
 8006006:	4614      	mov	r4, r2
 8006008:	460e      	mov	r6, r1
 800600a:	b921      	cbnz	r1, 8006016 <_realloc_r+0x16>
 800600c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006010:	4611      	mov	r1, r2
 8006012:	f7ff bf81 	b.w	8005f18 <_malloc_r>
 8006016:	b92a      	cbnz	r2, 8006024 <_realloc_r+0x24>
 8006018:	f7ff ff12 	bl	8005e40 <_free_r>
 800601c:	4625      	mov	r5, r4
 800601e:	4628      	mov	r0, r5
 8006020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006024:	f000 f838 	bl	8006098 <_malloc_usable_size_r>
 8006028:	4284      	cmp	r4, r0
 800602a:	4607      	mov	r7, r0
 800602c:	d802      	bhi.n	8006034 <_realloc_r+0x34>
 800602e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006032:	d812      	bhi.n	800605a <_realloc_r+0x5a>
 8006034:	4621      	mov	r1, r4
 8006036:	4640      	mov	r0, r8
 8006038:	f7ff ff6e 	bl	8005f18 <_malloc_r>
 800603c:	4605      	mov	r5, r0
 800603e:	2800      	cmp	r0, #0
 8006040:	d0ed      	beq.n	800601e <_realloc_r+0x1e>
 8006042:	42bc      	cmp	r4, r7
 8006044:	4622      	mov	r2, r4
 8006046:	4631      	mov	r1, r6
 8006048:	bf28      	it	cs
 800604a:	463a      	movcs	r2, r7
 800604c:	f7ff fed0 	bl	8005df0 <memcpy>
 8006050:	4631      	mov	r1, r6
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fef4 	bl	8005e40 <_free_r>
 8006058:	e7e1      	b.n	800601e <_realloc_r+0x1e>
 800605a:	4635      	mov	r5, r6
 800605c:	e7df      	b.n	800601e <_realloc_r+0x1e>
	...

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	; (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fb f832 	bl	80010d4 <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000454 	.word	0x20000454

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_lock+0x8>)
 8006082:	f7ff beb3 	b.w	8005dec <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	20000458 	.word	0x20000458

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_unlock+0x8>)
 800608e:	f7ff beae 	b.w	8005dee <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	20000458 	.word	0x20000458

08006098 <_malloc_usable_size_r>:
 8006098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800609c:	1f18      	subs	r0, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfbc      	itt	lt
 80060a2:	580b      	ldrlt	r3, [r1, r0]
 80060a4:	18c0      	addlt	r0, r0, r3
 80060a6:	4770      	bx	lr

080060a8 <_init>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr

080060b4 <_fini>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr
