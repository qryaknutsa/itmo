/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body adapted for musical box scenario
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include <stdio.h>
#include <stdbool.h>
#include <string.h>

/* Private typedef -----------------------------------------------------------*/
typedef struct {
	uint32_t frequency;
	uint32_t duration; // ms
} Note;

typedef enum {
	MELODY_IDLE,
	MELODY_PLAYING
} MelodyState_t;


/* Private define ------------------------------------------------------------*/
#define CLOCK_SCALED_FREQUENCY	1000000U
#define LED_PWM_FREQUENCY		500U
#define ENTER_ASCII				'\r'

#define INPUT_PORT_REG			(0x00)
#define OUTPUT_PORT_REG			(0x01)
#define POLARITY_INV_REG		(0x02)
#define CONFIG_REG				(0x03)
#define KEYPAD_ADDRESS			(0xE2)
#define KEYPAD_WRITE_ADDRESS	((KEYPAD_ADDRESS) & ~1)
#define KEYPAD_READ_ADDRESS		((KEYPAD_ADDRESS) | 1)
#define COLUMN_MASK				0x7
#define CONTACT_BOUNCE_MS		20

#define MAX_USER_MELODY_NOTES   20
#define UART_INPUT_BUFFER_SIZE  64



#define A3  220
#define B3  246
#define C4  261
#define D4  293
#define E4  329

#define FS4  369
#define G4  392
#define A4  440 //432
#define B4  493

#define CS5  554
#define D5  587

#define FS5  739
#define G5  783

/* Private macro -------------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/
uint16_t led_arr_value = CLOCK_SCALED_FREQUENCY / LED_PWM_FREQUENCY;

char newline[] = "\r\n";
char test_mode_msg[] = "\n\rCurrent mode: keypad test\n\r";
char main_mode_msg[] = "\n\rCurrent mode: main\n\r";

char playing_standard_msg[] = "\n\rPlaying standard melody...\n\r";
char playing_user_msg[] = "\n\rPlaying user melody...\n\r";
char user_melody_done_msg[] = "\n\rUser melody configuration finished.\n\rPress '5' to play user melody.\n\r";
char enter_user_mode_msg[] = "\n\rEntering user melody configuration mode.\n\rPlease enter notes in format: freq dur\n\rEnd with a line containing ';'\n\r";
char unknown_command_msg[] = "\n\rUnknown command.\n\r";

char note_mode_all_msg[] = "\n\rCurrent note mode: all\n\r";
char note_mode_led_msg[] = "\n\rCurrent note mode: led only\n\r";
char note_mode_sound_msg[] = "\n\rCurrent note mode: sound only\n\r";

static bool inUserMelodyConfig = false;
static char uartInputBuffer[UART_INPUT_BUFFER_SIZE];
static uint8_t uartInputIndex = 0;

static Note userMelody[MAX_USER_MELODY_NOTES];
static uint8_t userMelodyCount = 0;

/* Стандартные мелодии */
static const Note melody1[] = {
	{E4, 250}, {E4, 250}, {B3, 500}, {C4, 500},
	{D4, 750}, {C4, 250}, {B3, 250}, {A3, 500},
	{A3, 500}, {A3, 500}, {C4, 500}, {E4, 750},
	{D4, 500}, {C4, 500}, {B3, 250}, {B3, 250},
	{B3, 250}, {C4, 250}, {D4, 250}, {E4, 500},
	{C4, 500}, {A3, 750}
};


static const Note melody2[] = {
	{D4, 500}, {FS4, 500}, {CS5, 750},
	{E4, 500}, {G4, 500}, {D5, 750},
	{FS4, 500}, {A4, 500}, {FS5, 750},
	{G4, 500}, {B4, 500}, {G5, 750},
	{D5, 250}, {CS5, 250}, {A4, 250}, {FS4, 250},
	{D5, 250}, {CS5, 250}, {A4, 250}, {FS4, 250},
	{D5, 250}, {CS5, 250}, {A4, 250}, {FS4, 250},
	{D5, 250}, {CS5, 250}, {A4, 250}, {FS4, 250},
	{G4, 250}, {FS4, 250}, {D4, 250}, {B3, 250},
	{G4, 250}, {FS4, 250}, {D4, 250}, {B3, 250},
	{G4, 250}, {FS4, 250}, {D4, 250}, {B3, 250},
	{G4, 250}, {FS4, 250}, {D4, 250}, {B3, 250}
};
static const Note melody3[] = {
	{659, 500}, {698, 500}, {784, 500}, {0, 500}, {659, 500}
};
static const Note melody4[] = {
	{330, 500}, {349, 500}, {392, 500}, {0, 500}, {330, 500}
};

static MelodyState_t melodyState = MELODY_IDLE;
static const Note *currentMelody = NULL;
static uint16_t currentMelodyLength = 0;
static uint16_t currentNoteIndex = 0;


uint32_t last_pressed_time;
int last_pressed_key_index = -2;

bool is_test_mode = true;

bool timerStarted = false; // Для отслеживания запуска таймера

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void play_melody(const Note *melody, uint16_t length);
static void play_sound(Note note);
static void stopNote(void);
static void stop_timer(void);
static void set_timer(uint32_t ms);
static void stop_melody(void);
static bool get_input(char c);
static void handle_key(int keyIndex);

extern void initialise_monitor_handles(void);

static void uart_write(char *data) {
	uint16_t size = strlen(data);
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
}



void play_sound(Note note) {
	if (note.frequency == 0) {
		htim1.Instance->CCR1 = 0; // пауза
		return;
	}
	htim1.Instance->ARR = (1000000U / note.frequency) - 1;
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // 50% duty
}



void stop_sound(void) {
	htim1.Instance->CCR1 = 0;
}

HAL_StatusTypeDef reset_keypad(void) {
	uint8_t buf = 0;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, POLARITY_INV_REG, 1, &buf, 1, 100);
	if (status != HAL_OK)
		return status;
	status = HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, OUTPUT_PORT_REG, 1, &buf, 1, 100);
	return status;
}

int keypad_get_id(void) {
	uint32_t cur_time = HAL_GetTick();
	if (cur_time - last_pressed_time < CONTACT_BOUNCE_MS) return -1;

    int key_index = -1;
    uint8_t buf;
    uint16_t pressed_column;

    for (int row = 0; row < 4; row++) {
        buf = ~((uint8_t) (1 << row));
        reset_keypad();

        HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, CONFIG_REG, 1, &buf, 1, 100);
        HAL_Delay(10);
        HAL_I2C_Mem_Read(&hi2c1, KEYPAD_READ_ADDRESS, INPUT_PORT_REG, 1, &buf, 1, 100);

        pressed_column = (~(buf >> 4)) & COLUMN_MASK;
        switch (pressed_column) {
            case 0x1:
                if (key_index != -1) return -1;
                key_index = row * 3;
                break;
            case 0x2:
                if (key_index != -1) return -1;
                key_index = (row * 3) + 1;
                break;
            case 0x4:
                if (key_index != -1) return -1;
                key_index = (row * 3) + 2;
                break;
        }
    }

    if (key_index != -1) {
    	if (key_index == last_pressed_key_index)
    		return -1;
    	last_pressed_time = cur_time;
    	last_pressed_key_index = key_index;
    }
    return key_index;
}

bool get_input(char c) {
	if (inUserMelodyConfig) {


		if (c == '\r' || c == '\n') {
			if (uartInputIndex == 0) {
				return true; // пустая строка
			}
			uartInputBuffer[uartInputIndex] = '\0';
			uartInputIndex = 0;
			if (strchr(uartInputBuffer, ';') != NULL) {
				inUserMelodyConfig = false;
				uart_write(user_melody_done_msg);
			} else {
				uint32_t freq, dur;
				if (sscanf(uartInputBuffer, "%lu %lu", &freq, &dur) == 2) {
					if (userMelodyCount < MAX_USER_MELODY_NOTES) {
						userMelody[userMelodyCount].frequency = freq;
						userMelody[userMelodyCount].duration = dur;
						userMelodyCount++;
						uart_write("Note added.\n\r");
					} else {
						uart_write("User melody is full.\n\r");
					}
				} else {
					uart_write("Invalid input. Format: freq dur\n\rEnd input with ';'\n\r");
				}
			}
			return true;
		} else {
			if (uartInputIndex < UART_INPUT_BUFFER_SIZE - 1) {
				uartInputBuffer[uartInputIndex++] = c;
			}
			return true;
		}
	} else {
		if (c == ENTER_ASCII) {

            if (melodyState == MELODY_PLAYING) {
                uart_write("\n\rCannot enter configuration mode while melody is playing.\n\r");
                return true;
            }

			inUserMelodyConfig = true;
			userMelodyCount = 0;
			uart_write(enter_user_mode_msg);
			uartInputIndex = 0;
			return true;
		}
	}
	return false;
}

void UART_get_input(void) {
	char c;
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *)&c, 1, 10);
	if (status == HAL_OK) {
		HAL_UART_Transmit(&huart6, (uint8_t *)&c, 1, 100); // эхо
		if (!get_input(c)) {
			uart_write(unknown_command_msg);
		}
	}
}

static void play_melody(const Note *melody, uint16_t length) {
	currentMelody = melody;
	currentMelodyLength = length;
	currentNoteIndex = 0;
	melodyState = MELODY_PLAYING;
	play_sound(currentMelody[currentNoteIndex]);
	set_timer(currentMelody[currentNoteIndex].duration);
}

static void stop_melody(void) {
	stop_timer();
	stop_sound();
	melodyState = MELODY_IDLE;
	uart_write("\n\rMelody finished.\n\r");
}

static void stop_timer(void) {
	HAL_TIM_Base_Stop_IT(&htim6);
	htim6.Instance->ARR = 0;
	timerStarted = false;
}

static void set_timer(uint32_t ms) {
	htim6.Instance->ARR = ms - 1;
	HAL_TIM_Base_Start_IT(&htim6);
	timerStarted = true;
}

static void handle_key(int keyIndex) {
	int keyCode = keyIndex + 1;

	switch (keyCode) {
		case 1:
			uart_write(playing_standard_msg);
			play_melody(melody1, sizeof(melody1)/sizeof(Note));
			break;
		case 2:
			uart_write(playing_standard_msg);
			play_melody(melody2, sizeof(melody2)/sizeof(Note));
			break;
		case 3:
			uart_write(playing_standard_msg);
			play_melody(melody3, sizeof(melody3)/sizeof(Note));
			break;
		case 4:
			uart_write(playing_standard_msg);
			play_melody(melody4, sizeof(melody4)/sizeof(Note));
			break;
		case 5:
			if (userMelodyCount > 0) {
				uart_write(playing_user_msg);
				play_melody(userMelody, userMelodyCount);
			} else {
				uart_write("User melody is empty.\n\r");
			}
			break;
		case 11:
	        if (melodyState == MELODY_PLAYING) {
	            stop_melody();
	        }
			break;
		case 12:
            if (melodyState == MELODY_PLAYING) {
                uart_write("\n\rCannot enter configuration mode while melody is playing.\n\r");
                break;
            }
			inUserMelodyConfig = true;
			userMelodyCount = 0;
			uart_write(enter_user_mode_msg);
			uartInputIndex = 0;
			break;
		default:
			uart_write("Key pressed but no action in main mode.\n\r");
			break;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM6) {
		if (melodyState == MELODY_PLAYING && currentMelody != NULL) {
			currentNoteIndex++;
			if (currentNoteIndex < currentMelodyLength) {
				play_sound(currentMelody[currentNoteIndex]);
				set_timer(currentMelody[currentNoteIndex].duration);
			} else {
				stop_melody();
			}
		} else {
			stop_timer();
		}
	}
}

bool is_button_pressed(void) {
	return (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0);
}

int main(void)
{
	initialise_monitor_handles();
	HAL_Init();
	SystemClock_Config();

	MX_GPIO_Init();
	MX_TIM4_Init();
	MX_TIM6_Init();
	MX_USART6_UART_Init();
	MX_TIM1_Init();
	MX_I2C1_Init();

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

	HAL_TIM_Base_Start_IT(&htim1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	stop_timer();

	last_pressed_time = 0;
	bool button_pressed = false;

	uart_write(is_test_mode ? test_mode_msg : main_mode_msg);

	int key_index;
	while (1)
	{
		// Проверка боковой кнопки для смены режима
		if (is_button_pressed() && !button_pressed) {
			button_pressed = true;
			is_test_mode = !is_test_mode;
			uart_write(is_test_mode ? test_mode_msg : main_mode_msg);
		} else if (!is_button_pressed()) {
			button_pressed = false;
		}

		key_index = keypad_get_id();
		if (key_index != -1) {
			if (is_test_mode) {
				// Режим теста: просто выводим код нажатой клавиши
				char buf[8];
				sprintf(buf, "%d\n\r", key_index+1);
				uart_write(buf);
			} else {
				// Основной режим – обрабатываем клавишу
				handle_key(key_index);
			}
		}

		UART_get_input();
	}
}

void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

	RCC_OscInitStruct.OscillatorType       = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState             = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource        = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM             = 15;
	RCC_OscInitStruct.PLL.PLLN             = 72;
	RCC_OscInitStruct.PLL.PLLP             = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ             = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider= RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider= RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
		Error_Handler();
	}
}

void Error_Handler(void)
{
	__disable_irq();
	while (1)
	{
	}
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
}
#endif
