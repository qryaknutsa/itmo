/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Modified Main program body for "Musical Box" logic
  ******************************************************************************
  * @attention
  *
  * Code adapted from the provided sample. Logic changed to implement:
  * - 4 standard melodies and 1 user melody
  * - No blocking delays (no HAL_Delay)
  * - Timer-based note duration and sound generation
  * - UART input for user melody configuration
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
#include "stdio.h"
#include "stdbool.h"
#include "string.h"

/* Private typedef -----------------------------------------------------------*/
typedef struct {
	uint32_t frequency;
	uint32_t duration; // duration in ms
} Note_t;

typedef enum {
	MELODY_IDLE,
	MELODY_PLAYING
} MelodyState_t;

/* Private define ------------------------------------------------------------*/
#define CLOCK_SCALED_FREQUENCY	1000000U
#define LED_PWM_FREQUENCY		500U
#define ENTER_ASCII				'\r'

#define MAX_USER_MELODY_NOTES   20
#define UART_INPUT_BUFFER_SIZE  64

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
uint16_t led_arr_value = CLOCK_SCALED_FREQUENCY / LED_PWM_FREQUENCY;

char newline[] = "\r\n";
char enter_user_mode_msg[] = "\n\rEntering user melody configuration mode.\n\rPlease enter notes in format: freq dur\n\rEnd with a line containing ';'\n\r";
char user_melody_done_msg[] = "\n\rUser melody configuration finished.\n\rPress '5' to play user melody.\n\r";

char unknown_command_msg[] = "\n\rUnknown command.\n\r";

char playing_standard_msg[] = "\n\rPlaying standard melody...\n\r";
char playing_user_msg[] = "\n\rPlaying user melody...\n\r";

/* Стандартные мелодии (простой пример): */
static const Note_t melody1[] = {
	{440, 500}, {494, 500}, {523, 500}, {0, 500}, {440, 500}
};
static const Note_t melody2[] = {
	{523, 500}, {587, 500}, {659, 500}, {0, 500}, {523, 500}
};
static const Note_t melody3[] = {
	{659, 500}, {698, 500}, {784, 500}, {0, 500}, {659, 500}
};
static const Note_t melody4[] = {
	{330, 500}, {349, 500}, {392, 500}, {0, 500}, {330, 500}
};

/* Массив пользовательской мелодии */
static Note_t userMelody[MAX_USER_MELODY_NOTES];
static uint8_t userMelodyCount = 0;
static bool inUserMelodyConfig = false;

/* UART input parsing */
static char uartInputBuffer[UART_INPUT_BUFFER_SIZE];
static uint8_t uartInputIndex = 0;

/* Melody playback state */
static MelodyState_t melodyState = MELODY_IDLE;
static const Note_t *currentMelody = NULL;
static uint16_t currentMelodyLength = 0;
static uint16_t currentNoteIndex = 0;
static uint32_t noteTimer = 0; // ms counter for current note duration
static bool timerStarted = false;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void startMelody(const Note_t *melody, uint16_t length);
static void playNote(Note_t note);
static void stopNote(void);
static void stopTimer(void);
static void setTimerMs(uint32_t ms);

extern void initialise_monitor_handles(void);

/* Private user code ---------------------------------------------------------*/

bool is_digit_char(char c) {
	return ('0' <= c && c <= '9');
}

static void uart_write(char *data) {
	uint16_t size = strlen(data);
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
}

static void uart_write_newline(void) {
	uart_write(newline);
}

/* Настройка ШИМ для светодиода */
void init_led_pwm(void) {
	htim4.Instance->ARR = led_arr_value;
}

/* Генерация тона */
void play_sound(uint32_t frequency) {
	if (frequency == 0) {
		htim1.Instance->CCR1 = 0; // пауза
		return;
	}
	htim1.Instance->ARR = (1000000U / frequency) - 1;
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // 50% duty
}

/* Выключить звук */
void mute(void) {
	htim1.Instance->CCR1 = 0;
}

/* Управление яркостью светодиодов (просто зажигаем зеленый, например) */
void disable_all_leds(void) {
	htim4.Instance->CCR2 = 0;
	htim4.Instance->CCR3 = 0;
	htim4.Instance->CCR4 = 0;
}

void light_led(uint8_t brightness_percent) {
	disable_all_leds();
	uint16_t ccr_value = (CLOCK_SCALED_FREQUENCY / LED_PWM_FREQUENCY) * brightness_percent / 100;
	// Пусть зеленый светодиод будет использоваться для индикации
	htim4.Instance->CCR2 = ccr_value;
}

/* Проигрывание ноты: включаем звук и свет */
void playNote(Note_t note) {
	play_sound(note.frequency);
	// яркость, например, 50% при звучании ноты:
	if (note.frequency > 0) {
		light_led(50);
	} else {
		// пауза - выключим свет
		disable_all_leds();
	}
}

/* Остановить ноту */
void stopNote(void) {
	mute();
	disable_all_leds();
}

/* Остановка и сброс таймера длительности нот */
void stopTimer(void) {
	HAL_TIM_Base_Stop_IT(&htim6);
	htim6.Instance->ARR = 0;
	timerStarted = false;
}

/* Запуск таймера на ms миллисекунд (по истечении вызовется Callback) */
void setTimerMs(uint32_t ms) {
	htim6.Instance->ARR = ms - 1;
	HAL_TIM_Base_Start_IT(&htim6);
	timerStarted = true;
}

/* Запуск мелодии */
static void startMelody(const Note_t *melody, uint16_t length) {
	currentMelody = melody;
	currentMelodyLength = length;
	currentNoteIndex = 0;
	melodyState = MELODY_PLAYING;
	// стартуем первую ноту
	playNote(currentMelody[currentNoteIndex]);
	setTimerMs(currentMelody[currentNoteIndex].duration);
}

/* Завершение мелодии */
static void finishMelody(void) {
	stopTimer();
	stopNote();
	melodyState = MELODY_IDLE;
	uart_write("\n\rMelody finished.\n\r");
}

/* Обработка входных данных UART */
bool processInputChar(char c) {
    if (inUserMelodyConfig) {
        // В режиме ввода пользовательской мелодии
        if (c == '\r' || c == '\n') {
            // Конец строки ввода
            if (uartInputIndex == 0) {
                // Пустая строка, ничего не делаем
                return true;
            }

            uartInputBuffer[uartInputIndex] = '\0';
            uartInputIndex = 0;

            // Проверяем, не конец ли это ввода мелодии
            if (strchr(uartInputBuffer, ';') != NULL) {
                // Завершаем ввод пользовательской мелодии
                inUserMelodyConfig = false;
                uart_write(user_melody_done_msg);
            } else {
                // Парсим строку как "частота длительность"
                uint32_t freq, dur;
                if (sscanf(uartInputBuffer, "%lu %lu", &freq, &dur) == 2) {
                    if (userMelodyCount < MAX_USER_MELODY_NOTES) {
                        userMelody[userMelodyCount].frequency = freq;
                        userMelody[userMelodyCount].duration = dur;
                        userMelodyCount++;
                        uart_write("Note added.\n\r");
                    } else {
                        uart_write("User melody is full.\n\r");
                    }
                } else {
                    uart_write("Invalid input. Format: freq dur\n\rEnd input with ';'\n\r");
                }
            }
            return true;
        } else {
            // Накапливаем символ в буфер
            if (uartInputIndex < UART_INPUT_BUFFER_SIZE - 1) {
                uartInputBuffer[uartInputIndex++] = c;
            }
            return true;
        }
    } else {
        // Не в режиме ввода мелодии
        if (c == ENTER_ASCII) {
            // Вход в режим настройки пользовательской мелодии
            inUserMelodyConfig = true;
            userMelodyCount = 0;
            uart_write(enter_user_mode_msg);
            uartInputIndex = 0;
            return true;
        }

        switch (c) {
            case '1':
                uart_write(playing_standard_msg);
                startMelody(melody1, sizeof(melody1)/sizeof(Note_t));
                return true;
            case '2':
                uart_write(playing_standard_msg);
                startMelody(melody2, sizeof(melody2)/sizeof(Note_t));
                return true;
            case '3':
                uart_write(playing_standard_msg);
                startMelody(melody3, sizeof(melody3)/sizeof(Note_t));
                return true;
            case '4':
                uart_write(playing_standard_msg);
                startMelody(melody4, sizeof(melody4)/sizeof(Note_t));
                return true;
            case '5':
                if (userMelodyCount > 0) {
                    uart_write(playing_user_msg);
                    startMelody(userMelody, userMelodyCount);
                } else {
                    uart_write("User melody is empty.\n\r");
                }
                return true;
        }
    }
    return false;
}


void UART_ReceiveChar(void) {
	char c;
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *)&c, 1, 100);
	if (status == HAL_OK) {
		if (!processInputChar(c)) {
			uart_write(unknown_command_msg);
		}
	}
}

/* Callback от таймера длительности ноты */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM6) {
		// Окончание длительности текущей ноты
		if (melodyState == MELODY_PLAYING && currentMelody != NULL) {
			currentNoteIndex++;
			if (currentNoteIndex < currentMelodyLength) {
				playNote(currentMelody[currentNoteIndex]);
				setTimerMs(currentMelody[currentNoteIndex].duration);
			} else {
				finishMelody();
			}
		} else {
			stopTimer();
		}
	}
}

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
	initialise_monitor_handles();

	HAL_Init();
	SystemClock_Config();

	MX_GPIO_Init();
	MX_TIM4_Init();
	MX_TIM6_Init();
	MX_USART6_UART_Init();
	MX_TIM1_Init();

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

	HAL_TIM_Base_Start_IT(&htim1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	init_led_pwm();
	stopTimer();

	uart_write("Musical box ready.\n\rPress 1-4 for standard melodies, 5 for user melody.\n\rPress Enter to configure user melody.\n\r");

	while (1)
	{
		UART_ReceiveChar();
	}

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  // Настройки тактирования согласно вашему проекту
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM       = 15;
  RCC_OscInitStruct.PLL.PLLN       = 72;
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ       = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider= RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider= RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}


void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}
