
lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af0  08004af0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00000244  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4b1  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb5  00000000  00000000  0002e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00030620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  00031320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024160  00000000  00000000  00031f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f025  00000000  00000000  000560a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f55  00000000  00000000  000650cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e022  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ce0  00000000  00000000  0013e074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000184 	.word	0x20000184
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800457c 	.word	0x0800457c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000188 	.word	0x20000188
 80001ec:	0800457c 	.word	0x0800457c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_GPIO_Init+0xbc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0xbc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <uart_write>:

bool is_digit_char(char c) {
	return ('0' <= c && c <= '9');
}

static void uart_write(char *data) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(data);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff fdbf 	bl	80001f0 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
 8000676:	89fa      	ldrh	r2, [r7, #14]
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <uart_write+0x28>)
 800067e:	f002 fd26 	bl	80030ce <HAL_UART_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000370 	.word	0x20000370

08000690 <play_sound>:




/* Генерация тона */
void play_sound(Note_t note) {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	463b      	mov	r3, r7
 8000698:	e883 0003 	stmia.w	r3, {r0, r1}
	if (note.frequency == 0) {
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d104      	bne.n	80006ac <play_sound+0x1c>
		htim1.Instance->CCR1 = 0; // пауза
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <play_sound+0x44>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80006aa:	e00e      	b.n	80006ca <play_sound+0x3a>
	}
	htim1.Instance->ARR = (1000000U / note.frequency) - 1; //период одного колебания в мкс (с данной частотой)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <play_sound+0x48>)
 80006b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <play_sound+0x44>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3a01      	subs	r2, #1
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // 50% duty
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <play_sound+0x44>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <play_sound+0x44>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	0852      	lsrs	r2, r2, #1
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	20000298 	.word	0x20000298
 80006d8:	000f4240 	.word	0x000f4240

080006dc <stop_sound>:




/* Остановить ноту */
void stop_sound(void) {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <stop_sound+0x18>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000298 	.word	0x20000298

080006f8 <stop_timer>:

/* Остановка и сброс таймера длительности нот */
void stop_timer(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <stop_timer+0x1c>)
 80006fe:	f001 fe09 	bl	8002314 <HAL_TIM_Base_Stop_IT>
	htim6.Instance->ARR = 0;
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <stop_timer+0x1c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
	timerStarted = false;
 800070a:	4b03      	ldr	r3, [pc, #12]	; (8000718 <stop_timer+0x20>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000328 	.word	0x20000328
 8000718:	20000290 	.word	0x20000290

0800071c <set_timer>:

/* Запуск таймера на ms миллисекунд (по истечении вызовется Callback) */
void set_timer(uint32_t ms) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = ms - 1;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <set_timer+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	3a01      	subs	r2, #1
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <set_timer+0x28>)
 8000730:	f001 fd80 	bl	8002234 <HAL_TIM_Base_Start_IT>
	timerStarted = true;
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <set_timer+0x2c>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000328 	.word	0x20000328
 8000748:	20000290 	.word	0x20000290

0800074c <play_melody>:

/* Запуск мелодии */
static void play_melody(const Note_t *melody, uint16_t length) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
	currentMelody = melody;
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <play_melody+0x54>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
	currentMelodyLength = length;
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <play_melody+0x58>)
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	8013      	strh	r3, [r2, #0]
	currentNoteIndex = 0;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <play_melody+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
	melodyState = MELODY_PLAYING;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <play_melody+0x60>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
	// стартуем первую ноту
	play_sound(currentMelody[currentNoteIndex]);
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <play_melody+0x54>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <play_melody+0x5c>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000780:	f7ff ff86 	bl	8000690 <play_sound>
	set_timer(currentMelody[currentNoteIndex].duration);
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <play_melody+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <play_melody+0x5c>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	4413      	add	r3, r2
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffc2 	bl	800071c <set_timer>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000288 	.word	0x20000288
 80007a4:	2000028c 	.word	0x2000028c
 80007a8:	2000028e 	.word	0x2000028e
 80007ac:	20000285 	.word	0x20000285

080007b0 <finish_melody>:

/* Завершение мелодии */
static void finish_melody(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	stop_timer();
 80007b4:	f7ff ffa0 	bl	80006f8 <stop_timer>
	stop_sound();
 80007b8:	f7ff ff90 	bl	80006dc <stop_sound>
	melodyState = MELODY_IDLE;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <finish_melody+0x1c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
	uart_write("\n\rMelody finished.\n\r");
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <finish_melody+0x20>)
 80007c4:	f7ff ff4e 	bl	8000664 <uart_write>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000285 	.word	0x20000285
 80007d0:	08004594 	.word	0x08004594

080007d4 <get_input>:

/* Обработка входных данных UART */
bool get_input(char c) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    char echo[2] = {c, '\0'};
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	753b      	strb	r3, [r7, #20]
 80007e2:	2300      	movs	r3, #0
 80007e4:	757b      	strb	r3, [r7, #21]
    uart_write(echo);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff3a 	bl	8000664 <uart_write>

    if (c == 'q' || c == 'Q') {
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b71      	cmp	r3, #113	; 0x71
 80007f4:	d002      	beq.n	80007fc <get_input+0x28>
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b51      	cmp	r3, #81	; 0x51
 80007fa:	d107      	bne.n	800080c <get_input+0x38>
        if (melodyState == MELODY_PLAYING) {
 80007fc:	4b6b      	ldr	r3, [pc, #428]	; (80009ac <get_input+0x1d8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d103      	bne.n	800080c <get_input+0x38>
        	finish_melody();
 8000804:	f7ff ffd4 	bl	80007b0 <finish_melody>
            return true;
 8000808:	2301      	movs	r3, #1
 800080a:	e0ca      	b.n	80009a2 <get_input+0x1ce>
        }
    }

    if (inUserMelodyConfig) {
 800080c:	4b68      	ldr	r3, [pc, #416]	; (80009b0 <get_input+0x1dc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d062      	beq.n	80008da <get_input+0x106>
        // В режиме ввода пользовательской мелодии
        if (c == '\r' || c == '\n') {
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b0d      	cmp	r3, #13
 8000818:	d002      	beq.n	8000820 <get_input+0x4c>
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b0a      	cmp	r3, #10
 800081e:	d14c      	bne.n	80008ba <get_input+0xe6>
            // Конец строки ввода
            if (uartInputIndex == 0) {
 8000820:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <get_input+0x1e0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <get_input+0x58>
                // Пустая строка, ничего не делаем
                return true;
 8000828:	2301      	movs	r3, #1
 800082a:	e0ba      	b.n	80009a2 <get_input+0x1ce>
            }

            uartInputBuffer[uartInputIndex] = '\0';
 800082c:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <get_input+0x1e0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b61      	ldr	r3, [pc, #388]	; (80009b8 <get_input+0x1e4>)
 8000834:	2100      	movs	r1, #0
 8000836:	5499      	strb	r1, [r3, r2]
            uartInputIndex = 0;
 8000838:	4b5e      	ldr	r3, [pc, #376]	; (80009b4 <get_input+0x1e0>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]

            // Проверяем, не конец ли это ввода мелодии
            if (strchr(uartInputBuffer, ';') != NULL) {
 800083e:	213b      	movs	r1, #59	; 0x3b
 8000840:	485d      	ldr	r0, [pc, #372]	; (80009b8 <get_input+0x1e4>)
 8000842:	f003 f8bb 	bl	80039bc <strchr>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <get_input+0x86>
                // Завершаем ввод пользовательской мелодии
                inUserMelodyConfig = false;
 800084c:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <get_input+0x1dc>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
                uart_write(user_melody_done_msg);
 8000852:	485a      	ldr	r0, [pc, #360]	; (80009bc <get_input+0x1e8>)
 8000854:	f7ff ff06 	bl	8000664 <uart_write>
 8000858:	e02d      	b.n	80008b6 <get_input+0xe2>
            } else {
                // Парсим строку как "частота длительность"
                uint32_t freq, dur;
                if (sscanf(uartInputBuffer, "%lu %lu", &freq, &dur) == 2) {
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	f107 0210 	add.w	r2, r7, #16
 8000862:	4957      	ldr	r1, [pc, #348]	; (80009c0 <get_input+0x1ec>)
 8000864:	4854      	ldr	r0, [pc, #336]	; (80009b8 <get_input+0x1e4>)
 8000866:	f003 f87b 	bl	8003960 <siscanf>
 800086a:	4603      	mov	r3, r0
 800086c:	2b02      	cmp	r3, #2
 800086e:	d11f      	bne.n	80008b0 <get_input+0xdc>
                    if (userMelodyCount < MAX_USER_MELODY_NOTES) {
 8000870:	4b54      	ldr	r3, [pc, #336]	; (80009c4 <get_input+0x1f0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b13      	cmp	r3, #19
 8000876:	d817      	bhi.n	80008a8 <get_input+0xd4>
                        userMelody[userMelodyCount].frequency = freq;
 8000878:	4b52      	ldr	r3, [pc, #328]	; (80009c4 <get_input+0x1f0>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4a51      	ldr	r2, [pc, #324]	; (80009c8 <get_input+0x1f4>)
 8000882:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
                        userMelody[userMelodyCount].duration = dur;
 8000886:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <get_input+0x1f0>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	494e      	ldr	r1, [pc, #312]	; (80009c8 <get_input+0x1f4>)
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	440b      	add	r3, r1
 8000892:	605a      	str	r2, [r3, #4]
                        userMelodyCount++;
 8000894:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <get_input+0x1f0>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <get_input+0x1f0>)
 800089e:	701a      	strb	r2, [r3, #0]
                        uart_write("Note added.\n\r");
 80008a0:	484a      	ldr	r0, [pc, #296]	; (80009cc <get_input+0x1f8>)
 80008a2:	f7ff fedf 	bl	8000664 <uart_write>
 80008a6:	e006      	b.n	80008b6 <get_input+0xe2>
                    } else {
                        uart_write("User melody is full.\n\r");
 80008a8:	4849      	ldr	r0, [pc, #292]	; (80009d0 <get_input+0x1fc>)
 80008aa:	f7ff fedb 	bl	8000664 <uart_write>
 80008ae:	e002      	b.n	80008b6 <get_input+0xe2>
                    }
                } else {
                    uart_write("Invalid input. Format: freq dur\n\rEnd input with ';'\n\r");
 80008b0:	4848      	ldr	r0, [pc, #288]	; (80009d4 <get_input+0x200>)
 80008b2:	f7ff fed7 	bl	8000664 <uart_write>
                }
            }
            return true;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e073      	b.n	80009a2 <get_input+0x1ce>
        } else {
            // Накапливаем символ в буфер
            if (uartInputIndex < UART_INPUT_BUFFER_SIZE - 1) {
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <get_input+0x1e0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b3e      	cmp	r3, #62	; 0x3e
 80008c0:	d809      	bhi.n	80008d6 <get_input+0x102>
                uartInputBuffer[uartInputIndex++] = c;
 80008c2:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <get_input+0x1e0>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	b2d1      	uxtb	r1, r2
 80008ca:	4a3a      	ldr	r2, [pc, #232]	; (80009b4 <get_input+0x1e0>)
 80008cc:	7011      	strb	r1, [r2, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	4a39      	ldr	r2, [pc, #228]	; (80009b8 <get_input+0x1e4>)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	5453      	strb	r3, [r2, r1]
            }
            return true;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e063      	b.n	80009a2 <get_input+0x1ce>
        }
    } else {
        // Не в режиме ввода мелодии
        if (c == ENTER_ASCII) {
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b0d      	cmp	r3, #13
 80008de:	d116      	bne.n	800090e <get_input+0x13a>
            // Вход в режим настройки пользовательской мелодии

            if (melodyState == MELODY_PLAYING) {
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <get_input+0x1d8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d104      	bne.n	80008f2 <get_input+0x11e>
                uart_write("\n\rCannot enter configuration mode while melody is playing.\n\r");
 80008e8:	483b      	ldr	r0, [pc, #236]	; (80009d8 <get_input+0x204>)
 80008ea:	f7ff febb 	bl	8000664 <uart_write>
                return true;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e057      	b.n	80009a2 <get_input+0x1ce>
            }

        	inUserMelodyConfig = true;
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <get_input+0x1dc>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
            userMelodyCount = 0;
 80008f8:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <get_input+0x1f0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
            uart_write(enter_user_mode_msg);
 80008fe:	4837      	ldr	r0, [pc, #220]	; (80009dc <get_input+0x208>)
 8000900:	f7ff feb0 	bl	8000664 <uart_write>
            uartInputIndex = 0;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <get_input+0x1e0>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
            return true;
 800090a:	2301      	movs	r3, #1
 800090c:	e049      	b.n	80009a2 <get_input+0x1ce>
        }

        switch (c) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	3b31      	subs	r3, #49	; 0x31
 8000912:	2b04      	cmp	r3, #4
 8000914:	d844      	bhi.n	80009a0 <get_input+0x1cc>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <get_input+0x148>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	08000931 	.word	0x08000931
 8000920:	08000943 	.word	0x08000943
 8000924:	08000955 	.word	0x08000955
 8000928:	08000967 	.word	0x08000967
 800092c:	08000979 	.word	0x08000979
            case '1':
                uart_write(playing_standard_msg);
 8000930:	482b      	ldr	r0, [pc, #172]	; (80009e0 <get_input+0x20c>)
 8000932:	f7ff fe97 	bl	8000664 <uart_write>
                play_melody(melody1, sizeof(melody1)/sizeof(Note_t));
 8000936:	2116      	movs	r1, #22
 8000938:	482a      	ldr	r0, [pc, #168]	; (80009e4 <get_input+0x210>)
 800093a:	f7ff ff07 	bl	800074c <play_melody>
                return true;
 800093e:	2301      	movs	r3, #1
 8000940:	e02f      	b.n	80009a2 <get_input+0x1ce>
            case '2':
                uart_write(playing_standard_msg);
 8000942:	4827      	ldr	r0, [pc, #156]	; (80009e0 <get_input+0x20c>)
 8000944:	f7ff fe8e 	bl	8000664 <uart_write>
                play_melody(melody2, sizeof(melody2)/sizeof(Note_t));
 8000948:	212c      	movs	r1, #44	; 0x2c
 800094a:	4827      	ldr	r0, [pc, #156]	; (80009e8 <get_input+0x214>)
 800094c:	f7ff fefe 	bl	800074c <play_melody>
                return true;
 8000950:	2301      	movs	r3, #1
 8000952:	e026      	b.n	80009a2 <get_input+0x1ce>
            case '3':
                uart_write(playing_standard_msg);
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <get_input+0x20c>)
 8000956:	f7ff fe85 	bl	8000664 <uart_write>
                play_melody(melody3, sizeof(melody3)/sizeof(Note_t));
 800095a:	2105      	movs	r1, #5
 800095c:	4823      	ldr	r0, [pc, #140]	; (80009ec <get_input+0x218>)
 800095e:	f7ff fef5 	bl	800074c <play_melody>
                return true;
 8000962:	2301      	movs	r3, #1
 8000964:	e01d      	b.n	80009a2 <get_input+0x1ce>
            case '4':
                uart_write(playing_standard_msg);
 8000966:	481e      	ldr	r0, [pc, #120]	; (80009e0 <get_input+0x20c>)
 8000968:	f7ff fe7c 	bl	8000664 <uart_write>
                play_melody(melody4, sizeof(melody4)/sizeof(Note_t));
 800096c:	2105      	movs	r1, #5
 800096e:	4820      	ldr	r0, [pc, #128]	; (80009f0 <get_input+0x21c>)
 8000970:	f7ff feec 	bl	800074c <play_melody>
                return true;
 8000974:	2301      	movs	r3, #1
 8000976:	e014      	b.n	80009a2 <get_input+0x1ce>
            case '5':
                if (userMelodyCount > 0) {
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <get_input+0x1f0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00a      	beq.n	8000996 <get_input+0x1c2>
                    uart_write(playing_user_msg);
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <get_input+0x220>)
 8000982:	f7ff fe6f 	bl	8000664 <uart_write>
                    play_melody(userMelody, userMelodyCount);
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <get_input+0x1f0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4619      	mov	r1, r3
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <get_input+0x1f4>)
 8000990:	f7ff fedc 	bl	800074c <play_melody>
 8000994:	e002      	b.n	800099c <get_input+0x1c8>
                } else {
                    uart_write("\nUser melody is empty.\n\r");
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <get_input+0x224>)
 8000998:	f7ff fe64 	bl	8000664 <uart_write>
                }
                return true;
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <get_input+0x1ce>
        }
    }
    return false;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000285 	.word	0x20000285
 80009b0:	20000241 	.word	0x20000241
 80009b4:	20000284 	.word	0x20000284
 80009b8:	20000244 	.word	0x20000244
 80009bc:	20000078 	.word	0x20000078
 80009c0:	080045ac 	.word	0x080045ac
 80009c4:	20000240 	.word	0x20000240
 80009c8:	200001a0 	.word	0x200001a0
 80009cc:	080045b4 	.word	0x080045b4
 80009d0:	080045c4 	.word	0x080045c4
 80009d4:	080045dc 	.word	0x080045dc
 80009d8:	08004614 	.word	0x08004614
 80009dc:	20000000 	.word	0x20000000
 80009e0:	200000d8 	.word	0x200000d8
 80009e4:	080046f0 	.word	0x080046f0
 80009e8:	080047a0 	.word	0x080047a0
 80009ec:	08004900 	.word	0x08004900
 80009f0:	08004928 	.word	0x08004928
 80009f4:	200000f8 	.word	0x200000f8
 80009f8:	08004654 	.word	0x08004654

080009fc <UART_get_input>:


void UART_get_input(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	char c;
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *)&c, 1, 100);
 8000a02:	1db9      	adds	r1, r7, #6
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2201      	movs	r2, #1
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <UART_get_input+0x40>)
 8000a0a:	f002 fbf2 	bl	80031f2 <HAL_UART_Receive>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10c      	bne.n	8000a32 <UART_get_input+0x36>
		if (!get_input(c)) {
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff feda 	bl	80007d4 <get_input>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f083 0301 	eor.w	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <UART_get_input+0x36>
			uart_write(unknown_command_msg);
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <UART_get_input+0x44>)
 8000a2e:	f7ff fe19 	bl	8000664 <uart_write>
		}
	}
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000370 	.word	0x20000370
 8000a40:	200000c0 	.word	0x200000c0

08000a44 <HAL_TIM_PeriodElapsedCallback>:

/* Callback от таймера длительности ноты */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12e      	bne.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x70>
		// Окончание длительности текущей ноты
		if (melodyState == MELODY_PLAYING && currentMelody != NULL) {
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d127      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d023      	beq.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x6a>
			currentNoteIndex++;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a70:	801a      	strh	r2, [r3, #0]
			if (currentNoteIndex < currentMelodyLength) {
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a74:	881a      	ldrh	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d214      	bcs.n	8000aa8 <HAL_TIM_PeriodElapsedCallback+0x64>
				play_sound(currentMelody[currentNoteIndex]);
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	4413      	add	r3, r2
 8000a8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a8e:	f7ff fdff 	bl	8000690 <play_sound>
				set_timer(currentMelody[currentNoteIndex].duration);
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fe3b 	bl	800071c <set_timer>
			if (currentNoteIndex < currentMelodyLength) {
 8000aa6:	e005      	b.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				finish_melody();
 8000aa8:	f7ff fe82 	bl	80007b0 <finish_melody>
			if (currentNoteIndex < currentMelodyLength) {
 8000aac:	e002      	b.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x70>
			}
		} else {
			stop_timer();
 8000aae:	f7ff fe23 	bl	80006f8 <stop_timer>
		}
	}
}
 8000ab2:	e7ff      	b.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x70>
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40001000 	.word	0x40001000
 8000ac0:	20000285 	.word	0x20000285
 8000ac4:	20000288 	.word	0x20000288
 8000ac8:	2000028e 	.word	0x2000028e
 8000acc:	2000028c 	.word	0x2000028c

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000ad4:	f000 f8fe 	bl	8000cd4 <initialise_monitor_handles>

	HAL_Init();
 8000ad8:	f000 fbd4 	bl	8001284 <HAL_Init>
	SystemClock_Config();
 8000adc:	f000 f82c 	bl	8000b38 <SystemClock_Config>

	MX_GPIO_Init();
 8000ae0:	f7ff fd60 	bl	80005a4 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000ae4:	f000 f9ca 	bl	8000e7c <MX_TIM4_Init>
	MX_TIM6_Init();
 8000ae8:	f000 fa36 	bl	8000f58 <MX_TIM6_Init>
	MX_USART6_UART_Init();
 8000aec:	f000 fb2e 	bl	800114c <MX_USART6_UART_Init>
	MX_TIM1_Init();
 8000af0:	f000 f940 	bl	8000d74 <MX_TIM1_Init>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0x5c>)
 8000af8:	f001 fc8a 	bl	8002410 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000afc:	2108      	movs	r1, #8
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <main+0x5c>)
 8000b00:	f001 fc86 	bl	8002410 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000b04:	210c      	movs	r1, #12
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <main+0x5c>)
 8000b08:	f001 fc82 	bl	8002410 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim1);
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <main+0x60>)
 8000b0e:	f001 fb91 	bl	8002234 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <main+0x60>)
 8000b16:	f001 fc7b 	bl	8002410 <HAL_TIM_PWM_Start>

	stop_timer();
 8000b1a:	f7ff fded 	bl	80006f8 <stop_timer>

	uart_write("Musical box ready.\n\rPress 1-4 for standard melodies, 5 for user melody.\n\rPress Enter to configure user melody.\n\r");
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <main+0x64>)
 8000b20:	f7ff fda0 	bl	8000664 <uart_write>

	while (1)
	{
		UART_get_input();
 8000b24:	f7ff ff6a 	bl	80009fc <UART_get_input>
 8000b28:	e7fc      	b.n	8000b24 <main+0x54>
 8000b2a:	bf00      	nop
 8000b2c:	200002e0 	.word	0x200002e0
 8000b30:	20000298 	.word	0x20000298
 8000b34:	08004670 	.word	0x08004670

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  // Настройки тактирования согласно вашему проекту
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	2230      	movs	r2, #48	; 0x30
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 ff02 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8000b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM       = 15;
 8000bac:	230f      	movs	r3, #15
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN       = 72;
 8000bb0:	2348      	movs	r3, #72	; 0x48
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ       = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fe8f 	bl	80018e4 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bcc:	f000 f820 	bl	8000c10 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	60fb      	str	r3, [r7, #12]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider= RCC_HCLK_DIV2;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider= RCC_HCLK_DIV2;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2101      	movs	r1, #1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f8f0 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bfa:	f000 f809 	bl	8000c10 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3750      	adds	r7, #80	; 0x50
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <Error_Handler>:


void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 fb36 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM6_DAC_IRQHandler+0x10>)
 8000cc6:	f001 fc6b 	bl	80025a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000328 	.word	0x20000328

08000cd4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f002 fdf2 	bl	80038fc <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20030000 	.word	0x20030000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	20000294 	.word	0x20000294
 8000d4c:	200003c8 	.word	0x200003c8

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b092      	sub	sp, #72	; 0x48
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fdd6 	bl	8003950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <MX_TIM1_Init+0x104>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000dac:	223b      	movs	r2, #59	; 0x3b
 8000dae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dce:	4829      	ldr	r0, [pc, #164]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000dd0:	f001 facf 	bl	8002372 <HAL_TIM_PWM_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000dda:	f7ff ff19 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dea:	4619      	mov	r1, r3
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000dee:	f002 f83f 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000df8:	f7ff ff0a 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dfc:	2360      	movs	r3, #96	; 0x60
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32769;
 8000e00:	f248 0301 	movw	r3, #32769	; 0x8001
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000e24:	f001 fcc4 	bl	80027b0 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e2e:	f7ff feef 	bl	8000c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000e56:	f002 f887 	bl	8002f68 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000e60:	f7ff fed6 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <MX_TIM1_Init+0x100>)
 8000e66:	f000 f90d 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000e6a:	bf00      	nop
 8000e6c:	3748      	adds	r7, #72	; 0x48
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000298 	.word	0x20000298
 8000e78:	40010000 	.word	0x40010000

08000e7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000ea0:	4a2c      	ldr	r2, [pc, #176]	; (8000f54 <MX_TIM4_Init+0xd8>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000ea6:	223b      	movs	r2, #59	; 0x3b
 8000ea8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000eb2:	2263      	movs	r2, #99	; 0x63
 8000eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ec2:	4823      	ldr	r0, [pc, #140]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000ec4:	f001 fa55 	bl	8002372 <HAL_TIM_PWM_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000ece:	f7ff fe9f 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000ee2:	f001 ffc5 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000eec:	f7ff fe90 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2204      	movs	r2, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000f08:	f001 fc52 	bl	80027b0 <HAL_TIM_PWM_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f12:	f7ff fe7d 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000f1e:	f001 fc47 	bl	80027b0 <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f28:	f7ff fe72 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000f34:	f001 fc3c 	bl	80027b0 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8000f3e:	f7ff fe67 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM4_Init+0xd4>)
 8000f44:	f000 f89e 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200002e0 	.word	0x200002e0
 8000f54:	40000800 	.word	0x40000800

08000f58 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_TIM6_Init+0x68>)
 8000f6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f6e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000f88:	f001 f904 	bl	8002194 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f92:	f7ff fe3d 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM6_Init+0x64>)
 8000fa4:	f001 ff64 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000fae:	f7ff fe2f 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000328 	.word	0x20000328
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <HAL_TIM_PWM_MspInit+0x64>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_TIM_PWM_MspInit+0x68>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <HAL_TIM_PWM_MspInit+0x68>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_TIM_PWM_MspInit+0x68>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ff2:	e012      	b.n	800101a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_TIM_PWM_MspInit+0x6c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10d      	bne.n	800101a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_PWM_MspInit+0x68>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_TIM_PWM_MspInit+0x68>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <HAL_TIM_PWM_MspInit+0x68>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40010000 	.word	0x40010000
 800102c:	40023800 	.word	0x40023800
 8001030:	40000800 	.word	0x40000800

08001034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d115      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2036      	movs	r0, #54	; 0x36
 8001068:	f000 fa59 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800106c:	2036      	movs	r0, #54	; 0x36
 800106e:	f000 fa72 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001000 	.word	0x40001000
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <HAL_TIM_MspPostInit+0xb4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d11f      	bne.n	80010e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_TIM_MspPostInit+0xb8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_TIM_MspPostInit+0xb8>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_TIM_MspPostInit+0xb8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <HAL_TIM_MspPostInit+0xbc>)
 80010e0:	f000 fa54 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010e4:	e023      	b.n	800112e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_TIM_MspPostInit+0xc0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d11e      	bne.n	800112e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_TIM_MspPostInit+0xb8>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_TIM_MspPostInit+0xb8>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_TIM_MspPostInit+0xb8>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800110c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800111e:	2302      	movs	r3, #2
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <HAL_TIM_MspPostInit+0xc4>)
 800112a:	f000 fa2f 	bl	800158c <HAL_GPIO_Init>
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010000 	.word	0x40010000
 800113c:	40023800 	.word	0x40023800
 8001140:	40021000 	.word	0x40021000
 8001144:	40000800 	.word	0x40000800
 8001148:	40020c00 	.word	0x40020c00

0800114c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART6_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001184:	f001 ff56 	bl	8003034 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f7ff fd3f 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000370 	.word	0x20000370
 800119c:	40011400 	.word	0x40011400

080011a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <HAL_UART_MspInit+0x84>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12b      	bne.n	800121a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800120a:	2308      	movs	r3, #8
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_UART_MspInit+0x8c>)
 8001216:	f000 f9b9 	bl	800158c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40011400 	.word	0x40011400
 8001228:	40023800 	.word	0x40023800
 800122c:	40020800 	.word	0x40020800

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopFillZerobss+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800125a:	f7ff fd79 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f002 fb53 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fc35 	bl	8000ad0 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001274:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8001278:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800127c:	200003c8 	.word	0x200003c8

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f92b 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fcb0 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f943 	bl	8001572 <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f90b 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000114 	.word	0x20000114
 8001320:	2000011c 	.word	0x2000011c
 8001324:	20000118 	.word	0x20000118

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000011c 	.word	0x2000011c
 800134c:	200003b4 	.word	0x200003b4

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200003b4 	.word	0x200003b4

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e177      	b.n	8001898 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8166 	bne.w	8001892 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80c0 	beq.w	8001892 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <HAL_GPIO_Init+0x324>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_GPIO_Init+0x324>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_GPIO_Init+0x324>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a61      	ldr	r2, [pc, #388]	; (80018b4 <HAL_GPIO_Init+0x328>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <HAL_GPIO_Init+0x32c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d037      	beq.n	80017ca <HAL_GPIO_Init+0x23e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a57      	ldr	r2, [pc, #348]	; (80018bc <HAL_GPIO_Init+0x330>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d031      	beq.n	80017c6 <HAL_GPIO_Init+0x23a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a56      	ldr	r2, [pc, #344]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d02b      	beq.n	80017c2 <HAL_GPIO_Init+0x236>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_GPIO_Init+0x338>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d025      	beq.n	80017be <HAL_GPIO_Init+0x232>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <HAL_GPIO_Init+0x33c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01f      	beq.n	80017ba <HAL_GPIO_Init+0x22e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a53      	ldr	r2, [pc, #332]	; (80018cc <HAL_GPIO_Init+0x340>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x22a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_GPIO_Init+0x344>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x226>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <HAL_GPIO_Init+0x348>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x222>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a50      	ldr	r2, [pc, #320]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x21e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4f      	ldr	r2, [pc, #316]	; (80018dc <HAL_GPIO_Init+0x350>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x21a>
 80017a2:	2309      	movs	r3, #9
 80017a4:	e012      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017a6:	230a      	movs	r3, #10
 80017a8:	e010      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017aa:	2308      	movs	r3, #8
 80017ac:	e00e      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e00c      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00a      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e008      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017be:	2303      	movs	r3, #3
 80017c0:	e004      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x240>
 80017ca:	2300      	movs	r3, #0
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f002 0203 	and.w	r2, r2, #3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4093      	lsls	r3, r2
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017dc:	4935      	ldr	r1, [pc, #212]	; (80018b4 <HAL_GPIO_Init+0x328>)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_GPIO_Init+0x354>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <HAL_GPIO_Init+0x354>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_GPIO_Init+0x354>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001838:	4a29      	ldr	r2, [pc, #164]	; (80018e0 <HAL_GPIO_Init+0x354>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_GPIO_Init+0x354>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_GPIO_Init+0x354>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_GPIO_Init+0x354>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x354>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	f67f ae84 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40021400 	.word	0x40021400
 80018d0:	40021800 	.word	0x40021800
 80018d4:	40021c00 	.word	0x40021c00
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40022400 	.word	0x40022400
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e267      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d075      	beq.n	80019ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001916:	2b08      	cmp	r3, #8
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <HAL_RCC_OscConfig+0x108>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d157      	bne.n	80019ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e242      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x74>
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xb0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x98>
 8001962:	4b70      	ldr	r3, [pc, #448]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6f      	ldr	r2, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6c      	ldr	r2, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xb0>
 800197c:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a68      	ldr	r2, [pc, #416]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fcd8 	bl	8001350 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fcd4 	bl	8001350 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e207      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xc0>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fcc4 	bl	8001350 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fcc0 	bl	8001350 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1f3      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0xe8>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x152>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4937      	ldr	r1, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x244>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fc79 	bl	8001350 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fc75 	bl	8001350 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1a8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4925      	ldr	r1, [pc, #148]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x244>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fc58 	bl	8001350 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fc54 	bl	8001350 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e187      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d036      	beq.n	8001b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d016      	beq.n	8001b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_RCC_OscConfig+0x248>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff fc38 	bl	8001350 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fc34 	bl	8001350 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e167      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x200>
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x248>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fc21 	bl	8001350 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00e      	b.n	8001b30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff fc1d 	bl	8001350 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e150      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ea      	bne.n	8001b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8097 	beq.w	8001c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a7c      	ldr	r2, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b77      	ldr	r3, [pc, #476]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a73      	ldr	r2, [pc, #460]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fbdd 	bl	8001350 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff fbd9 	bl	8001350 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e10c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b6a      	ldr	r3, [pc, #424]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x2ea>
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x324>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x30c>
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a5e      	ldr	r2, [pc, #376]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x324>
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff fb9e 	bl	8001350 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff fb9a 	bl	8001350 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0cb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ee      	beq.n	8001c18 <HAL_RCC_OscConfig+0x334>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fb88 	bl	8001350 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff fb84 	bl	8001350 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0b5      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ee      	bne.n	8001c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a1 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d05c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d141      	bne.n	8001d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fb58 	bl	8001350 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff fb54 	bl	8001350 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e087      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	491b      	ldr	r1, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fb2d 	bl	8001350 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff fb29 	bl	8001350 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e05c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x416>
 8001d18:	e054      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb16 	bl	8001350 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fb12 	bl	8001350 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e045      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x444>
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e038      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4ec>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d028      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d121      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d11a      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d111      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	3b01      	subs	r3, #1
 8001daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0cc      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d90c      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d044      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e067      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff fa44 	bl	8001350 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff fa40 	bl	8001350 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e04f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d20c      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f821 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f9a4 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08004950 	.word	0x08004950
 8001f98:	20000114 	.word	0x20000114
 8001f9c:	20000118 	.word	0x20000118

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b090      	sub	sp, #64	; 0x40
 8001fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	f200 80a1 	bhi.w	800210c <HAL_RCC_GetSysClockFreq+0x16c>
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x3a>
 8001fd2:	e09b      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fd8:	e09b      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fde:	e098      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fea:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d028      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	627a      	str	r2, [r7, #36]	; 0x24
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002008:	2100      	movs	r1, #0
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 800200c:	fb03 f201 	mul.w	r2, r3, r1
 8002010:	2300      	movs	r3, #0
 8002012:	fb00 f303 	mul.w	r3, r0, r3
 8002016:	4413      	add	r3, r2
 8002018:	4a43      	ldr	r2, [pc, #268]	; (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 800201a:	fba0 1202 	umull	r1, r2, r0, r2
 800201e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002020:	460a      	mov	r2, r1
 8002022:	62ba      	str	r2, [r7, #40]	; 0x28
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	4413      	add	r3, r2
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	2200      	movs	r2, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	61fa      	str	r2, [r7, #28]
 8002032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002036:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800203a:	f7fe f931 	bl	80002a0 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4613      	mov	r3, r2
 8002044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002046:	e053      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	2200      	movs	r2, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	617a      	str	r2, [r7, #20]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800205a:	f04f 0b00 	mov.w	fp, #0
 800205e:	4652      	mov	r2, sl
 8002060:	465b      	mov	r3, fp
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	ebb2 080a 	subs.w	r8, r2, sl
 800207a:	eb63 090b 	sbc.w	r9, r3, fp
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800208a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800208e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002092:	ebb2 0408 	subs.w	r4, r2, r8
 8002096:	eb63 0509 	sbc.w	r5, r3, r9
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	00eb      	lsls	r3, r5, #3
 80020a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	eb14 030a 	adds.w	r3, r4, sl
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	eb45 030b 	adc.w	r3, r5, fp
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c6:	4629      	mov	r1, r5
 80020c8:	028b      	lsls	r3, r1, #10
 80020ca:	4621      	mov	r1, r4
 80020cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d0:	4621      	mov	r1, r4
 80020d2:	028a      	lsls	r2, r1, #10
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	2200      	movs	r2, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e4:	f7fe f8dc 	bl	80002a0 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4613      	mov	r3, r2
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetSysClockFreq+0x184>)
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002114:	4618      	mov	r0, r3
 8002116:	3740      	adds	r7, #64	; 0x40
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	00f42400 	.word	0x00f42400
 8002128:	017d7840 	.word	0x017d7840

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000114 	.word	0x20000114

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	08004960 	.word	0x08004960

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002170:	f7ff ffdc 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0b5b      	lsrs	r3, r3, #13
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	08004960 	.word	0x08004960

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff3a 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 fbd6 	bl	8002984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e04e      	b.n	80022ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d01d      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_TIM_Base_Start_IT+0xc8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_TIM_Base_Start_IT+0xcc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_TIM_Base_Start_IT+0xd0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_TIM_Base_Start_IT+0xd4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_TIM_Base_Start_IT+0xd8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_TIM_Base_Start_IT+0xdc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d010      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	e007      	b.n	80022e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00
 8002308:	40010400 	.word	0x40010400
 800230c:	40014000 	.word	0x40014000
 8002310:	40001800 	.word	0x40001800

08002314 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	f241 1311 	movw	r3, #4369	; 0x1111
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10f      	bne.n	800235c <HAL_TIM_Base_Stop_IT+0x48>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	f240 4344 	movw	r3, #1092	; 0x444
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_TIM_Base_Stop_IT+0x48>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e041      	b.n	8002408 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fe13 	bl	8000fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f000 fae7 	bl	8002984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_TIM_PWM_Start+0x24>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e022      	b.n	800247a <HAL_TIM_PWM_Start+0x6a>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d109      	bne.n	800244e <HAL_TIM_PWM_Start+0x3e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	e015      	b.n	800247a <HAL_TIM_PWM_Start+0x6a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d109      	bne.n	8002468 <HAL_TIM_PWM_Start+0x58>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e008      	b.n	800247a <HAL_TIM_PWM_Start+0x6a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07c      	b.n	800257c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0x82>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002490:	e013      	b.n	80024ba <HAL_TIM_PWM_Start+0xaa>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_PWM_Start+0x92>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a0:	e00b      	b.n	80024ba <HAL_TIM_PWM_Start+0xaa>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d104      	bne.n	80024b2 <HAL_TIM_PWM_Start+0xa2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b0:	e003      	b.n	80024ba <HAL_TIM_PWM_Start+0xaa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fcae 	bl	8002e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2d      	ldr	r2, [pc, #180]	; (8002584 <HAL_TIM_PWM_Start+0x174>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_TIM_PWM_Start+0xcc>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2c      	ldr	r2, [pc, #176]	; (8002588 <HAL_TIM_PWM_Start+0x178>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_TIM_PWM_Start+0xd0>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_TIM_PWM_Start+0xd2>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_TIM_PWM_Start+0x174>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002508:	d01d      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_TIM_PWM_Start+0x17c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d018      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_TIM_PWM_Start+0x180>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_TIM_PWM_Start+0x184>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_TIM_PWM_Start+0x178>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_TIM_PWM_Start+0x188>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_TIM_PWM_Start+0x136>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_TIM_PWM_Start+0x18c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d111      	bne.n	800256a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b06      	cmp	r3, #6
 8002556:	d010      	beq.n	800257a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002568:	e007      	b.n	800257a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40010000 	.word	0x40010000
 8002588:	40010400 	.word	0x40010400
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	40000c00 	.word	0x40000c00
 8002598:	40014000 	.word	0x40014000
 800259c:	40001800 	.word	0x40001800

080025a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0202 	mvn.w	r2, #2
 80025cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9b0 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9a2 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9b3 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0204 	mvn.w	r2, #4
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f986 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f978 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f989 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0208 	mvn.w	r2, #8
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f95c 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f94e 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f95f 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f932 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f924 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f935 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0201 	mvn.w	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe f990 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fc68 	bl	8003020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8fa 	bl	8002970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc32 	bl	800300c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0ae      	b.n	800292c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	f200 809f 	bhi.w	800291c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	08002819 	.word	0x08002819
 80027e8:	0800291d 	.word	0x0800291d
 80027ec:	0800291d 	.word	0x0800291d
 80027f0:	0800291d 	.word	0x0800291d
 80027f4:	08002859 	.word	0x08002859
 80027f8:	0800291d 	.word	0x0800291d
 80027fc:	0800291d 	.word	0x0800291d
 8002800:	0800291d 	.word	0x0800291d
 8002804:	0800289b 	.word	0x0800289b
 8002808:	0800291d 	.word	0x0800291d
 800280c:	0800291d 	.word	0x0800291d
 8002810:	0800291d 	.word	0x0800291d
 8002814:	080028db 	.word	0x080028db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f950 	bl	8002ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0208 	orr.w	r2, r2, #8
 8002832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0204 	bic.w	r2, r2, #4
 8002842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6999      	ldr	r1, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
      break;
 8002856:	e064      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f9a0 	bl	8002ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6999      	ldr	r1, [r3, #24]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	619a      	str	r2, [r3, #24]
      break;
 8002898:	e043      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f9f5 	bl	8002c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0208 	orr.w	r2, r2, #8
 80028b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0204 	bic.w	r2, r2, #4
 80028c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69d9      	ldr	r1, [r3, #28]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]
      break;
 80028d8:	e023      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fa49 	bl	8002d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69d9      	ldr	r1, [r3, #28]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	021a      	lsls	r2, r3, #8
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	61da      	str	r2, [r3, #28]
      break;
 800291a:	e002      	b.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
      break;
 8002920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <TIM_Base_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d00f      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <TIM_Base_SetConfig+0x118>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <TIM_Base_SetConfig+0x11c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <TIM_Base_SetConfig+0x120>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <TIM_Base_SetConfig+0x124>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2f      	ldr	r2, [pc, #188]	; (8002a98 <TIM_Base_SetConfig+0x114>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d027      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <TIM_Base_SetConfig+0x118>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d023      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <TIM_Base_SetConfig+0x11c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01f      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <TIM_Base_SetConfig+0x120>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01b      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <TIM_Base_SetConfig+0x124>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d017      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <TIM_Base_SetConfig+0x128>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <TIM_Base_SetConfig+0x12c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00f      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <TIM_Base_SetConfig+0x130>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <TIM_Base_SetConfig+0x134>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <TIM_Base_SetConfig+0x138>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <TIM_Base_SetConfig+0x13c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <TIM_Base_SetConfig+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_Base_SetConfig+0xf8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <TIM_Base_SetConfig+0x124>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40010400 	.word	0x40010400
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800
 8002ab8:	40001800 	.word	0x40001800
 8002abc:	40001c00 	.word	0x40001c00
 8002ac0:	40002000 	.word	0x40002000

08002ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f023 0201 	bic.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 0302 	bic.w	r3, r3, #2
 8002b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <TIM_OC1_SetConfig+0xd8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_OC1_SetConfig+0x64>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <TIM_OC1_SetConfig+0xdc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0308 	bic.w	r3, r3, #8
 8002b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <TIM_OC1_SetConfig+0xd8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d003      	beq.n	8002b52 <TIM_OC1_SetConfig+0x8e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <TIM_OC1_SetConfig+0xdc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d111      	bne.n	8002b76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	621a      	str	r2, [r3, #32]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0210 	bic.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0320 	bic.w	r3, r3, #32
 8002bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <TIM_OC2_SetConfig+0xe4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <TIM_OC2_SetConfig+0x68>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <TIM_OC2_SetConfig+0xe8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10d      	bne.n	8002c28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <TIM_OC2_SetConfig+0xe4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_OC2_SetConfig+0x94>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <TIM_OC2_SetConfig+0xe8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d113      	bne.n	8002c60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40010400 	.word	0x40010400

08002c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <TIM_OC3_SetConfig+0xe0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_OC3_SetConfig+0x66>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <TIM_OC3_SetConfig+0xe4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10d      	bne.n	8002d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <TIM_OC3_SetConfig+0xe0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_OC3_SetConfig+0x92>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <TIM_OC3_SetConfig+0xe4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40010400 	.word	0x40010400

08002d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	031b      	lsls	r3, r3, #12
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <TIM_OC4_SetConfig+0xa4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_OC4_SetConfig+0x68>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <TIM_OC4_SetConfig+0xa8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d109      	bne.n	8002df4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40010400 	.word	0x40010400

08002e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2201      	movs	r2, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1a      	ldr	r2, [r3, #32]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e05a      	b.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d01d      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d018      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10c      	bne.n	8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00
 8002f5c:	40010400 	.word	0x40010400
 8002f60:	40014000 	.word	0x40014000
 8002f64:	40001800 	.word	0x40001800

08002f68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e03d      	b.n	8003000 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e03f      	b.n	80030c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe f8a0 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f9cb 	bl	8003414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800308c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800309c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08a      	sub	sp, #40	; 0x28
 80030d2:	af02      	add	r7, sp, #8
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d17c      	bne.n	80031e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_UART_Transmit+0x2c>
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e075      	b.n	80031ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_UART_Transmit+0x3e>
 8003108:	2302      	movs	r3, #2
 800310a:	e06e      	b.n	80031ea <HAL_UART_Transmit+0x11c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2221      	movs	r2, #33	; 0x21
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003122:	f7fe f915 	bl	8001350 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313c:	d108      	bne.n	8003150 <HAL_UART_Transmit+0x82>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e003      	b.n	8003158 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003160:	e02a      	b.n	80031b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8e2 	bl	8003336 <UART_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e036      	b.n	80031ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	3302      	adds	r3, #2
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e007      	b.n	80031aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1cf      	bne.n	8003162 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2140      	movs	r1, #64	; 0x40
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8b2 	bl	8003336 <UART_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e006      	b.n	80031ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08a      	sub	sp, #40	; 0x28
 80031f6:	af02      	add	r7, sp, #8
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b20      	cmp	r3, #32
 8003210:	f040 808c 	bne.w	800332c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_UART_Receive+0x2e>
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e084      	b.n	800332e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_UART_Receive+0x40>
 800322e:	2302      	movs	r3, #2
 8003230:	e07d      	b.n	800332e <HAL_UART_Receive+0x13c>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2222      	movs	r2, #34	; 0x22
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324e:	f7fe f87f 	bl	8001350 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d108      	bne.n	800327c <HAL_UART_Receive+0x8a>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e003      	b.n	8003284 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800328c:	e043      	b.n	8003316 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2120      	movs	r1, #32
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f84c 	bl	8003336 <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e042      	b.n	800332e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	3302      	adds	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e01f      	b.n	8003308 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d0:	d007      	beq.n	80032e2 <HAL_UART_Receive+0xf0>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <HAL_UART_Receive+0xfe>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e008      	b.n	8003302 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1b6      	bne.n	800328e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b090      	sub	sp, #64	; 0x40
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	e050      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d04c      	beq.n	80033ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0x30>
 8003356:	f7fd fffb 	bl	8001350 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003362:	429a      	cmp	r2, r3
 8003364:	d241      	bcs.n	80033ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003386:	637a      	str	r2, [r7, #52]	; 0x34
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800338c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	613b      	str	r3, [r7, #16]
   return(result);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ba:	623a      	str	r2, [r7, #32]
 80033bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	69f9      	ldr	r1, [r7, #28]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e5      	bne.n	800339a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e00f      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d09f      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3740      	adds	r7, #64	; 0x40
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003418:	b0c0      	sub	sp, #256	; 0x100
 800341a:	af00      	add	r7, sp, #0
 800341c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	68d9      	ldr	r1, [r3, #12]
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	ea40 0301 	orr.w	r3, r0, r1
 800343c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	431a      	orrs	r2, r3
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	431a      	orrs	r2, r3
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800346c:	f021 010c 	bic.w	r1, r1, #12
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800347a:	430b      	orrs	r3, r1
 800347c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	6999      	ldr	r1, [r3, #24]
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	ea40 0301 	orr.w	r3, r0, r1
 800349a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <UART_SetConfig+0x2cc>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d005      	beq.n	80034b4 <UART_SetConfig+0xa0>
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b8d      	ldr	r3, [pc, #564]	; (80036e4 <UART_SetConfig+0x2d0>)
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d104      	bne.n	80034be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034b4:	f7fe fe5a 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 80034b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034bc:	e003      	b.n	80034c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034be:	f7fe fe41 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 80034c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d0:	f040 810c 	bne.w	80036ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	1891      	adds	r1, r2, r2
 80034ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ee:	415b      	adcs	r3, r3
 80034f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034f6:	4621      	mov	r1, r4
 80034f8:	eb12 0801 	adds.w	r8, r2, r1
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb43 0901 	adc.w	r9, r3, r1
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003516:	4690      	mov	r8, r2
 8003518:	4699      	mov	r9, r3
 800351a:	4623      	mov	r3, r4
 800351c:	eb18 0303 	adds.w	r3, r8, r3
 8003520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003524:	462b      	mov	r3, r5
 8003526:	eb49 0303 	adc.w	r3, r9, r3
 800352a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800353a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800353e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003542:	460b      	mov	r3, r1
 8003544:	18db      	adds	r3, r3, r3
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
 8003548:	4613      	mov	r3, r2
 800354a:	eb42 0303 	adc.w	r3, r2, r3
 800354e:	657b      	str	r3, [r7, #84]	; 0x54
 8003550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003558:	f7fc fea2 	bl	80002a0 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <UART_SetConfig+0x2d4>)
 8003562:	fba3 2302 	umull	r2, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	011c      	lsls	r4, r3, #4
 800356a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	1891      	adds	r1, r2, r2
 8003582:	64b9      	str	r1, [r7, #72]	; 0x48
 8003584:	415b      	adcs	r3, r3
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800358c:	4641      	mov	r1, r8
 800358e:	eb12 0a01 	adds.w	sl, r2, r1
 8003592:	4649      	mov	r1, r9
 8003594:	eb43 0b01 	adc.w	fp, r3, r1
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035ac:	4692      	mov	sl, r2
 80035ae:	469b      	mov	fp, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	eb1a 0303 	adds.w	r3, sl, r3
 80035b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ba:	464b      	mov	r3, r9
 80035bc:	eb4b 0303 	adc.w	r3, fp, r3
 80035c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035d8:	460b      	mov	r3, r1
 80035da:	18db      	adds	r3, r3, r3
 80035dc:	643b      	str	r3, [r7, #64]	; 0x40
 80035de:	4613      	mov	r3, r2
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
 80035e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035ee:	f7fc fe57 	bl	80002a0 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <UART_SetConfig+0x2d4>)
 80035fa:	fba3 2301 	umull	r2, r3, r3, r1
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2264      	movs	r2, #100	; 0x64
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	1acb      	subs	r3, r1, r3
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <UART_SetConfig+0x2d4>)
 8003610:	fba3 2302 	umull	r2, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800361c:	441c      	add	r4, r3
 800361e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800362c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003630:	4642      	mov	r2, r8
 8003632:	464b      	mov	r3, r9
 8003634:	1891      	adds	r1, r2, r2
 8003636:	63b9      	str	r1, [r7, #56]	; 0x38
 8003638:	415b      	adcs	r3, r3
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003640:	4641      	mov	r1, r8
 8003642:	1851      	adds	r1, r2, r1
 8003644:	6339      	str	r1, [r7, #48]	; 0x30
 8003646:	4649      	mov	r1, r9
 8003648:	414b      	adcs	r3, r1
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003658:	4659      	mov	r1, fp
 800365a:	00cb      	lsls	r3, r1, #3
 800365c:	4651      	mov	r1, sl
 800365e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003662:	4651      	mov	r1, sl
 8003664:	00ca      	lsls	r2, r1, #3
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	4603      	mov	r3, r0
 800366c:	4642      	mov	r2, r8
 800366e:	189b      	adds	r3, r3, r2
 8003670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003674:	464b      	mov	r3, r9
 8003676:	460a      	mov	r2, r1
 8003678:	eb42 0303 	adc.w	r3, r2, r3
 800367c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800368c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003694:	460b      	mov	r3, r1
 8003696:	18db      	adds	r3, r3, r3
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
 800369a:	4613      	mov	r3, r2
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036aa:	f7fc fdf9 	bl	80002a0 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <UART_SetConfig+0x2d4>)
 80036b4:	fba3 1302 	umull	r1, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	3332      	adds	r3, #50	; 0x32
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <UART_SetConfig+0x2d4>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4422      	add	r2, r4
 80036da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036dc:	e105      	b.n	80038ea <UART_SetConfig+0x4d6>
 80036de:	bf00      	nop
 80036e0:	40011000 	.word	0x40011000
 80036e4:	40011400 	.word	0x40011400
 80036e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036fe:	4642      	mov	r2, r8
 8003700:	464b      	mov	r3, r9
 8003702:	1891      	adds	r1, r2, r2
 8003704:	6239      	str	r1, [r7, #32]
 8003706:	415b      	adcs	r3, r3
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370e:	4641      	mov	r1, r8
 8003710:	1854      	adds	r4, r2, r1
 8003712:	4649      	mov	r1, r9
 8003714:	eb43 0501 	adc.w	r5, r3, r1
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003734:	464b      	mov	r3, r9
 8003736:	eb45 0303 	adc.w	r3, r5, r3
 800373a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800374a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800375a:	4629      	mov	r1, r5
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003764:	4621      	mov	r1, r4
 8003766:	008a      	lsls	r2, r1, #2
 8003768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800376c:	f7fc fd98 	bl	80002a0 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4b60      	ldr	r3, [pc, #384]	; (80038f8 <UART_SetConfig+0x4e4>)
 8003776:	fba3 2302 	umull	r2, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	011c      	lsls	r4, r3, #4
 800377e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800378c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	1891      	adds	r1, r2, r2
 8003796:	61b9      	str	r1, [r7, #24]
 8003798:	415b      	adcs	r3, r3
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a0:	4641      	mov	r1, r8
 80037a2:	1851      	adds	r1, r2, r1
 80037a4:	6139      	str	r1, [r7, #16]
 80037a6:	4649      	mov	r1, r9
 80037a8:	414b      	adcs	r3, r1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b8:	4659      	mov	r1, fp
 80037ba:	00cb      	lsls	r3, r1, #3
 80037bc:	4651      	mov	r1, sl
 80037be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c2:	4651      	mov	r1, sl
 80037c4:	00ca      	lsls	r2, r1, #3
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	4642      	mov	r2, r8
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037d4:	464b      	mov	r3, r9
 80037d6:	460a      	mov	r2, r1
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037f8:	4649      	mov	r1, r9
 80037fa:	008b      	lsls	r3, r1, #2
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003802:	4641      	mov	r1, r8
 8003804:	008a      	lsls	r2, r1, #2
 8003806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800380a:	f7fc fd49 	bl	80002a0 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <UART_SetConfig+0x4e4>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	; 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	3332      	adds	r3, #50	; 0x32
 8003826:	4a34      	ldr	r2, [pc, #208]	; (80038f8 <UART_SetConfig+0x4e4>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003832:	441c      	add	r4, r3
 8003834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003838:	2200      	movs	r2, #0
 800383a:	673b      	str	r3, [r7, #112]	; 0x70
 800383c:	677a      	str	r2, [r7, #116]	; 0x74
 800383e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003842:	4642      	mov	r2, r8
 8003844:	464b      	mov	r3, r9
 8003846:	1891      	adds	r1, r2, r2
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	415b      	adcs	r3, r3
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003852:	4641      	mov	r1, r8
 8003854:	1851      	adds	r1, r2, r1
 8003856:	6039      	str	r1, [r7, #0]
 8003858:	4649      	mov	r1, r9
 800385a:	414b      	adcs	r3, r1
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800386a:	4659      	mov	r1, fp
 800386c:	00cb      	lsls	r3, r1, #3
 800386e:	4651      	mov	r1, sl
 8003870:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003874:	4651      	mov	r1, sl
 8003876:	00ca      	lsls	r2, r1, #3
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	4603      	mov	r3, r0
 800387e:	4642      	mov	r2, r8
 8003880:	189b      	adds	r3, r3, r2
 8003882:	66bb      	str	r3, [r7, #104]	; 0x68
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	663b      	str	r3, [r7, #96]	; 0x60
 8003898:	667a      	str	r2, [r7, #100]	; 0x64
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038a6:	4649      	mov	r1, r9
 80038a8:	008b      	lsls	r3, r1, #2
 80038aa:	4641      	mov	r1, r8
 80038ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b0:	4641      	mov	r1, r8
 80038b2:	008a      	lsls	r2, r1, #2
 80038b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038b8:	f7fc fcf2 	bl	80002a0 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <UART_SetConfig+0x4e4>)
 80038c2:	fba3 1302 	umull	r1, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2164      	movs	r1, #100	; 0x64
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <UART_SetConfig+0x4e4>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4422      	add	r2, r4
 80038e8:	609a      	str	r2, [r3, #8]
}
 80038ea:	bf00      	nop
 80038ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	51eb851f 	.word	0x51eb851f

080038fc <__errno>:
 80038fc:	4b01      	ldr	r3, [pc, #4]	; (8003904 <__errno+0x8>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000120 	.word	0x20000120

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4d0d      	ldr	r5, [pc, #52]	; (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2600      	movs	r6, #0
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4d0b      	ldr	r5, [pc, #44]	; (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	; (800394c <__libc_init_array+0x44>)
 800391c:	f000 fe2e 	bl	800457c <_init>
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2600      	movs	r6, #0
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	08004af0 	.word	0x08004af0
 8003944:	08004af0 	.word	0x08004af0
 8003948:	08004af0 	.word	0x08004af0
 800394c:	08004af4 	.word	0x08004af4

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <siscanf>:
 8003960:	b40e      	push	{r1, r2, r3}
 8003962:	b510      	push	{r4, lr}
 8003964:	b09f      	sub	sp, #124	; 0x7c
 8003966:	ac21      	add	r4, sp, #132	; 0x84
 8003968:	f44f 7101 	mov.w	r1, #516	; 0x204
 800396c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003970:	9201      	str	r2, [sp, #4]
 8003972:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003976:	9004      	str	r0, [sp, #16]
 8003978:	9008      	str	r0, [sp, #32]
 800397a:	f7fc fc39 	bl	80001f0 <strlen>
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <siscanf+0x50>)
 8003980:	9005      	str	r0, [sp, #20]
 8003982:	9009      	str	r0, [sp, #36]	; 0x24
 8003984:	930d      	str	r3, [sp, #52]	; 0x34
 8003986:	480b      	ldr	r0, [pc, #44]	; (80039b4 <siscanf+0x54>)
 8003988:	9a01      	ldr	r2, [sp, #4]
 800398a:	6800      	ldr	r0, [r0, #0]
 800398c:	9403      	str	r4, [sp, #12]
 800398e:	2300      	movs	r3, #0
 8003990:	9311      	str	r3, [sp, #68]	; 0x44
 8003992:	9316      	str	r3, [sp, #88]	; 0x58
 8003994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003998:	f8ad 301e 	strh.w	r3, [sp, #30]
 800399c:	a904      	add	r1, sp, #16
 800399e:	4623      	mov	r3, r4
 80039a0:	f000 f874 	bl	8003a8c <__ssvfiscanf_r>
 80039a4:	b01f      	add	sp, #124	; 0x7c
 80039a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039aa:	b003      	add	sp, #12
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	080039b9 	.word	0x080039b9
 80039b4:	20000120 	.word	0x20000120

080039b8 <__seofread>:
 80039b8:	2000      	movs	r0, #0
 80039ba:	4770      	bx	lr

080039bc <strchr>:
 80039bc:	b2c9      	uxtb	r1, r1
 80039be:	4603      	mov	r3, r0
 80039c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c4:	b11a      	cbz	r2, 80039ce <strchr+0x12>
 80039c6:	428a      	cmp	r2, r1
 80039c8:	d1f9      	bne.n	80039be <strchr+0x2>
 80039ca:	4618      	mov	r0, r3
 80039cc:	4770      	bx	lr
 80039ce:	2900      	cmp	r1, #0
 80039d0:	bf18      	it	ne
 80039d2:	2300      	movne	r3, #0
 80039d4:	e7f9      	b.n	80039ca <strchr+0xe>

080039d6 <_sungetc_r>:
 80039d6:	b538      	push	{r3, r4, r5, lr}
 80039d8:	1c4b      	adds	r3, r1, #1
 80039da:	4614      	mov	r4, r2
 80039dc:	d103      	bne.n	80039e6 <_sungetc_r+0x10>
 80039de:	f04f 35ff 	mov.w	r5, #4294967295
 80039e2:	4628      	mov	r0, r5
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
 80039e6:	8993      	ldrh	r3, [r2, #12]
 80039e8:	f023 0320 	bic.w	r3, r3, #32
 80039ec:	8193      	strh	r3, [r2, #12]
 80039ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	b2cd      	uxtb	r5, r1
 80039f4:	b18b      	cbz	r3, 8003a1a <_sungetc_r+0x44>
 80039f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039f8:	4293      	cmp	r3, r2
 80039fa:	dd08      	ble.n	8003a0e <_sungetc_r+0x38>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	1e5a      	subs	r2, r3, #1
 8003a00:	6022      	str	r2, [r4, #0]
 8003a02:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	6063      	str	r3, [r4, #4]
 8003a0c:	e7e9      	b.n	80039e2 <_sungetc_r+0xc>
 8003a0e:	4621      	mov	r1, r4
 8003a10:	f000 fc36 	bl	8004280 <__submore>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d0f1      	beq.n	80039fc <_sungetc_r+0x26>
 8003a18:	e7e1      	b.n	80039de <_sungetc_r+0x8>
 8003a1a:	6921      	ldr	r1, [r4, #16]
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	b151      	cbz	r1, 8003a36 <_sungetc_r+0x60>
 8003a20:	4299      	cmp	r1, r3
 8003a22:	d208      	bcs.n	8003a36 <_sungetc_r+0x60>
 8003a24:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003a28:	42a9      	cmp	r1, r5
 8003a2a:	d104      	bne.n	8003a36 <_sungetc_r+0x60>
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	3201      	adds	r2, #1
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	6062      	str	r2, [r4, #4]
 8003a34:	e7d5      	b.n	80039e2 <_sungetc_r+0xc>
 8003a36:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8003a40:	2303      	movs	r3, #3
 8003a42:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a44:	4623      	mov	r3, r4
 8003a46:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e7dc      	b.n	8003a0a <_sungetc_r+0x34>

08003a50 <__ssrefill_r>:
 8003a50:	b510      	push	{r4, lr}
 8003a52:	460c      	mov	r4, r1
 8003a54:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a56:	b169      	cbz	r1, 8003a74 <__ssrefill_r+0x24>
 8003a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	d001      	beq.n	8003a64 <__ssrefill_r+0x14>
 8003a60:	f000 fc58 	bl	8004314 <_free_r>
 8003a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a66:	6063      	str	r3, [r4, #4]
 8003a68:	2000      	movs	r0, #0
 8003a6a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a6c:	b113      	cbz	r3, 8003a74 <__ssrefill_r+0x24>
 8003a6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	bd10      	pop	{r4, pc}
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6063      	str	r3, [r4, #4]
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	e7f3      	b.n	8003a72 <__ssrefill_r+0x22>
	...

08003a8c <__ssvfiscanf_r>:
 8003a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	460c      	mov	r4, r1
 8003a92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003a96:	2100      	movs	r1, #0
 8003a98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003a9c:	49a6      	ldr	r1, [pc, #664]	; (8003d38 <__ssvfiscanf_r+0x2ac>)
 8003a9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8003aa0:	f10d 0804 	add.w	r8, sp, #4
 8003aa4:	49a5      	ldr	r1, [pc, #660]	; (8003d3c <__ssvfiscanf_r+0x2b0>)
 8003aa6:	4fa6      	ldr	r7, [pc, #664]	; (8003d40 <__ssvfiscanf_r+0x2b4>)
 8003aa8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003d44 <__ssvfiscanf_r+0x2b8>
 8003aac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	91a1      	str	r1, [sp, #644]	; 0x284
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	7813      	ldrb	r3, [r2, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 815a 	beq.w	8003d72 <__ssvfiscanf_r+0x2e6>
 8003abe:	5dd9      	ldrb	r1, [r3, r7]
 8003ac0:	f011 0108 	ands.w	r1, r1, #8
 8003ac4:	f102 0501 	add.w	r5, r2, #1
 8003ac8:	d019      	beq.n	8003afe <__ssvfiscanf_r+0x72>
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dd0f      	ble.n	8003af0 <__ssvfiscanf_r+0x64>
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	5cba      	ldrb	r2, [r7, r2]
 8003ad6:	0712      	lsls	r2, r2, #28
 8003ad8:	d401      	bmi.n	8003ade <__ssvfiscanf_r+0x52>
 8003ada:	462a      	mov	r2, r5
 8003adc:	e7eb      	b.n	8003ab6 <__ssvfiscanf_r+0x2a>
 8003ade:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ae0:	3201      	adds	r2, #1
 8003ae2:	9245      	str	r2, [sp, #276]	; 0x114
 8003ae4:	6862      	ldr	r2, [r4, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	6062      	str	r2, [r4, #4]
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	e7ec      	b.n	8003aca <__ssvfiscanf_r+0x3e>
 8003af0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003af2:	4621      	mov	r1, r4
 8003af4:	4630      	mov	r0, r6
 8003af6:	4798      	blx	r3
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d0e9      	beq.n	8003ad0 <__ssvfiscanf_r+0x44>
 8003afc:	e7ed      	b.n	8003ada <__ssvfiscanf_r+0x4e>
 8003afe:	2b25      	cmp	r3, #37	; 0x25
 8003b00:	d012      	beq.n	8003b28 <__ssvfiscanf_r+0x9c>
 8003b02:	469a      	mov	sl, r3
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f340 8091 	ble.w	8003c2e <__ssvfiscanf_r+0x1a2>
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	7813      	ldrb	r3, [r2, #0]
 8003b10:	4553      	cmp	r3, sl
 8003b12:	f040 812e 	bne.w	8003d72 <__ssvfiscanf_r+0x2e6>
 8003b16:	6863      	ldr	r3, [r4, #4]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003b1e:	3201      	adds	r2, #1
 8003b20:	3301      	adds	r3, #1
 8003b22:	6022      	str	r2, [r4, #0]
 8003b24:	9345      	str	r3, [sp, #276]	; 0x114
 8003b26:	e7d8      	b.n	8003ada <__ssvfiscanf_r+0x4e>
 8003b28:	9141      	str	r1, [sp, #260]	; 0x104
 8003b2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8003b2c:	7853      	ldrb	r3, [r2, #1]
 8003b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b30:	bf02      	ittt	eq
 8003b32:	2310      	moveq	r3, #16
 8003b34:	1c95      	addeq	r5, r2, #2
 8003b36:	9341      	streq	r3, [sp, #260]	; 0x104
 8003b38:	220a      	movs	r2, #10
 8003b3a:	46aa      	mov	sl, r5
 8003b3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003b40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003b44:	2b09      	cmp	r3, #9
 8003b46:	d91d      	bls.n	8003b84 <__ssvfiscanf_r+0xf8>
 8003b48:	487e      	ldr	r0, [pc, #504]	; (8003d44 <__ssvfiscanf_r+0x2b8>)
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f7fc fb58 	bl	8000200 <memchr>
 8003b50:	b140      	cbz	r0, 8003b64 <__ssvfiscanf_r+0xd8>
 8003b52:	2301      	movs	r3, #1
 8003b54:	eba0 0009 	sub.w	r0, r0, r9
 8003b58:	fa03 f000 	lsl.w	r0, r3, r0
 8003b5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b5e:	4318      	orrs	r0, r3
 8003b60:	9041      	str	r0, [sp, #260]	; 0x104
 8003b62:	4655      	mov	r5, sl
 8003b64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b68:	2b78      	cmp	r3, #120	; 0x78
 8003b6a:	d806      	bhi.n	8003b7a <__ssvfiscanf_r+0xee>
 8003b6c:	2b57      	cmp	r3, #87	; 0x57
 8003b6e:	d810      	bhi.n	8003b92 <__ssvfiscanf_r+0x106>
 8003b70:	2b25      	cmp	r3, #37	; 0x25
 8003b72:	d0c6      	beq.n	8003b02 <__ssvfiscanf_r+0x76>
 8003b74:	d856      	bhi.n	8003c24 <__ssvfiscanf_r+0x198>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d064      	beq.n	8003c44 <__ssvfiscanf_r+0x1b8>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b7e:	230a      	movs	r3, #10
 8003b80:	9342      	str	r3, [sp, #264]	; 0x108
 8003b82:	e071      	b.n	8003c68 <__ssvfiscanf_r+0x1dc>
 8003b84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003b86:	fb02 1103 	mla	r1, r2, r3, r1
 8003b8a:	3930      	subs	r1, #48	; 0x30
 8003b8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8003b8e:	4655      	mov	r5, sl
 8003b90:	e7d3      	b.n	8003b3a <__ssvfiscanf_r+0xae>
 8003b92:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003b96:	2a20      	cmp	r2, #32
 8003b98:	d8ef      	bhi.n	8003b7a <__ssvfiscanf_r+0xee>
 8003b9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ba0 <__ssvfiscanf_r+0x114>)
 8003b9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003ba0:	08003c53 	.word	0x08003c53
 8003ba4:	08003b7b 	.word	0x08003b7b
 8003ba8:	08003b7b 	.word	0x08003b7b
 8003bac:	08003cb1 	.word	0x08003cb1
 8003bb0:	08003b7b 	.word	0x08003b7b
 8003bb4:	08003b7b 	.word	0x08003b7b
 8003bb8:	08003b7b 	.word	0x08003b7b
 8003bbc:	08003b7b 	.word	0x08003b7b
 8003bc0:	08003b7b 	.word	0x08003b7b
 8003bc4:	08003b7b 	.word	0x08003b7b
 8003bc8:	08003b7b 	.word	0x08003b7b
 8003bcc:	08003cc7 	.word	0x08003cc7
 8003bd0:	08003c9d 	.word	0x08003c9d
 8003bd4:	08003c2b 	.word	0x08003c2b
 8003bd8:	08003c2b 	.word	0x08003c2b
 8003bdc:	08003c2b 	.word	0x08003c2b
 8003be0:	08003b7b 	.word	0x08003b7b
 8003be4:	08003ca1 	.word	0x08003ca1
 8003be8:	08003b7b 	.word	0x08003b7b
 8003bec:	08003b7b 	.word	0x08003b7b
 8003bf0:	08003b7b 	.word	0x08003b7b
 8003bf4:	08003b7b 	.word	0x08003b7b
 8003bf8:	08003cd7 	.word	0x08003cd7
 8003bfc:	08003ca9 	.word	0x08003ca9
 8003c00:	08003c4b 	.word	0x08003c4b
 8003c04:	08003b7b 	.word	0x08003b7b
 8003c08:	08003b7b 	.word	0x08003b7b
 8003c0c:	08003cd3 	.word	0x08003cd3
 8003c10:	08003b7b 	.word	0x08003b7b
 8003c14:	08003c9d 	.word	0x08003c9d
 8003c18:	08003b7b 	.word	0x08003b7b
 8003c1c:	08003b7b 	.word	0x08003b7b
 8003c20:	08003c53 	.word	0x08003c53
 8003c24:	3b45      	subs	r3, #69	; 0x45
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d8a7      	bhi.n	8003b7a <__ssvfiscanf_r+0xee>
 8003c2a:	2305      	movs	r3, #5
 8003c2c:	e01b      	b.n	8003c66 <__ssvfiscanf_r+0x1da>
 8003c2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c30:	4621      	mov	r1, r4
 8003c32:	4630      	mov	r0, r6
 8003c34:	4798      	blx	r3
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f43f af68 	beq.w	8003b0c <__ssvfiscanf_r+0x80>
 8003c3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	f040 808d 	bne.w	8003d5e <__ssvfiscanf_r+0x2d2>
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	e08f      	b.n	8003d6a <__ssvfiscanf_r+0x2de>
 8003c4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c4c:	f042 0220 	orr.w	r2, r2, #32
 8003c50:	9241      	str	r2, [sp, #260]	; 0x104
 8003c52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	9241      	str	r2, [sp, #260]	; 0x104
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	2b6f      	cmp	r3, #111	; 0x6f
 8003c5e:	9242      	str	r2, [sp, #264]	; 0x108
 8003c60:	bf34      	ite	cc
 8003c62:	2303      	movcc	r3, #3
 8003c64:	2304      	movcs	r3, #4
 8003c66:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	dd42      	ble.n	8003cf4 <__ssvfiscanf_r+0x268>
 8003c6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c70:	0659      	lsls	r1, r3, #25
 8003c72:	d404      	bmi.n	8003c7e <__ssvfiscanf_r+0x1f2>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	5cba      	ldrb	r2, [r7, r2]
 8003c7a:	0712      	lsls	r2, r2, #28
 8003c7c:	d441      	bmi.n	8003d02 <__ssvfiscanf_r+0x276>
 8003c7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	dc50      	bgt.n	8003d26 <__ssvfiscanf_r+0x29a>
 8003c84:	466b      	mov	r3, sp
 8003c86:	4622      	mov	r2, r4
 8003c88:	a941      	add	r1, sp, #260	; 0x104
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f000 f876 	bl	8003d7c <_scanf_chars>
 8003c90:	2801      	cmp	r0, #1
 8003c92:	d06e      	beq.n	8003d72 <__ssvfiscanf_r+0x2e6>
 8003c94:	2802      	cmp	r0, #2
 8003c96:	f47f af20 	bne.w	8003ada <__ssvfiscanf_r+0x4e>
 8003c9a:	e7cf      	b.n	8003c3c <__ssvfiscanf_r+0x1b0>
 8003c9c:	220a      	movs	r2, #10
 8003c9e:	e7dd      	b.n	8003c5c <__ssvfiscanf_r+0x1d0>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9342      	str	r3, [sp, #264]	; 0x108
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e7de      	b.n	8003c66 <__ssvfiscanf_r+0x1da>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	9342      	str	r3, [sp, #264]	; 0x108
 8003cac:	2304      	movs	r3, #4
 8003cae:	e7da      	b.n	8003c66 <__ssvfiscanf_r+0x1da>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f000 f9b4 	bl	8004020 <__sccl>
 8003cb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbe:	9341      	str	r3, [sp, #260]	; 0x104
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e7cf      	b.n	8003c66 <__ssvfiscanf_r+0x1da>
 8003cc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ccc:	9341      	str	r3, [sp, #260]	; 0x104
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e7c9      	b.n	8003c66 <__ssvfiscanf_r+0x1da>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e7c7      	b.n	8003c66 <__ssvfiscanf_r+0x1da>
 8003cd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003cd8:	06c3      	lsls	r3, r0, #27
 8003cda:	f53f aefe 	bmi.w	8003ada <__ssvfiscanf_r+0x4e>
 8003cde:	9b00      	ldr	r3, [sp, #0]
 8003ce0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ce2:	1d19      	adds	r1, r3, #4
 8003ce4:	9100      	str	r1, [sp, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f010 0f01 	tst.w	r0, #1
 8003cec:	bf14      	ite	ne
 8003cee:	801a      	strhne	r2, [r3, #0]
 8003cf0:	601a      	streq	r2, [r3, #0]
 8003cf2:	e6f2      	b.n	8003ada <__ssvfiscanf_r+0x4e>
 8003cf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	4798      	blx	r3
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d0b6      	beq.n	8003c6e <__ssvfiscanf_r+0x1e2>
 8003d00:	e79c      	b.n	8003c3c <__ssvfiscanf_r+0x1b0>
 8003d02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d04:	3201      	adds	r2, #1
 8003d06:	9245      	str	r2, [sp, #276]	; 0x114
 8003d08:	6862      	ldr	r2, [r4, #4]
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	2a00      	cmp	r2, #0
 8003d0e:	6062      	str	r2, [r4, #4]
 8003d10:	dd02      	ble.n	8003d18 <__ssvfiscanf_r+0x28c>
 8003d12:	3301      	adds	r3, #1
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	e7ad      	b.n	8003c74 <__ssvfiscanf_r+0x1e8>
 8003d18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4798      	blx	r3
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0a7      	beq.n	8003c74 <__ssvfiscanf_r+0x1e8>
 8003d24:	e78a      	b.n	8003c3c <__ssvfiscanf_r+0x1b0>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	dc0e      	bgt.n	8003d48 <__ssvfiscanf_r+0x2bc>
 8003d2a:	466b      	mov	r3, sp
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	a941      	add	r1, sp, #260	; 0x104
 8003d30:	4630      	mov	r0, r6
 8003d32:	f000 f87d 	bl	8003e30 <_scanf_i>
 8003d36:	e7ab      	b.n	8003c90 <__ssvfiscanf_r+0x204>
 8003d38:	080039d7 	.word	0x080039d7
 8003d3c:	08003a51 	.word	0x08003a51
 8003d40:	08004988 	.word	0x08004988
 8003d44:	08004968 	.word	0x08004968
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <__ssvfiscanf_r+0x2ec>)
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f43f aec5 	beq.w	8003ada <__ssvfiscanf_r+0x4e>
 8003d50:	466b      	mov	r3, sp
 8003d52:	4622      	mov	r2, r4
 8003d54:	a941      	add	r1, sp, #260	; 0x104
 8003d56:	4630      	mov	r0, r6
 8003d58:	f3af 8000 	nop.w
 8003d5c:	e798      	b.n	8003c90 <__ssvfiscanf_r+0x204>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d64:	bf18      	it	ne
 8003d66:	f04f 30ff 	movne.w	r0, #4294967295
 8003d6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d74:	e7f9      	b.n	8003d6a <__ssvfiscanf_r+0x2de>
 8003d76:	bf00      	nop
 8003d78:	00000000 	.word	0x00000000

08003d7c <_scanf_chars>:
 8003d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d80:	4615      	mov	r5, r2
 8003d82:	688a      	ldr	r2, [r1, #8]
 8003d84:	4680      	mov	r8, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	b932      	cbnz	r2, 8003d98 <_scanf_chars+0x1c>
 8003d8a:	698a      	ldr	r2, [r1, #24]
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2201      	moveq	r2, #1
 8003d92:	f04f 32ff 	movne.w	r2, #4294967295
 8003d96:	608a      	str	r2, [r1, #8]
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003e2c <_scanf_chars+0xb0>
 8003d9e:	06d1      	lsls	r1, r2, #27
 8003da0:	bf5f      	itttt	pl
 8003da2:	681a      	ldrpl	r2, [r3, #0]
 8003da4:	1d11      	addpl	r1, r2, #4
 8003da6:	6019      	strpl	r1, [r3, #0]
 8003da8:	6816      	ldrpl	r6, [r2, #0]
 8003daa:	2700      	movs	r7, #0
 8003dac:	69a0      	ldr	r0, [r4, #24]
 8003dae:	b188      	cbz	r0, 8003dd4 <_scanf_chars+0x58>
 8003db0:	2801      	cmp	r0, #1
 8003db2:	d107      	bne.n	8003dc4 <_scanf_chars+0x48>
 8003db4:	682a      	ldr	r2, [r5, #0]
 8003db6:	7811      	ldrb	r1, [r2, #0]
 8003db8:	6962      	ldr	r2, [r4, #20]
 8003dba:	5c52      	ldrb	r2, [r2, r1]
 8003dbc:	b952      	cbnz	r2, 8003dd4 <_scanf_chars+0x58>
 8003dbe:	2f00      	cmp	r7, #0
 8003dc0:	d031      	beq.n	8003e26 <_scanf_chars+0xaa>
 8003dc2:	e022      	b.n	8003e0a <_scanf_chars+0x8e>
 8003dc4:	2802      	cmp	r0, #2
 8003dc6:	d120      	bne.n	8003e0a <_scanf_chars+0x8e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003dd0:	071b      	lsls	r3, r3, #28
 8003dd2:	d41a      	bmi.n	8003e0a <_scanf_chars+0x8e>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	06da      	lsls	r2, r3, #27
 8003dd8:	bf5e      	ittt	pl
 8003dda:	682b      	ldrpl	r3, [r5, #0]
 8003ddc:	781b      	ldrbpl	r3, [r3, #0]
 8003dde:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003de2:	682a      	ldr	r2, [r5, #0]
 8003de4:	686b      	ldr	r3, [r5, #4]
 8003de6:	3201      	adds	r2, #1
 8003de8:	602a      	str	r2, [r5, #0]
 8003dea:	68a2      	ldr	r2, [r4, #8]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	3a01      	subs	r2, #1
 8003df0:	606b      	str	r3, [r5, #4]
 8003df2:	3701      	adds	r7, #1
 8003df4:	60a2      	str	r2, [r4, #8]
 8003df6:	b142      	cbz	r2, 8003e0a <_scanf_chars+0x8e>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	dcd7      	bgt.n	8003dac <_scanf_chars+0x30>
 8003dfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e00:	4629      	mov	r1, r5
 8003e02:	4640      	mov	r0, r8
 8003e04:	4798      	blx	r3
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d0d0      	beq.n	8003dac <_scanf_chars+0x30>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f013 0310 	ands.w	r3, r3, #16
 8003e10:	d105      	bne.n	8003e1e <_scanf_chars+0xa2>
 8003e12:	68e2      	ldr	r2, [r4, #12]
 8003e14:	3201      	adds	r2, #1
 8003e16:	60e2      	str	r2, [r4, #12]
 8003e18:	69a2      	ldr	r2, [r4, #24]
 8003e1a:	b102      	cbz	r2, 8003e1e <_scanf_chars+0xa2>
 8003e1c:	7033      	strb	r3, [r6, #0]
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	443b      	add	r3, r7
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	2000      	movs	r0, #0
 8003e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08004988 	.word	0x08004988

08003e30 <_scanf_i>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	4698      	mov	r8, r3
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <_scanf_i+0x1e0>)
 8003e38:	460c      	mov	r4, r1
 8003e3a:	4682      	mov	sl, r0
 8003e3c:	4616      	mov	r6, r2
 8003e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e42:	b087      	sub	sp, #28
 8003e44:	ab03      	add	r3, sp, #12
 8003e46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e4a:	4b72      	ldr	r3, [pc, #456]	; (8004014 <_scanf_i+0x1e4>)
 8003e4c:	69a1      	ldr	r1, [r4, #24]
 8003e4e:	4a72      	ldr	r2, [pc, #456]	; (8004018 <_scanf_i+0x1e8>)
 8003e50:	2903      	cmp	r1, #3
 8003e52:	bf18      	it	ne
 8003e54:	461a      	movne	r2, r3
 8003e56:	68a3      	ldr	r3, [r4, #8]
 8003e58:	9201      	str	r2, [sp, #4]
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003e60:	bf88      	it	hi
 8003e62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003e66:	4627      	mov	r7, r4
 8003e68:	bf82      	ittt	hi
 8003e6a:	eb03 0905 	addhi.w	r9, r3, r5
 8003e6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003e72:	60a3      	strhi	r3, [r4, #8]
 8003e74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003e78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003e7c:	bf98      	it	ls
 8003e7e:	f04f 0900 	movls.w	r9, #0
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	463d      	mov	r5, r7
 8003e86:	f04f 0b00 	mov.w	fp, #0
 8003e8a:	6831      	ldr	r1, [r6, #0]
 8003e8c:	ab03      	add	r3, sp, #12
 8003e8e:	7809      	ldrb	r1, [r1, #0]
 8003e90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f7fc f9b3 	bl	8000200 <memchr>
 8003e9a:	b328      	cbz	r0, 8003ee8 <_scanf_i+0xb8>
 8003e9c:	f1bb 0f01 	cmp.w	fp, #1
 8003ea0:	d159      	bne.n	8003f56 <_scanf_i+0x126>
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	b92a      	cbnz	r2, 8003eb2 <_scanf_i+0x82>
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	6063      	str	r3, [r4, #4]
 8003eb0:	6022      	str	r2, [r4, #0]
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003eb8:	6022      	str	r2, [r4, #0]
 8003eba:	68a2      	ldr	r2, [r4, #8]
 8003ebc:	1e51      	subs	r1, r2, #1
 8003ebe:	60a1      	str	r1, [r4, #8]
 8003ec0:	b192      	cbz	r2, 8003ee8 <_scanf_i+0xb8>
 8003ec2:	6832      	ldr	r2, [r6, #0]
 8003ec4:	1c51      	adds	r1, r2, #1
 8003ec6:	6031      	str	r1, [r6, #0]
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	f805 2b01 	strb.w	r2, [r5], #1
 8003ece:	6872      	ldr	r2, [r6, #4]
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	6072      	str	r2, [r6, #4]
 8003ed6:	dc07      	bgt.n	8003ee8 <_scanf_i+0xb8>
 8003ed8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003edc:	4631      	mov	r1, r6
 8003ede:	4650      	mov	r0, sl
 8003ee0:	4790      	blx	r2
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f040 8085 	bne.w	8003ff2 <_scanf_i+0x1c2>
 8003ee8:	f10b 0b01 	add.w	fp, fp, #1
 8003eec:	f1bb 0f03 	cmp.w	fp, #3
 8003ef0:	d1cb      	bne.n	8003e8a <_scanf_i+0x5a>
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	b90b      	cbnz	r3, 8003efa <_scanf_i+0xca>
 8003ef6:	230a      	movs	r3, #10
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	4947      	ldr	r1, [pc, #284]	; (800401c <_scanf_i+0x1ec>)
 8003efe:	6960      	ldr	r0, [r4, #20]
 8003f00:	1ac9      	subs	r1, r1, r3
 8003f02:	f000 f88d 	bl	8004020 <__sccl>
 8003f06:	f04f 0b00 	mov.w	fp, #0
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d03d      	beq.n	8003f8e <_scanf_i+0x15e>
 8003f12:	6831      	ldr	r1, [r6, #0]
 8003f14:	6960      	ldr	r0, [r4, #20]
 8003f16:	f891 c000 	ldrb.w	ip, [r1]
 8003f1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d035      	beq.n	8003f8e <_scanf_i+0x15e>
 8003f22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003f26:	d124      	bne.n	8003f72 <_scanf_i+0x142>
 8003f28:	0510      	lsls	r0, r2, #20
 8003f2a:	d522      	bpl.n	8003f72 <_scanf_i+0x142>
 8003f2c:	f10b 0b01 	add.w	fp, fp, #1
 8003f30:	f1b9 0f00 	cmp.w	r9, #0
 8003f34:	d003      	beq.n	8003f3e <_scanf_i+0x10e>
 8003f36:	3301      	adds	r3, #1
 8003f38:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f3c:	60a3      	str	r3, [r4, #8]
 8003f3e:	6873      	ldr	r3, [r6, #4]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	6073      	str	r3, [r6, #4]
 8003f46:	dd1b      	ble.n	8003f80 <_scanf_i+0x150>
 8003f48:	6833      	ldr	r3, [r6, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	6033      	str	r3, [r6, #0]
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	e7d9      	b.n	8003f0a <_scanf_i+0xda>
 8003f56:	f1bb 0f02 	cmp.w	fp, #2
 8003f5a:	d1ae      	bne.n	8003eba <_scanf_i+0x8a>
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003f62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003f66:	d1bf      	bne.n	8003ee8 <_scanf_i+0xb8>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f70:	e7a2      	b.n	8003eb8 <_scanf_i+0x88>
 8003f72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003f76:	6022      	str	r2, [r4, #0]
 8003f78:	780b      	ldrb	r3, [r1, #0]
 8003f7a:	f805 3b01 	strb.w	r3, [r5], #1
 8003f7e:	e7de      	b.n	8003f3e <_scanf_i+0x10e>
 8003f80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f84:	4631      	mov	r1, r6
 8003f86:	4650      	mov	r0, sl
 8003f88:	4798      	blx	r3
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d0df      	beq.n	8003f4e <_scanf_i+0x11e>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	05db      	lsls	r3, r3, #23
 8003f92:	d50d      	bpl.n	8003fb0 <_scanf_i+0x180>
 8003f94:	42bd      	cmp	r5, r7
 8003f96:	d909      	bls.n	8003fac <_scanf_i+0x17c>
 8003f98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	4798      	blx	r3
 8003fa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8003faa:	464d      	mov	r5, r9
 8003fac:	42bd      	cmp	r5, r7
 8003fae:	d02d      	beq.n	800400c <_scanf_i+0x1dc>
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	f012 0210 	ands.w	r2, r2, #16
 8003fb6:	d113      	bne.n	8003fe0 <_scanf_i+0x1b0>
 8003fb8:	702a      	strb	r2, [r5, #0]
 8003fba:	6863      	ldr	r3, [r4, #4]
 8003fbc:	9e01      	ldr	r6, [sp, #4]
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	4650      	mov	r0, sl
 8003fc2:	47b0      	blx	r6
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003fca:	f011 0f20 	tst.w	r1, #32
 8003fce:	d013      	beq.n	8003ff8 <_scanf_i+0x1c8>
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	f8c8 2000 	str.w	r2, [r8]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6018      	str	r0, [r3, #0]
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60e3      	str	r3, [r4, #12]
 8003fe0:	1bed      	subs	r5, r5, r7
 8003fe2:	44ab      	add	fp, r5
 8003fe4:	6925      	ldr	r5, [r4, #16]
 8003fe6:	445d      	add	r5, fp
 8003fe8:	6125      	str	r5, [r4, #16]
 8003fea:	2000      	movs	r0, #0
 8003fec:	b007      	add	sp, #28
 8003fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff2:	f04f 0b00 	mov.w	fp, #0
 8003ff6:	e7ca      	b.n	8003f8e <_scanf_i+0x15e>
 8003ff8:	1d1a      	adds	r2, r3, #4
 8003ffa:	f8c8 2000 	str.w	r2, [r8]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f011 0f01 	tst.w	r1, #1
 8004004:	bf14      	ite	ne
 8004006:	8018      	strhne	r0, [r3, #0]
 8004008:	6018      	streq	r0, [r3, #0]
 800400a:	e7e6      	b.n	8003fda <_scanf_i+0x1aa>
 800400c:	2001      	movs	r0, #1
 800400e:	e7ed      	b.n	8003fec <_scanf_i+0x1bc>
 8004010:	080046e4 	.word	0x080046e4
 8004014:	0800427d 	.word	0x0800427d
 8004018:	08004195 	.word	0x08004195
 800401c:	08004985 	.word	0x08004985

08004020 <__sccl>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	780b      	ldrb	r3, [r1, #0]
 8004024:	4604      	mov	r4, r0
 8004026:	2b5e      	cmp	r3, #94	; 0x5e
 8004028:	bf0b      	itete	eq
 800402a:	784b      	ldrbeq	r3, [r1, #1]
 800402c:	1c48      	addne	r0, r1, #1
 800402e:	1c88      	addeq	r0, r1, #2
 8004030:	2200      	movne	r2, #0
 8004032:	bf08      	it	eq
 8004034:	2201      	moveq	r2, #1
 8004036:	1e61      	subs	r1, r4, #1
 8004038:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800403c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004040:	42a9      	cmp	r1, r5
 8004042:	d1fb      	bne.n	800403c <__sccl+0x1c>
 8004044:	b90b      	cbnz	r3, 800404a <__sccl+0x2a>
 8004046:	3801      	subs	r0, #1
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	f082 0201 	eor.w	r2, r2, #1
 800404e:	54e2      	strb	r2, [r4, r3]
 8004050:	4605      	mov	r5, r0
 8004052:	4628      	mov	r0, r5
 8004054:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004058:	292d      	cmp	r1, #45	; 0x2d
 800405a:	d006      	beq.n	800406a <__sccl+0x4a>
 800405c:	295d      	cmp	r1, #93	; 0x5d
 800405e:	d0f3      	beq.n	8004048 <__sccl+0x28>
 8004060:	b909      	cbnz	r1, 8004066 <__sccl+0x46>
 8004062:	4628      	mov	r0, r5
 8004064:	e7f0      	b.n	8004048 <__sccl+0x28>
 8004066:	460b      	mov	r3, r1
 8004068:	e7f1      	b.n	800404e <__sccl+0x2e>
 800406a:	786e      	ldrb	r6, [r5, #1]
 800406c:	2e5d      	cmp	r6, #93	; 0x5d
 800406e:	d0fa      	beq.n	8004066 <__sccl+0x46>
 8004070:	42b3      	cmp	r3, r6
 8004072:	dcf8      	bgt.n	8004066 <__sccl+0x46>
 8004074:	3502      	adds	r5, #2
 8004076:	4619      	mov	r1, r3
 8004078:	3101      	adds	r1, #1
 800407a:	428e      	cmp	r6, r1
 800407c:	5462      	strb	r2, [r4, r1]
 800407e:	dcfb      	bgt.n	8004078 <__sccl+0x58>
 8004080:	1af1      	subs	r1, r6, r3
 8004082:	3901      	subs	r1, #1
 8004084:	1c58      	adds	r0, r3, #1
 8004086:	42b3      	cmp	r3, r6
 8004088:	bfa8      	it	ge
 800408a:	2100      	movge	r1, #0
 800408c:	1843      	adds	r3, r0, r1
 800408e:	e7e0      	b.n	8004052 <__sccl+0x32>

08004090 <_strtol_l.constprop.0>:
 8004090:	2b01      	cmp	r3, #1
 8004092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004096:	d001      	beq.n	800409c <_strtol_l.constprop.0+0xc>
 8004098:	2b24      	cmp	r3, #36	; 0x24
 800409a:	d906      	bls.n	80040aa <_strtol_l.constprop.0+0x1a>
 800409c:	f7ff fc2e 	bl	80038fc <__errno>
 80040a0:	2316      	movs	r3, #22
 80040a2:	6003      	str	r3, [r0, #0]
 80040a4:	2000      	movs	r0, #0
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004190 <_strtol_l.constprop.0+0x100>
 80040ae:	460d      	mov	r5, r1
 80040b0:	462e      	mov	r6, r5
 80040b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80040ba:	f017 0708 	ands.w	r7, r7, #8
 80040be:	d1f7      	bne.n	80040b0 <_strtol_l.constprop.0+0x20>
 80040c0:	2c2d      	cmp	r4, #45	; 0x2d
 80040c2:	d132      	bne.n	800412a <_strtol_l.constprop.0+0x9a>
 80040c4:	782c      	ldrb	r4, [r5, #0]
 80040c6:	2701      	movs	r7, #1
 80040c8:	1cb5      	adds	r5, r6, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d05b      	beq.n	8004186 <_strtol_l.constprop.0+0xf6>
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d109      	bne.n	80040e6 <_strtol_l.constprop.0+0x56>
 80040d2:	2c30      	cmp	r4, #48	; 0x30
 80040d4:	d107      	bne.n	80040e6 <_strtol_l.constprop.0+0x56>
 80040d6:	782c      	ldrb	r4, [r5, #0]
 80040d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80040dc:	2c58      	cmp	r4, #88	; 0x58
 80040de:	d14d      	bne.n	800417c <_strtol_l.constprop.0+0xec>
 80040e0:	786c      	ldrb	r4, [r5, #1]
 80040e2:	2310      	movs	r3, #16
 80040e4:	3502      	adds	r5, #2
 80040e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80040ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80040ee:	f04f 0c00 	mov.w	ip, #0
 80040f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80040f6:	4666      	mov	r6, ip
 80040f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80040fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004100:	f1be 0f09 	cmp.w	lr, #9
 8004104:	d816      	bhi.n	8004134 <_strtol_l.constprop.0+0xa4>
 8004106:	4674      	mov	r4, lr
 8004108:	42a3      	cmp	r3, r4
 800410a:	dd24      	ble.n	8004156 <_strtol_l.constprop.0+0xc6>
 800410c:	f1bc 0f00 	cmp.w	ip, #0
 8004110:	db1e      	blt.n	8004150 <_strtol_l.constprop.0+0xc0>
 8004112:	45b1      	cmp	r9, r6
 8004114:	d31c      	bcc.n	8004150 <_strtol_l.constprop.0+0xc0>
 8004116:	d101      	bne.n	800411c <_strtol_l.constprop.0+0x8c>
 8004118:	45a2      	cmp	sl, r4
 800411a:	db19      	blt.n	8004150 <_strtol_l.constprop.0+0xc0>
 800411c:	fb06 4603 	mla	r6, r6, r3, r4
 8004120:	f04f 0c01 	mov.w	ip, #1
 8004124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004128:	e7e8      	b.n	80040fc <_strtol_l.constprop.0+0x6c>
 800412a:	2c2b      	cmp	r4, #43	; 0x2b
 800412c:	bf04      	itt	eq
 800412e:	782c      	ldrbeq	r4, [r5, #0]
 8004130:	1cb5      	addeq	r5, r6, #2
 8004132:	e7ca      	b.n	80040ca <_strtol_l.constprop.0+0x3a>
 8004134:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004138:	f1be 0f19 	cmp.w	lr, #25
 800413c:	d801      	bhi.n	8004142 <_strtol_l.constprop.0+0xb2>
 800413e:	3c37      	subs	r4, #55	; 0x37
 8004140:	e7e2      	b.n	8004108 <_strtol_l.constprop.0+0x78>
 8004142:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004146:	f1be 0f19 	cmp.w	lr, #25
 800414a:	d804      	bhi.n	8004156 <_strtol_l.constprop.0+0xc6>
 800414c:	3c57      	subs	r4, #87	; 0x57
 800414e:	e7db      	b.n	8004108 <_strtol_l.constprop.0+0x78>
 8004150:	f04f 3cff 	mov.w	ip, #4294967295
 8004154:	e7e6      	b.n	8004124 <_strtol_l.constprop.0+0x94>
 8004156:	f1bc 0f00 	cmp.w	ip, #0
 800415a:	da05      	bge.n	8004168 <_strtol_l.constprop.0+0xd8>
 800415c:	2322      	movs	r3, #34	; 0x22
 800415e:	6003      	str	r3, [r0, #0]
 8004160:	4646      	mov	r6, r8
 8004162:	b942      	cbnz	r2, 8004176 <_strtol_l.constprop.0+0xe6>
 8004164:	4630      	mov	r0, r6
 8004166:	e79e      	b.n	80040a6 <_strtol_l.constprop.0+0x16>
 8004168:	b107      	cbz	r7, 800416c <_strtol_l.constprop.0+0xdc>
 800416a:	4276      	negs	r6, r6
 800416c:	2a00      	cmp	r2, #0
 800416e:	d0f9      	beq.n	8004164 <_strtol_l.constprop.0+0xd4>
 8004170:	f1bc 0f00 	cmp.w	ip, #0
 8004174:	d000      	beq.n	8004178 <_strtol_l.constprop.0+0xe8>
 8004176:	1e69      	subs	r1, r5, #1
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	e7f3      	b.n	8004164 <_strtol_l.constprop.0+0xd4>
 800417c:	2430      	movs	r4, #48	; 0x30
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1b1      	bne.n	80040e6 <_strtol_l.constprop.0+0x56>
 8004182:	2308      	movs	r3, #8
 8004184:	e7af      	b.n	80040e6 <_strtol_l.constprop.0+0x56>
 8004186:	2c30      	cmp	r4, #48	; 0x30
 8004188:	d0a5      	beq.n	80040d6 <_strtol_l.constprop.0+0x46>
 800418a:	230a      	movs	r3, #10
 800418c:	e7ab      	b.n	80040e6 <_strtol_l.constprop.0+0x56>
 800418e:	bf00      	nop
 8004190:	08004988 	.word	0x08004988

08004194 <_strtol_r>:
 8004194:	f7ff bf7c 	b.w	8004090 <_strtol_l.constprop.0>

08004198 <_strtoul_l.constprop.0>:
 8004198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800419c:	4f36      	ldr	r7, [pc, #216]	; (8004278 <_strtoul_l.constprop.0+0xe0>)
 800419e:	4686      	mov	lr, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	4628      	mov	r0, r5
 80041a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041a8:	5de6      	ldrb	r6, [r4, r7]
 80041aa:	f016 0608 	ands.w	r6, r6, #8
 80041ae:	d1f8      	bne.n	80041a2 <_strtoul_l.constprop.0+0xa>
 80041b0:	2c2d      	cmp	r4, #45	; 0x2d
 80041b2:	d12f      	bne.n	8004214 <_strtoul_l.constprop.0+0x7c>
 80041b4:	782c      	ldrb	r4, [r5, #0]
 80041b6:	2601      	movs	r6, #1
 80041b8:	1c85      	adds	r5, r0, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d057      	beq.n	800426e <_strtoul_l.constprop.0+0xd6>
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d109      	bne.n	80041d6 <_strtoul_l.constprop.0+0x3e>
 80041c2:	2c30      	cmp	r4, #48	; 0x30
 80041c4:	d107      	bne.n	80041d6 <_strtoul_l.constprop.0+0x3e>
 80041c6:	7828      	ldrb	r0, [r5, #0]
 80041c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80041cc:	2858      	cmp	r0, #88	; 0x58
 80041ce:	d149      	bne.n	8004264 <_strtoul_l.constprop.0+0xcc>
 80041d0:	786c      	ldrb	r4, [r5, #1]
 80041d2:	2310      	movs	r3, #16
 80041d4:	3502      	adds	r5, #2
 80041d6:	f04f 38ff 	mov.w	r8, #4294967295
 80041da:	2700      	movs	r7, #0
 80041dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80041e0:	fb03 f908 	mul.w	r9, r3, r8
 80041e4:	ea6f 0909 	mvn.w	r9, r9
 80041e8:	4638      	mov	r0, r7
 80041ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80041ee:	f1bc 0f09 	cmp.w	ip, #9
 80041f2:	d814      	bhi.n	800421e <_strtoul_l.constprop.0+0x86>
 80041f4:	4664      	mov	r4, ip
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	dd22      	ble.n	8004240 <_strtoul_l.constprop.0+0xa8>
 80041fa:	2f00      	cmp	r7, #0
 80041fc:	db1d      	blt.n	800423a <_strtoul_l.constprop.0+0xa2>
 80041fe:	4580      	cmp	r8, r0
 8004200:	d31b      	bcc.n	800423a <_strtoul_l.constprop.0+0xa2>
 8004202:	d101      	bne.n	8004208 <_strtoul_l.constprop.0+0x70>
 8004204:	45a1      	cmp	r9, r4
 8004206:	db18      	blt.n	800423a <_strtoul_l.constprop.0+0xa2>
 8004208:	fb00 4003 	mla	r0, r0, r3, r4
 800420c:	2701      	movs	r7, #1
 800420e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004212:	e7ea      	b.n	80041ea <_strtoul_l.constprop.0+0x52>
 8004214:	2c2b      	cmp	r4, #43	; 0x2b
 8004216:	bf04      	itt	eq
 8004218:	782c      	ldrbeq	r4, [r5, #0]
 800421a:	1c85      	addeq	r5, r0, #2
 800421c:	e7cd      	b.n	80041ba <_strtoul_l.constprop.0+0x22>
 800421e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004222:	f1bc 0f19 	cmp.w	ip, #25
 8004226:	d801      	bhi.n	800422c <_strtoul_l.constprop.0+0x94>
 8004228:	3c37      	subs	r4, #55	; 0x37
 800422a:	e7e4      	b.n	80041f6 <_strtoul_l.constprop.0+0x5e>
 800422c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004230:	f1bc 0f19 	cmp.w	ip, #25
 8004234:	d804      	bhi.n	8004240 <_strtoul_l.constprop.0+0xa8>
 8004236:	3c57      	subs	r4, #87	; 0x57
 8004238:	e7dd      	b.n	80041f6 <_strtoul_l.constprop.0+0x5e>
 800423a:	f04f 37ff 	mov.w	r7, #4294967295
 800423e:	e7e6      	b.n	800420e <_strtoul_l.constprop.0+0x76>
 8004240:	2f00      	cmp	r7, #0
 8004242:	da07      	bge.n	8004254 <_strtoul_l.constprop.0+0xbc>
 8004244:	2322      	movs	r3, #34	; 0x22
 8004246:	f8ce 3000 	str.w	r3, [lr]
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	b932      	cbnz	r2, 800425e <_strtoul_l.constprop.0+0xc6>
 8004250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004254:	b106      	cbz	r6, 8004258 <_strtoul_l.constprop.0+0xc0>
 8004256:	4240      	negs	r0, r0
 8004258:	2a00      	cmp	r2, #0
 800425a:	d0f9      	beq.n	8004250 <_strtoul_l.constprop.0+0xb8>
 800425c:	b107      	cbz	r7, 8004260 <_strtoul_l.constprop.0+0xc8>
 800425e:	1e69      	subs	r1, r5, #1
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	e7f5      	b.n	8004250 <_strtoul_l.constprop.0+0xb8>
 8004264:	2430      	movs	r4, #48	; 0x30
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1b5      	bne.n	80041d6 <_strtoul_l.constprop.0+0x3e>
 800426a:	2308      	movs	r3, #8
 800426c:	e7b3      	b.n	80041d6 <_strtoul_l.constprop.0+0x3e>
 800426e:	2c30      	cmp	r4, #48	; 0x30
 8004270:	d0a9      	beq.n	80041c6 <_strtoul_l.constprop.0+0x2e>
 8004272:	230a      	movs	r3, #10
 8004274:	e7af      	b.n	80041d6 <_strtoul_l.constprop.0+0x3e>
 8004276:	bf00      	nop
 8004278:	08004988 	.word	0x08004988

0800427c <_strtoul_r>:
 800427c:	f7ff bf8c 	b.w	8004198 <_strtoul_l.constprop.0>

08004280 <__submore>:
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	460c      	mov	r4, r1
 8004286:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800428c:	4299      	cmp	r1, r3
 800428e:	d11d      	bne.n	80042cc <__submore+0x4c>
 8004290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004294:	f000 f8aa 	bl	80043ec <_malloc_r>
 8004298:	b918      	cbnz	r0, 80042a2 <__submore+0x22>
 800429a:	f04f 30ff 	mov.w	r0, #4294967295
 800429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80042a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80042ac:	6360      	str	r0, [r4, #52]	; 0x34
 80042ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80042b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80042b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80042ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80042be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80042c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80042c6:	6020      	str	r0, [r4, #0]
 80042c8:	2000      	movs	r0, #0
 80042ca:	e7e8      	b.n	800429e <__submore+0x1e>
 80042cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80042ce:	0077      	lsls	r7, r6, #1
 80042d0:	463a      	mov	r2, r7
 80042d2:	f000 f8ff 	bl	80044d4 <_realloc_r>
 80042d6:	4605      	mov	r5, r0
 80042d8:	2800      	cmp	r0, #0
 80042da:	d0de      	beq.n	800429a <__submore+0x1a>
 80042dc:	eb00 0806 	add.w	r8, r0, r6
 80042e0:	4601      	mov	r1, r0
 80042e2:	4632      	mov	r2, r6
 80042e4:	4640      	mov	r0, r8
 80042e6:	f000 f807 	bl	80042f8 <memcpy>
 80042ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80042ee:	f8c4 8000 	str.w	r8, [r4]
 80042f2:	e7e9      	b.n	80042c8 <__submore+0x48>

080042f4 <__retarget_lock_acquire_recursive>:
 80042f4:	4770      	bx	lr

080042f6 <__retarget_lock_release_recursive>:
 80042f6:	4770      	bx	lr

080042f8 <memcpy>:
 80042f8:	440a      	add	r2, r1
 80042fa:	4291      	cmp	r1, r2
 80042fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004300:	d100      	bne.n	8004304 <memcpy+0xc>
 8004302:	4770      	bx	lr
 8004304:	b510      	push	{r4, lr}
 8004306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800430a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800430e:	4291      	cmp	r1, r2
 8004310:	d1f9      	bne.n	8004306 <memcpy+0xe>
 8004312:	bd10      	pop	{r4, pc}

08004314 <_free_r>:
 8004314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004316:	2900      	cmp	r1, #0
 8004318:	d044      	beq.n	80043a4 <_free_r+0x90>
 800431a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431e:	9001      	str	r0, [sp, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f1a1 0404 	sub.w	r4, r1, #4
 8004326:	bfb8      	it	lt
 8004328:	18e4      	addlt	r4, r4, r3
 800432a:	f000 f913 	bl	8004554 <__malloc_lock>
 800432e:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <_free_r+0x94>)
 8004330:	9801      	ldr	r0, [sp, #4]
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	b933      	cbnz	r3, 8004344 <_free_r+0x30>
 8004336:	6063      	str	r3, [r4, #4]
 8004338:	6014      	str	r4, [r2, #0]
 800433a:	b003      	add	sp, #12
 800433c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004340:	f000 b90e 	b.w	8004560 <__malloc_unlock>
 8004344:	42a3      	cmp	r3, r4
 8004346:	d908      	bls.n	800435a <_free_r+0x46>
 8004348:	6825      	ldr	r5, [r4, #0]
 800434a:	1961      	adds	r1, r4, r5
 800434c:	428b      	cmp	r3, r1
 800434e:	bf01      	itttt	eq
 8004350:	6819      	ldreq	r1, [r3, #0]
 8004352:	685b      	ldreq	r3, [r3, #4]
 8004354:	1949      	addeq	r1, r1, r5
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	e7ed      	b.n	8004336 <_free_r+0x22>
 800435a:	461a      	mov	r2, r3
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b10b      	cbz	r3, 8004364 <_free_r+0x50>
 8004360:	42a3      	cmp	r3, r4
 8004362:	d9fa      	bls.n	800435a <_free_r+0x46>
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	1855      	adds	r5, r2, r1
 8004368:	42a5      	cmp	r5, r4
 800436a:	d10b      	bne.n	8004384 <_free_r+0x70>
 800436c:	6824      	ldr	r4, [r4, #0]
 800436e:	4421      	add	r1, r4
 8004370:	1854      	adds	r4, r2, r1
 8004372:	42a3      	cmp	r3, r4
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	d1e0      	bne.n	800433a <_free_r+0x26>
 8004378:	681c      	ldr	r4, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	6053      	str	r3, [r2, #4]
 800437e:	4421      	add	r1, r4
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	e7da      	b.n	800433a <_free_r+0x26>
 8004384:	d902      	bls.n	800438c <_free_r+0x78>
 8004386:	230c      	movs	r3, #12
 8004388:	6003      	str	r3, [r0, #0]
 800438a:	e7d6      	b.n	800433a <_free_r+0x26>
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	1961      	adds	r1, r4, r5
 8004390:	428b      	cmp	r3, r1
 8004392:	bf04      	itt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	6063      	str	r3, [r4, #4]
 800439a:	bf04      	itt	eq
 800439c:	1949      	addeq	r1, r1, r5
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	6054      	str	r4, [r2, #4]
 80043a2:	e7ca      	b.n	800433a <_free_r+0x26>
 80043a4:	b003      	add	sp, #12
 80043a6:	bd30      	pop	{r4, r5, pc}
 80043a8:	200003c0 	.word	0x200003c0

080043ac <sbrk_aligned>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	4e0e      	ldr	r6, [pc, #56]	; (80043e8 <sbrk_aligned+0x3c>)
 80043b0:	460c      	mov	r4, r1
 80043b2:	6831      	ldr	r1, [r6, #0]
 80043b4:	4605      	mov	r5, r0
 80043b6:	b911      	cbnz	r1, 80043be <sbrk_aligned+0x12>
 80043b8:	f000 f8bc 	bl	8004534 <_sbrk_r>
 80043bc:	6030      	str	r0, [r6, #0]
 80043be:	4621      	mov	r1, r4
 80043c0:	4628      	mov	r0, r5
 80043c2:	f000 f8b7 	bl	8004534 <_sbrk_r>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	d00a      	beq.n	80043e0 <sbrk_aligned+0x34>
 80043ca:	1cc4      	adds	r4, r0, #3
 80043cc:	f024 0403 	bic.w	r4, r4, #3
 80043d0:	42a0      	cmp	r0, r4
 80043d2:	d007      	beq.n	80043e4 <sbrk_aligned+0x38>
 80043d4:	1a21      	subs	r1, r4, r0
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 f8ac 	bl	8004534 <_sbrk_r>
 80043dc:	3001      	adds	r0, #1
 80043de:	d101      	bne.n	80043e4 <sbrk_aligned+0x38>
 80043e0:	f04f 34ff 	mov.w	r4, #4294967295
 80043e4:	4620      	mov	r0, r4
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
 80043e8:	200003c4 	.word	0x200003c4

080043ec <_malloc_r>:
 80043ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f0:	1ccd      	adds	r5, r1, #3
 80043f2:	f025 0503 	bic.w	r5, r5, #3
 80043f6:	3508      	adds	r5, #8
 80043f8:	2d0c      	cmp	r5, #12
 80043fa:	bf38      	it	cc
 80043fc:	250c      	movcc	r5, #12
 80043fe:	2d00      	cmp	r5, #0
 8004400:	4607      	mov	r7, r0
 8004402:	db01      	blt.n	8004408 <_malloc_r+0x1c>
 8004404:	42a9      	cmp	r1, r5
 8004406:	d905      	bls.n	8004414 <_malloc_r+0x28>
 8004408:	230c      	movs	r3, #12
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	2600      	movs	r6, #0
 800440e:	4630      	mov	r0, r6
 8004410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004414:	4e2e      	ldr	r6, [pc, #184]	; (80044d0 <_malloc_r+0xe4>)
 8004416:	f000 f89d 	bl	8004554 <__malloc_lock>
 800441a:	6833      	ldr	r3, [r6, #0]
 800441c:	461c      	mov	r4, r3
 800441e:	bb34      	cbnz	r4, 800446e <_malloc_r+0x82>
 8004420:	4629      	mov	r1, r5
 8004422:	4638      	mov	r0, r7
 8004424:	f7ff ffc2 	bl	80043ac <sbrk_aligned>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	4604      	mov	r4, r0
 800442c:	d14d      	bne.n	80044ca <_malloc_r+0xde>
 800442e:	6834      	ldr	r4, [r6, #0]
 8004430:	4626      	mov	r6, r4
 8004432:	2e00      	cmp	r6, #0
 8004434:	d140      	bne.n	80044b8 <_malloc_r+0xcc>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	4631      	mov	r1, r6
 800443a:	4638      	mov	r0, r7
 800443c:	eb04 0803 	add.w	r8, r4, r3
 8004440:	f000 f878 	bl	8004534 <_sbrk_r>
 8004444:	4580      	cmp	r8, r0
 8004446:	d13a      	bne.n	80044be <_malloc_r+0xd2>
 8004448:	6821      	ldr	r1, [r4, #0]
 800444a:	3503      	adds	r5, #3
 800444c:	1a6d      	subs	r5, r5, r1
 800444e:	f025 0503 	bic.w	r5, r5, #3
 8004452:	3508      	adds	r5, #8
 8004454:	2d0c      	cmp	r5, #12
 8004456:	bf38      	it	cc
 8004458:	250c      	movcc	r5, #12
 800445a:	4629      	mov	r1, r5
 800445c:	4638      	mov	r0, r7
 800445e:	f7ff ffa5 	bl	80043ac <sbrk_aligned>
 8004462:	3001      	adds	r0, #1
 8004464:	d02b      	beq.n	80044be <_malloc_r+0xd2>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	442b      	add	r3, r5
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	e00e      	b.n	800448c <_malloc_r+0xa0>
 800446e:	6822      	ldr	r2, [r4, #0]
 8004470:	1b52      	subs	r2, r2, r5
 8004472:	d41e      	bmi.n	80044b2 <_malloc_r+0xc6>
 8004474:	2a0b      	cmp	r2, #11
 8004476:	d916      	bls.n	80044a6 <_malloc_r+0xba>
 8004478:	1961      	adds	r1, r4, r5
 800447a:	42a3      	cmp	r3, r4
 800447c:	6025      	str	r5, [r4, #0]
 800447e:	bf18      	it	ne
 8004480:	6059      	strne	r1, [r3, #4]
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	bf08      	it	eq
 8004486:	6031      	streq	r1, [r6, #0]
 8004488:	5162      	str	r2, [r4, r5]
 800448a:	604b      	str	r3, [r1, #4]
 800448c:	4638      	mov	r0, r7
 800448e:	f104 060b 	add.w	r6, r4, #11
 8004492:	f000 f865 	bl	8004560 <__malloc_unlock>
 8004496:	f026 0607 	bic.w	r6, r6, #7
 800449a:	1d23      	adds	r3, r4, #4
 800449c:	1af2      	subs	r2, r6, r3
 800449e:	d0b6      	beq.n	800440e <_malloc_r+0x22>
 80044a0:	1b9b      	subs	r3, r3, r6
 80044a2:	50a3      	str	r3, [r4, r2]
 80044a4:	e7b3      	b.n	800440e <_malloc_r+0x22>
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	bf0c      	ite	eq
 80044ac:	6032      	streq	r2, [r6, #0]
 80044ae:	605a      	strne	r2, [r3, #4]
 80044b0:	e7ec      	b.n	800448c <_malloc_r+0xa0>
 80044b2:	4623      	mov	r3, r4
 80044b4:	6864      	ldr	r4, [r4, #4]
 80044b6:	e7b2      	b.n	800441e <_malloc_r+0x32>
 80044b8:	4634      	mov	r4, r6
 80044ba:	6876      	ldr	r6, [r6, #4]
 80044bc:	e7b9      	b.n	8004432 <_malloc_r+0x46>
 80044be:	230c      	movs	r3, #12
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4638      	mov	r0, r7
 80044c4:	f000 f84c 	bl	8004560 <__malloc_unlock>
 80044c8:	e7a1      	b.n	800440e <_malloc_r+0x22>
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	e7de      	b.n	800448c <_malloc_r+0xa0>
 80044ce:	bf00      	nop
 80044d0:	200003c0 	.word	0x200003c0

080044d4 <_realloc_r>:
 80044d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d8:	4680      	mov	r8, r0
 80044da:	4614      	mov	r4, r2
 80044dc:	460e      	mov	r6, r1
 80044de:	b921      	cbnz	r1, 80044ea <_realloc_r+0x16>
 80044e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	4611      	mov	r1, r2
 80044e6:	f7ff bf81 	b.w	80043ec <_malloc_r>
 80044ea:	b92a      	cbnz	r2, 80044f8 <_realloc_r+0x24>
 80044ec:	f7ff ff12 	bl	8004314 <_free_r>
 80044f0:	4625      	mov	r5, r4
 80044f2:	4628      	mov	r0, r5
 80044f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f8:	f000 f838 	bl	800456c <_malloc_usable_size_r>
 80044fc:	4284      	cmp	r4, r0
 80044fe:	4607      	mov	r7, r0
 8004500:	d802      	bhi.n	8004508 <_realloc_r+0x34>
 8004502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004506:	d812      	bhi.n	800452e <_realloc_r+0x5a>
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f7ff ff6e 	bl	80043ec <_malloc_r>
 8004510:	4605      	mov	r5, r0
 8004512:	2800      	cmp	r0, #0
 8004514:	d0ed      	beq.n	80044f2 <_realloc_r+0x1e>
 8004516:	42bc      	cmp	r4, r7
 8004518:	4622      	mov	r2, r4
 800451a:	4631      	mov	r1, r6
 800451c:	bf28      	it	cs
 800451e:	463a      	movcs	r2, r7
 8004520:	f7ff feea 	bl	80042f8 <memcpy>
 8004524:	4631      	mov	r1, r6
 8004526:	4640      	mov	r0, r8
 8004528:	f7ff fef4 	bl	8004314 <_free_r>
 800452c:	e7e1      	b.n	80044f2 <_realloc_r+0x1e>
 800452e:	4635      	mov	r5, r6
 8004530:	e7df      	b.n	80044f2 <_realloc_r+0x1e>
	...

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d06      	ldr	r5, [pc, #24]	; (8004550 <_sbrk_r+0x1c>)
 8004538:	2300      	movs	r3, #0
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc fbd0 	bl	8000ce4 <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	200003b8 	.word	0x200003b8

08004554 <__malloc_lock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_lock+0x8>)
 8004556:	f7ff becd 	b.w	80042f4 <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	200003bc 	.word	0x200003bc

08004560 <__malloc_unlock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_unlock+0x8>)
 8004562:	f7ff bec8 	b.w	80042f6 <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	200003bc 	.word	0x200003bc

0800456c <_malloc_usable_size_r>:
 800456c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004570:	1f18      	subs	r0, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	bfbc      	itt	lt
 8004576:	580b      	ldrlt	r3, [r1, r0]
 8004578:	18c0      	addlt	r0, r0, r3
 800457a:	4770      	bx	lr

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
